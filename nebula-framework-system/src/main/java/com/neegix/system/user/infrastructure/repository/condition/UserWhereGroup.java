package com.neegix.system.user.infrastructure.repository.condition;

import com.neegix.application.query.EnumOperator;
import com.neegix.application.query.WhereGroups;
import java.time.Instant;
import java.util.List;

 /**
  * This file is auto-generated by nebula-framework-generator.
  * The auto-generation plugin was developed using IntelliJ IDEA Community Edition.
  * Thanks to JetBrains for their outstanding contributions to the developer community.
  * <p>
  * The code generated by this tool is owned by the user of the tool.
  * The tool itself is copyrighted by <a href="https://www.neegix.com">https://www.neegix.com</a>.
  *
  * @author <a href="https://www.neegix.com">https://www.neegix.com</a>
  * @version 1.0.0
  * @since 2024-12-03 11:47:28
  */

public class UserWhereGroup extends WhereGroups {
    public UserWhereGroup andIdIsNull() {
        addCriterion("id", EnumOperator.IS_NULL, null);
        return this;
    }

    public UserWhereGroup andIdIsNotNull() {
        addCriterion("id", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public UserWhereGroup andIdEqualTo(Long value) {
        addCriterion("id", EnumOperator.EQUAL, value);
        return this;
    }


    public UserWhereGroup andIdNotEqualTo(Long value) {
        addCriterion("id", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public UserWhereGroup andIdBetween(Long value1, Long value2) {
        addCriterion("id", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("id", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public UserWhereGroup andIdNotBetween(Long value1, Long value2) {
        addCriterion("id", EnumOperator.LESS_THAN, value1);
        addCriterion("id", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public UserWhereGroup andIdLikeTo(Long value) {
        addCriterion("id", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public UserWhereGroup andIdLikeTo(boolean prefix, Long value) {
        addCriterion("id", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public UserWhereGroup andIdLikeTo(Long value, boolean suffix) {
        addCriterion("id", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public UserWhereGroup andIdNotLikeTo(Long value) {
        addCriterion("id", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public UserWhereGroup andIdNotLikeTo(boolean prefix, Long value) {
        addCriterion("id", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public UserWhereGroup andIdNotLikeTo(Long value, boolean suffix) {
        addCriterion("id", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public UserWhereGroup andIdIn(List<Long> list) {
        addCriterion("id", EnumOperator.IN, list);
        return this;
    }


    public UserWhereGroup andIdNotIn(List<Long> list) {
        addCriterion("id", EnumOperator.NOT_IN, list);
        return this;
    }

    public UserWhereGroup andCreateTimeIsNull() {
        addCriterion("create_time", EnumOperator.IS_NULL, null);
        return this;
    }

    public UserWhereGroup andCreateTimeIsNotNull() {
        addCriterion("create_time", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public UserWhereGroup andCreateTimeEqualTo(Instant value) {
        addCriterion("create_time", EnumOperator.EQUAL, value);
        return this;
    }


    public UserWhereGroup andCreateTimeNotEqualTo(Instant value) {
        addCriterion("create_time", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public UserWhereGroup andCreateTimeBetween(Instant value1, Instant value2) {
        addCriterion("create_time", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("create_time", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public UserWhereGroup andCreateTimeNotBetween(Instant value1, Instant value2) {
        addCriterion("create_time", EnumOperator.LESS_THAN, value1);
        addCriterion("create_time", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public UserWhereGroup andCreateTimeLikeTo(Instant value) {
        addCriterion("create_time", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public UserWhereGroup andCreateTimeLikeTo(boolean prefix, Instant value) {
        addCriterion("create_time", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public UserWhereGroup andCreateTimeLikeTo(Instant value, boolean suffix) {
        addCriterion("create_time", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public UserWhereGroup andCreateTimeNotLikeTo(Instant value) {
        addCriterion("create_time", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public UserWhereGroup andCreateTimeNotLikeTo(boolean prefix, Instant value) {
        addCriterion("create_time", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public UserWhereGroup andCreateTimeNotLikeTo(Instant value, boolean suffix) {
        addCriterion("create_time", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public UserWhereGroup andCreateTimeIn(List<Instant> list) {
        addCriterion("create_time", EnumOperator.IN, list);
        return this;
    }


    public UserWhereGroup andCreateTimeNotIn(List<Instant> list) {
        addCriterion("create_time", EnumOperator.NOT_IN, list);
        return this;
    }

    public UserWhereGroup andUpdateTimeIsNull() {
        addCriterion("update_time", EnumOperator.IS_NULL, null);
        return this;
    }

    public UserWhereGroup andUpdateTimeIsNotNull() {
        addCriterion("update_time", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public UserWhereGroup andUpdateTimeEqualTo(Instant value) {
        addCriterion("update_time", EnumOperator.EQUAL, value);
        return this;
    }


    public UserWhereGroup andUpdateTimeNotEqualTo(Instant value) {
        addCriterion("update_time", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public UserWhereGroup andUpdateTimeBetween(Instant value1, Instant value2) {
        addCriterion("update_time", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("update_time", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public UserWhereGroup andUpdateTimeNotBetween(Instant value1, Instant value2) {
        addCriterion("update_time", EnumOperator.LESS_THAN, value1);
        addCriterion("update_time", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public UserWhereGroup andUpdateTimeLikeTo(Instant value) {
        addCriterion("update_time", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public UserWhereGroup andUpdateTimeLikeTo(boolean prefix, Instant value) {
        addCriterion("update_time", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public UserWhereGroup andUpdateTimeLikeTo(Instant value, boolean suffix) {
        addCriterion("update_time", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public UserWhereGroup andUpdateTimeNotLikeTo(Instant value) {
        addCriterion("update_time", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public UserWhereGroup andUpdateTimeNotLikeTo(boolean prefix, Instant value) {
        addCriterion("update_time", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public UserWhereGroup andUpdateTimeNotLikeTo(Instant value, boolean suffix) {
        addCriterion("update_time", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public UserWhereGroup andUpdateTimeIn(List<Instant> list) {
        addCriterion("update_time", EnumOperator.IN, list);
        return this;
    }


    public UserWhereGroup andUpdateTimeNotIn(List<Instant> list) {
        addCriterion("update_time", EnumOperator.NOT_IN, list);
        return this;
    }

    public UserWhereGroup andCreateUserIsNull() {
        addCriterion("create_user", EnumOperator.IS_NULL, null);
        return this;
    }

    public UserWhereGroup andCreateUserIsNotNull() {
        addCriterion("create_user", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public UserWhereGroup andCreateUserEqualTo(Long value) {
        addCriterion("create_user", EnumOperator.EQUAL, value);
        return this;
    }


    public UserWhereGroup andCreateUserNotEqualTo(Long value) {
        addCriterion("create_user", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public UserWhereGroup andCreateUserBetween(Long value1, Long value2) {
        addCriterion("create_user", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("create_user", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public UserWhereGroup andCreateUserNotBetween(Long value1, Long value2) {
        addCriterion("create_user", EnumOperator.LESS_THAN, value1);
        addCriterion("create_user", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public UserWhereGroup andCreateUserLikeTo(Long value) {
        addCriterion("create_user", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public UserWhereGroup andCreateUserLikeTo(boolean prefix, Long value) {
        addCriterion("create_user", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public UserWhereGroup andCreateUserLikeTo(Long value, boolean suffix) {
        addCriterion("create_user", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public UserWhereGroup andCreateUserNotLikeTo(Long value) {
        addCriterion("create_user", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public UserWhereGroup andCreateUserNotLikeTo(boolean prefix, Long value) {
        addCriterion("create_user", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public UserWhereGroup andCreateUserNotLikeTo(Long value, boolean suffix) {
        addCriterion("create_user", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public UserWhereGroup andCreateUserIn(List<Long> list) {
        addCriterion("create_user", EnumOperator.IN, list);
        return this;
    }


    public UserWhereGroup andCreateUserNotIn(List<Long> list) {
        addCriterion("create_user", EnumOperator.NOT_IN, list);
        return this;
    }

    public UserWhereGroup andUpdateUserIsNull() {
        addCriterion("update_user", EnumOperator.IS_NULL, null);
        return this;
    }

    public UserWhereGroup andUpdateUserIsNotNull() {
        addCriterion("update_user", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public UserWhereGroup andUpdateUserEqualTo(Long value) {
        addCriterion("update_user", EnumOperator.EQUAL, value);
        return this;
    }


    public UserWhereGroup andUpdateUserNotEqualTo(Long value) {
        addCriterion("update_user", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public UserWhereGroup andUpdateUserBetween(Long value1, Long value2) {
        addCriterion("update_user", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("update_user", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public UserWhereGroup andUpdateUserNotBetween(Long value1, Long value2) {
        addCriterion("update_user", EnumOperator.LESS_THAN, value1);
        addCriterion("update_user", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public UserWhereGroup andUpdateUserLikeTo(Long value) {
        addCriterion("update_user", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public UserWhereGroup andUpdateUserLikeTo(boolean prefix, Long value) {
        addCriterion("update_user", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public UserWhereGroup andUpdateUserLikeTo(Long value, boolean suffix) {
        addCriterion("update_user", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public UserWhereGroup andUpdateUserNotLikeTo(Long value) {
        addCriterion("update_user", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public UserWhereGroup andUpdateUserNotLikeTo(boolean prefix, Long value) {
        addCriterion("update_user", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public UserWhereGroup andUpdateUserNotLikeTo(Long value, boolean suffix) {
        addCriterion("update_user", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public UserWhereGroup andUpdateUserIn(List<Long> list) {
        addCriterion("update_user", EnumOperator.IN, list);
        return this;
    }


    public UserWhereGroup andUpdateUserNotIn(List<Long> list) {
        addCriterion("update_user", EnumOperator.NOT_IN, list);
        return this;
    }

    public UserWhereGroup andNameIsNull() {
        addCriterion("name", EnumOperator.IS_NULL, null);
        return this;
    }

    public UserWhereGroup andNameIsNotNull() {
        addCriterion("name", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public UserWhereGroup andNameEqualTo(String value) {
        addCriterion("name", EnumOperator.EQUAL, value);
        return this;
    }


    public UserWhereGroup andNameNotEqualTo(String value) {
        addCriterion("name", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public UserWhereGroup andNameBetween(String value1, String value2) {
        addCriterion("name", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("name", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public UserWhereGroup andNameNotBetween(String value1, String value2) {
        addCriterion("name", EnumOperator.LESS_THAN, value1);
        addCriterion("name", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public UserWhereGroup andNameLikeTo(String value) {
        addCriterion("name", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public UserWhereGroup andNameLikeTo(boolean prefix, String value) {
        addCriterion("name", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public UserWhereGroup andNameLikeTo(String value, boolean suffix) {
        addCriterion("name", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public UserWhereGroup andNameNotLikeTo(String value) {
        addCriterion("name", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public UserWhereGroup andNameNotLikeTo(boolean prefix, String value) {
        addCriterion("name", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public UserWhereGroup andNameNotLikeTo(String value, boolean suffix) {
        addCriterion("name", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public UserWhereGroup andNameIn(List<String> list) {
        addCriterion("name", EnumOperator.IN, list);
        return this;
    }


    public UserWhereGroup andNameNotIn(List<String> list) {
        addCriterion("name", EnumOperator.NOT_IN, list);
        return this;
    }

    public UserWhereGroup andPasswordIsNull() {
        addCriterion("password", EnumOperator.IS_NULL, null);
        return this;
    }

    public UserWhereGroup andPasswordIsNotNull() {
        addCriterion("password", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public UserWhereGroup andPasswordEqualTo(String value) {
        addCriterion("password", EnumOperator.EQUAL, value);
        return this;
    }


    public UserWhereGroup andPasswordNotEqualTo(String value) {
        addCriterion("password", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public UserWhereGroup andPasswordBetween(String value1, String value2) {
        addCriterion("password", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("password", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public UserWhereGroup andPasswordNotBetween(String value1, String value2) {
        addCriterion("password", EnumOperator.LESS_THAN, value1);
        addCriterion("password", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public UserWhereGroup andPasswordLikeTo(String value) {
        addCriterion("password", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public UserWhereGroup andPasswordLikeTo(boolean prefix, String value) {
        addCriterion("password", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public UserWhereGroup andPasswordLikeTo(String value, boolean suffix) {
        addCriterion("password", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public UserWhereGroup andPasswordNotLikeTo(String value) {
        addCriterion("password", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public UserWhereGroup andPasswordNotLikeTo(boolean prefix, String value) {
        addCriterion("password", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public UserWhereGroup andPasswordNotLikeTo(String value, boolean suffix) {
        addCriterion("password", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public UserWhereGroup andPasswordIn(List<String> list) {
        addCriterion("password", EnumOperator.IN, list);
        return this;
    }


    public UserWhereGroup andPasswordNotIn(List<String> list) {
        addCriterion("password", EnumOperator.NOT_IN, list);
        return this;
    }

    public UserWhereGroup andDescriptionIsNull() {
        addCriterion("description", EnumOperator.IS_NULL, null);
        return this;
    }

    public UserWhereGroup andDescriptionIsNotNull() {
        addCriterion("description", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public UserWhereGroup andDescriptionEqualTo(String value) {
        addCriterion("description", EnumOperator.EQUAL, value);
        return this;
    }


    public UserWhereGroup andDescriptionNotEqualTo(String value) {
        addCriterion("description", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public UserWhereGroup andDescriptionBetween(String value1, String value2) {
        addCriterion("description", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("description", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public UserWhereGroup andDescriptionNotBetween(String value1, String value2) {
        addCriterion("description", EnumOperator.LESS_THAN, value1);
        addCriterion("description", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public UserWhereGroup andDescriptionLikeTo(String value) {
        addCriterion("description", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public UserWhereGroup andDescriptionLikeTo(boolean prefix, String value) {
        addCriterion("description", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public UserWhereGroup andDescriptionLikeTo(String value, boolean suffix) {
        addCriterion("description", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public UserWhereGroup andDescriptionNotLikeTo(String value) {
        addCriterion("description", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public UserWhereGroup andDescriptionNotLikeTo(boolean prefix, String value) {
        addCriterion("description", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public UserWhereGroup andDescriptionNotLikeTo(String value, boolean suffix) {
        addCriterion("description", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public UserWhereGroup andDescriptionIn(List<String> list) {
        addCriterion("description", EnumOperator.IN, list);
        return this;
    }


    public UserWhereGroup andDescriptionNotIn(List<String> list) {
        addCriterion("description", EnumOperator.NOT_IN, list);
        return this;
    }

    public UserWhereGroup andEmailIsNull() {
        addCriterion("email", EnumOperator.IS_NULL, null);
        return this;
    }

    public UserWhereGroup andEmailIsNotNull() {
        addCriterion("email", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public UserWhereGroup andEmailEqualTo(String value) {
        addCriterion("email", EnumOperator.EQUAL, value);
        return this;
    }


    public UserWhereGroup andEmailNotEqualTo(String value) {
        addCriterion("email", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public UserWhereGroup andEmailBetween(String value1, String value2) {
        addCriterion("email", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("email", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public UserWhereGroup andEmailNotBetween(String value1, String value2) {
        addCriterion("email", EnumOperator.LESS_THAN, value1);
        addCriterion("email", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public UserWhereGroup andEmailLikeTo(String value) {
        addCriterion("email", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public UserWhereGroup andEmailLikeTo(boolean prefix, String value) {
        addCriterion("email", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public UserWhereGroup andEmailLikeTo(String value, boolean suffix) {
        addCriterion("email", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public UserWhereGroup andEmailNotLikeTo(String value) {
        addCriterion("email", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public UserWhereGroup andEmailNotLikeTo(boolean prefix, String value) {
        addCriterion("email", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public UserWhereGroup andEmailNotLikeTo(String value, boolean suffix) {
        addCriterion("email", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public UserWhereGroup andEmailIn(List<String> list) {
        addCriterion("email", EnumOperator.IN, list);
        return this;
    }


    public UserWhereGroup andEmailNotIn(List<String> list) {
        addCriterion("email", EnumOperator.NOT_IN, list);
        return this;
    }

    public UserWhereGroup andMobilePhoneIsNull() {
        addCriterion("mobile_phone", EnumOperator.IS_NULL, null);
        return this;
    }

    public UserWhereGroup andMobilePhoneIsNotNull() {
        addCriterion("mobile_phone", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public UserWhereGroup andMobilePhoneEqualTo(String value) {
        addCriterion("mobile_phone", EnumOperator.EQUAL, value);
        return this;
    }


    public UserWhereGroup andMobilePhoneNotEqualTo(String value) {
        addCriterion("mobile_phone", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public UserWhereGroup andMobilePhoneBetween(String value1, String value2) {
        addCriterion("mobile_phone", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("mobile_phone", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public UserWhereGroup andMobilePhoneNotBetween(String value1, String value2) {
        addCriterion("mobile_phone", EnumOperator.LESS_THAN, value1);
        addCriterion("mobile_phone", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public UserWhereGroup andMobilePhoneLikeTo(String value) {
        addCriterion("mobile_phone", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public UserWhereGroup andMobilePhoneLikeTo(boolean prefix, String value) {
        addCriterion("mobile_phone", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public UserWhereGroup andMobilePhoneLikeTo(String value, boolean suffix) {
        addCriterion("mobile_phone", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public UserWhereGroup andMobilePhoneNotLikeTo(String value) {
        addCriterion("mobile_phone", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public UserWhereGroup andMobilePhoneNotLikeTo(boolean prefix, String value) {
        addCriterion("mobile_phone", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public UserWhereGroup andMobilePhoneNotLikeTo(String value, boolean suffix) {
        addCriterion("mobile_phone", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public UserWhereGroup andMobilePhoneIn(List<String> list) {
        addCriterion("mobile_phone", EnumOperator.IN, list);
        return this;
    }


    public UserWhereGroup andMobilePhoneNotIn(List<String> list) {
        addCriterion("mobile_phone", EnumOperator.NOT_IN, list);
        return this;
    }

    public UserWhereGroup andEnabledIsNull() {
        addCriterion("enabled", EnumOperator.IS_NULL, null);
        return this;
    }

    public UserWhereGroup andEnabledIsNotNull() {
        addCriterion("enabled", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public UserWhereGroup andEnabledEqualTo(Boolean value) {
        addCriterion("enabled", EnumOperator.EQUAL, value);
        return this;
    }


    public UserWhereGroup andEnabledNotEqualTo(Boolean value) {
        addCriterion("enabled", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public UserWhereGroup andEnabledBetween(Boolean value1, Boolean value2) {
        addCriterion("enabled", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("enabled", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public UserWhereGroup andEnabledNotBetween(Boolean value1, Boolean value2) {
        addCriterion("enabled", EnumOperator.LESS_THAN, value1);
        addCriterion("enabled", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public UserWhereGroup andEnabledLikeTo(Boolean value) {
        addCriterion("enabled", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public UserWhereGroup andEnabledLikeTo(boolean prefix, Boolean value) {
        addCriterion("enabled", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public UserWhereGroup andEnabledLikeTo(Boolean value, boolean suffix) {
        addCriterion("enabled", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public UserWhereGroup andEnabledNotLikeTo(Boolean value) {
        addCriterion("enabled", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public UserWhereGroup andEnabledNotLikeTo(boolean prefix, Boolean value) {
        addCriterion("enabled", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public UserWhereGroup andEnabledNotLikeTo(Boolean value, boolean suffix) {
        addCriterion("enabled", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public UserWhereGroup andEnabledIn(List<Boolean> list) {
        addCriterion("enabled", EnumOperator.IN, list);
        return this;
    }


    public UserWhereGroup andEnabledNotIn(List<Boolean> list) {
        addCriterion("enabled", EnumOperator.NOT_IN, list);
        return this;
    }

    public UserWhereGroup andDeletedIsNull() {
        addCriterion("deleted", EnumOperator.IS_NULL, null);
        return this;
    }

    public UserWhereGroup andDeletedIsNotNull() {
        addCriterion("deleted", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public UserWhereGroup andDeletedEqualTo(Boolean value) {
        addCriterion("deleted", EnumOperator.EQUAL, value);
        return this;
    }


    public UserWhereGroup andDeletedNotEqualTo(Boolean value) {
        addCriterion("deleted", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public UserWhereGroup andDeletedBetween(Boolean value1, Boolean value2) {
        addCriterion("deleted", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("deleted", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public UserWhereGroup andDeletedNotBetween(Boolean value1, Boolean value2) {
        addCriterion("deleted", EnumOperator.LESS_THAN, value1);
        addCriterion("deleted", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public UserWhereGroup andDeletedLikeTo(Boolean value) {
        addCriterion("deleted", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public UserWhereGroup andDeletedLikeTo(boolean prefix, Boolean value) {
        addCriterion("deleted", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public UserWhereGroup andDeletedLikeTo(Boolean value, boolean suffix) {
        addCriterion("deleted", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public UserWhereGroup andDeletedNotLikeTo(Boolean value) {
        addCriterion("deleted", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public UserWhereGroup andDeletedNotLikeTo(boolean prefix, Boolean value) {
        addCriterion("deleted", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public UserWhereGroup andDeletedNotLikeTo(Boolean value, boolean suffix) {
        addCriterion("deleted", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public UserWhereGroup andDeletedIn(List<Boolean> list) {
        addCriterion("deleted", EnumOperator.IN, list);
        return this;
    }


    public UserWhereGroup andDeletedNotIn(List<Boolean> list) {
        addCriterion("deleted", EnumOperator.NOT_IN, list);
        return this;
    }


}
