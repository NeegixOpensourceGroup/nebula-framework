package com.neegix.system.role.infrastructure.repository.condition;

import com.neegix.application.query.EnumOperator;
import com.neegix.application.query.WhereGroups;
import java.time.Instant;
import java.util.List;

 /**
  * This file is auto-generated by nebula-framework-generator.
  * The auto-generation plugin was developed using IntelliJ IDEA Community Edition.
  * Thanks to JetBrains for their outstanding contributions to the developer community.
  * <p>
  * The code generated by this tool is owned by the user of the tool.
  * The tool itself is copyrighted by <a href="https://www.neegix.com">https://www.neegix.com</a>.
  *
  * @author <a href="https://www.neegix.com">https://www.neegix.com</a>
  * @version 1.0.0
  * @since 2024-11-25 11:32:40
  */

public class RoleWhereGroup extends WhereGroups {
    public RoleWhereGroup andCreateTimeIsNull() {
        addCriterion("create_time", EnumOperator.IS_NULL, null);
        return this;
    }

    public RoleWhereGroup andCreateTimeIsNotNull() {
        addCriterion("create_time", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public RoleWhereGroup andCreateTimeEqualTo(Instant value) {
        addCriterion("create_time", EnumOperator.EQUAL, value);
        return this;
    }


    public RoleWhereGroup andCreateTimeNotEqualTo(Instant value) {
        addCriterion("create_time", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public RoleWhereGroup andCreateTimeBetween(Instant value1, Instant value2) {
        addCriterion("create_time", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("create_time", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public RoleWhereGroup andCreateTimeNotBetween(Instant value1, Instant value2) {
        addCriterion("create_time", EnumOperator.LESS_THAN, value1);
        addCriterion("create_time", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public RoleWhereGroup andCreateTimeLikeTo(Instant value) {
        addCriterion("create_time", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public RoleWhereGroup andCreateTimeLikeTo(boolean prefix, Instant value) {
        addCriterion("create_time", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public RoleWhereGroup andCreateTimeLikeTo(Instant value, boolean suffix) {
        addCriterion("create_time", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public RoleWhereGroup andCreateTimeNotLikeTo(Instant value) {
        addCriterion("create_time", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public RoleWhereGroup andCreateTimeNotLikeTo(boolean prefix, Instant value) {
        addCriterion("create_time", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public RoleWhereGroup andCreateTimeNotLikeTo(Instant value, boolean suffix) {
        addCriterion("create_time", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public RoleWhereGroup andCreateTimeIn(List<Instant> list) {
        addCriterion("create_time", EnumOperator.IN, list);
        return this;
    }


    public RoleWhereGroup andCreateTimeNotIn(List<Instant> list) {
        addCriterion("create_time", EnumOperator.NOT_IN, list);
        return this;
    }

    public RoleWhereGroup andCreateUserIsNull() {
        addCriterion("createUser", EnumOperator.IS_NULL, null);
        return this;
    }

    public RoleWhereGroup andCreateUserIsNotNull() {
        addCriterion("createUser", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public RoleWhereGroup andCreateUserEqualTo(Long value) {
        addCriterion("createUser", EnumOperator.EQUAL, value);
        return this;
    }


    public RoleWhereGroup andCreateUserNotEqualTo(Long value) {
        addCriterion("createUser", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public RoleWhereGroup andCreateUserBetween(Long value1, Long value2) {
        addCriterion("createUser", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("createUser", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public RoleWhereGroup andCreateUserNotBetween(Long value1, Long value2) {
        addCriterion("createUser", EnumOperator.LESS_THAN, value1);
        addCriterion("createUser", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public RoleWhereGroup andCreateUserLikeTo(Long value) {
        addCriterion("createUser", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public RoleWhereGroup andCreateUserLikeTo(boolean prefix, Long value) {
        addCriterion("createUser", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public RoleWhereGroup andCreateUserLikeTo(Long value, boolean suffix) {
        addCriterion("createUser", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public RoleWhereGroup andCreateUserNotLikeTo(Long value) {
        addCriterion("createUser", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public RoleWhereGroup andCreateUserNotLikeTo(boolean prefix, Long value) {
        addCriterion("createUser", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public RoleWhereGroup andCreateUserNotLikeTo(Long value, boolean suffix) {
        addCriterion("createUser", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public RoleWhereGroup andCreateUserIn(List<Long> list) {
        addCriterion("createUser", EnumOperator.IN, list);
        return this;
    }


    public RoleWhereGroup andCreateUserNotIn(List<Long> list) {
        addCriterion("createUser", EnumOperator.NOT_IN, list);
        return this;
    }

    public RoleWhereGroup andDeletedIsNull() {
        addCriterion("deleted", EnumOperator.IS_NULL, null);
        return this;
    }

    public RoleWhereGroup andDeletedIsNotNull() {
        addCriterion("deleted", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public RoleWhereGroup andDeletedEqualTo(Boolean value) {
        addCriterion("deleted", EnumOperator.EQUAL, value);
        return this;
    }


    public RoleWhereGroup andDeletedNotEqualTo(Boolean value) {
        addCriterion("deleted", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public RoleWhereGroup andDeletedBetween(Boolean value1, Boolean value2) {
        addCriterion("deleted", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("deleted", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public RoleWhereGroup andDeletedNotBetween(Boolean value1, Boolean value2) {
        addCriterion("deleted", EnumOperator.LESS_THAN, value1);
        addCriterion("deleted", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public RoleWhereGroup andDeletedLikeTo(Boolean value) {
        addCriterion("deleted", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public RoleWhereGroup andDeletedLikeTo(boolean prefix, Boolean value) {
        addCriterion("deleted", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public RoleWhereGroup andDeletedLikeTo(Boolean value, boolean suffix) {
        addCriterion("deleted", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public RoleWhereGroup andDeletedNotLikeTo(Boolean value) {
        addCriterion("deleted", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public RoleWhereGroup andDeletedNotLikeTo(boolean prefix, Boolean value) {
        addCriterion("deleted", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public RoleWhereGroup andDeletedNotLikeTo(Boolean value, boolean suffix) {
        addCriterion("deleted", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public RoleWhereGroup andDeletedIn(List<Boolean> list) {
        addCriterion("deleted", EnumOperator.IN, list);
        return this;
    }


    public RoleWhereGroup andDeletedNotIn(List<Boolean> list) {
        addCriterion("deleted", EnumOperator.NOT_IN, list);
        return this;
    }

    public RoleWhereGroup andEnabledIsNull() {
        addCriterion("enabled", EnumOperator.IS_NULL, null);
        return this;
    }

    public RoleWhereGroup andEnabledIsNotNull() {
        addCriterion("enabled", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public RoleWhereGroup andEnabledEqualTo(Boolean value) {
        addCriterion("enabled", EnumOperator.EQUAL, value);
        return this;
    }


    public RoleWhereGroup andEnabledNotEqualTo(Boolean value) {
        addCriterion("enabled", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public RoleWhereGroup andEnabledBetween(Boolean value1, Boolean value2) {
        addCriterion("enabled", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("enabled", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public RoleWhereGroup andEnabledNotBetween(Boolean value1, Boolean value2) {
        addCriterion("enabled", EnumOperator.LESS_THAN, value1);
        addCriterion("enabled", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public RoleWhereGroup andEnabledLikeTo(Boolean value) {
        addCriterion("enabled", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public RoleWhereGroup andEnabledLikeTo(boolean prefix, Boolean value) {
        addCriterion("enabled", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public RoleWhereGroup andEnabledLikeTo(Boolean value, boolean suffix) {
        addCriterion("enabled", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public RoleWhereGroup andEnabledNotLikeTo(Boolean value) {
        addCriterion("enabled", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public RoleWhereGroup andEnabledNotLikeTo(boolean prefix, Boolean value) {
        addCriterion("enabled", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public RoleWhereGroup andEnabledNotLikeTo(Boolean value, boolean suffix) {
        addCriterion("enabled", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public RoleWhereGroup andEnabledIn(List<Boolean> list) {
        addCriterion("enabled", EnumOperator.IN, list);
        return this;
    }


    public RoleWhereGroup andEnabledNotIn(List<Boolean> list) {
        addCriterion("enabled", EnumOperator.NOT_IN, list);
        return this;
    }

    public RoleWhereGroup andIdIsNull() {
        addCriterion("id", EnumOperator.IS_NULL, null);
        return this;
    }

    public RoleWhereGroup andIdIsNotNull() {
        addCriterion("id", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public RoleWhereGroup andIdEqualTo(Long value) {
        addCriterion("id", EnumOperator.EQUAL, value);
        return this;
    }


    public RoleWhereGroup andIdNotEqualTo(Long value) {
        addCriterion("id", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public RoleWhereGroup andIdBetween(Long value1, Long value2) {
        addCriterion("id", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("id", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public RoleWhereGroup andIdNotBetween(Long value1, Long value2) {
        addCriterion("id", EnumOperator.LESS_THAN, value1);
        addCriterion("id", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public RoleWhereGroup andIdLikeTo(Long value) {
        addCriterion("id", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public RoleWhereGroup andIdLikeTo(boolean prefix, Long value) {
        addCriterion("id", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public RoleWhereGroup andIdLikeTo(Long value, boolean suffix) {
        addCriterion("id", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public RoleWhereGroup andIdNotLikeTo(Long value) {
        addCriterion("id", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public RoleWhereGroup andIdNotLikeTo(boolean prefix, Long value) {
        addCriterion("id", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public RoleWhereGroup andIdNotLikeTo(Long value, boolean suffix) {
        addCriterion("id", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public RoleWhereGroup andIdIn(List<Long> list) {
        addCriterion("id", EnumOperator.IN, list);
        return this;
    }


    public RoleWhereGroup andIdNotIn(List<Long> list) {
        addCriterion("id", EnumOperator.NOT_IN, list);
        return this;
    }

    public RoleWhereGroup andNameIsNull() {
        addCriterion("name", EnumOperator.IS_NULL, null);
        return this;
    }

    public RoleWhereGroup andNameIsNotNull() {
        addCriterion("name", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public RoleWhereGroup andNameEqualTo(String value) {
        addCriterion("name", EnumOperator.EQUAL, value);
        return this;
    }


    public RoleWhereGroup andNameNotEqualTo(String value) {
        addCriterion("name", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public RoleWhereGroup andNameBetween(String value1, String value2) {
        addCriterion("name", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("name", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public RoleWhereGroup andNameNotBetween(String value1, String value2) {
        addCriterion("name", EnumOperator.LESS_THAN, value1);
        addCriterion("name", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public RoleWhereGroup andNameLikeTo(String value) {
        addCriterion("name", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public RoleWhereGroup andNameLikeTo(boolean prefix, String value) {
        addCriterion("name", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public RoleWhereGroup andNameLikeTo(String value, boolean suffix) {
        addCriterion("name", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public RoleWhereGroup andNameNotLikeTo(String value) {
        addCriterion("name", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public RoleWhereGroup andNameNotLikeTo(boolean prefix, String value) {
        addCriterion("name", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public RoleWhereGroup andNameNotLikeTo(String value, boolean suffix) {
        addCriterion("name", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public RoleWhereGroup andNameIn(List<String> list) {
        addCriterion("name", EnumOperator.IN, list);
        return this;
    }


    public RoleWhereGroup andNameNotIn(List<String> list) {
        addCriterion("name", EnumOperator.NOT_IN, list);
        return this;
    }

    public RoleWhereGroup andDescriptionIsNull() {
        addCriterion("description", EnumOperator.IS_NULL, null);
        return this;
    }

    public RoleWhereGroup andDescriptionIsNotNull() {
        addCriterion("description", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public RoleWhereGroup andDescriptionEqualTo(String value) {
        addCriterion("description", EnumOperator.EQUAL, value);
        return this;
    }


    public RoleWhereGroup andDescriptionNotEqualTo(String value) {
        addCriterion("description", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public RoleWhereGroup andDescriptionBetween(String value1, String value2) {
        addCriterion("description", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("description", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public RoleWhereGroup andDescriptionNotBetween(String value1, String value2) {
        addCriterion("description", EnumOperator.LESS_THAN, value1);
        addCriterion("description", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public RoleWhereGroup andDescriptionLikeTo(String value) {
        addCriterion("description", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public RoleWhereGroup andDescriptionLikeTo(boolean prefix, String value) {
        addCriterion("description", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public RoleWhereGroup andDescriptionLikeTo(String value, boolean suffix) {
        addCriterion("description", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public RoleWhereGroup andDescriptionNotLikeTo(String value) {
        addCriterion("description", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public RoleWhereGroup andDescriptionNotLikeTo(boolean prefix, String value) {
        addCriterion("description", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public RoleWhereGroup andDescriptionNotLikeTo(String value, boolean suffix) {
        addCriterion("description", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public RoleWhereGroup andDescriptionIn(List<String> list) {
        addCriterion("description", EnumOperator.IN, list);
        return this;
    }


    public RoleWhereGroup andDescriptionNotIn(List<String> list) {
        addCriterion("description", EnumOperator.NOT_IN, list);
        return this;
    }

    public RoleWhereGroup andUpdateTimeIsNull() {
        addCriterion("update_time", EnumOperator.IS_NULL, null);
        return this;
    }

    public RoleWhereGroup andUpdateTimeIsNotNull() {
        addCriterion("update_time", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public RoleWhereGroup andUpdateTimeEqualTo(Instant value) {
        addCriterion("update_time", EnumOperator.EQUAL, value);
        return this;
    }


    public RoleWhereGroup andUpdateTimeNotEqualTo(Instant value) {
        addCriterion("update_time", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public RoleWhereGroup andUpdateTimeBetween(Instant value1, Instant value2) {
        addCriterion("update_time", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("update_time", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public RoleWhereGroup andUpdateTimeNotBetween(Instant value1, Instant value2) {
        addCriterion("update_time", EnumOperator.LESS_THAN, value1);
        addCriterion("update_time", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public RoleWhereGroup andUpdateTimeLikeTo(Instant value) {
        addCriterion("update_time", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public RoleWhereGroup andUpdateTimeLikeTo(boolean prefix, Instant value) {
        addCriterion("update_time", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public RoleWhereGroup andUpdateTimeLikeTo(Instant value, boolean suffix) {
        addCriterion("update_time", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public RoleWhereGroup andUpdateTimeNotLikeTo(Instant value) {
        addCriterion("update_time", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public RoleWhereGroup andUpdateTimeNotLikeTo(boolean prefix, Instant value) {
        addCriterion("update_time", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public RoleWhereGroup andUpdateTimeNotLikeTo(Instant value, boolean suffix) {
        addCriterion("update_time", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public RoleWhereGroup andUpdateTimeIn(List<Instant> list) {
        addCriterion("update_time", EnumOperator.IN, list);
        return this;
    }


    public RoleWhereGroup andUpdateTimeNotIn(List<Instant> list) {
        addCriterion("update_time", EnumOperator.NOT_IN, list);
        return this;
    }

    public RoleWhereGroup andUpdateUserIsNull() {
        addCriterion("updateUser", EnumOperator.IS_NULL, null);
        return this;
    }

    public RoleWhereGroup andUpdateUserIsNotNull() {
        addCriterion("updateUser", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public RoleWhereGroup andUpdateUserEqualTo(Long value) {
        addCriterion("updateUser", EnumOperator.EQUAL, value);
        return this;
    }


    public RoleWhereGroup andUpdateUserNotEqualTo(Long value) {
        addCriterion("updateUser", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public RoleWhereGroup andUpdateUserBetween(Long value1, Long value2) {
        addCriterion("updateUser", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("updateUser", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public RoleWhereGroup andUpdateUserNotBetween(Long value1, Long value2) {
        addCriterion("updateUser", EnumOperator.LESS_THAN, value1);
        addCriterion("updateUser", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public RoleWhereGroup andUpdateUserLikeTo(Long value) {
        addCriterion("updateUser", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public RoleWhereGroup andUpdateUserLikeTo(boolean prefix, Long value) {
        addCriterion("updateUser", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public RoleWhereGroup andUpdateUserLikeTo(Long value, boolean suffix) {
        addCriterion("updateUser", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public RoleWhereGroup andUpdateUserNotLikeTo(Long value) {
        addCriterion("updateUser", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public RoleWhereGroup andUpdateUserNotLikeTo(boolean prefix, Long value) {
        addCriterion("updateUser", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public RoleWhereGroup andUpdateUserNotLikeTo(Long value, boolean suffix) {
        addCriterion("updateUser", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public RoleWhereGroup andUpdateUserIn(List<Long> list) {
        addCriterion("updateUser", EnumOperator.IN, list);
        return this;
    }


    public RoleWhereGroup andUpdateUserNotIn(List<Long> list) {
        addCriterion("updateUser", EnumOperator.NOT_IN, list);
        return this;
    }


}
