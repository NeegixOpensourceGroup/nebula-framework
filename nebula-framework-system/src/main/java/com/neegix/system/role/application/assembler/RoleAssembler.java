package com.neegix.system.role.application.assembler;

import com.neegix.system.role.application.dto.RoleDTO;
import com.neegix.system.role.application.dto.RoleMenuDTO;
import com.neegix.system.role.domain.entity.RoleEntity;
import com.neegix.system.role.interfaces.form.NewRoleForm;
import com.neegix.system.role.interfaces.form.QueryRoleForm;
import com.neegix.system.role.interfaces.form.UpdateRoleForm;
import com.neegix.system.role.interfaces.vo.PagePermissionVO;
import com.neegix.system.role.interfaces.vo.RoleVO;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

import java.util.List;

 /**
  * This file is auto-generated by nebula-framework-generator.
  * The auto-generation plugin was developed using IntelliJ IDEA Community Edition.
  * Thanks to JetBrains for their outstanding contributions to the developer community.
  * <p>
  * The code generated by this tool is owned by the user of the tool.
  * The tool itself is copyrighted by <a href="https://www.neegix.com">https://www.neegix.com</a>.
  *
  * @author <a href="https://www.neegix.com">https://www.neegix.com</a>
  * @version 1.0.0
  * @since 2024-11-25 11:32:40
  */

@Mapper
public interface RoleAssembler {
    RoleAssembler INSTANCE = Mappers.getMapper(RoleAssembler.class);

    @Mapping(target = "id", ignore = true)
    @Mapping(target = "createTime", ignore = true)
    @Mapping(target = "updateTime", ignore = true)
    @Mapping(target = "createUser", ignore = true)
    @Mapping(target = "updateUser", ignore = true)
    RoleEntity covertEntity(NewRoleForm newRoleForm);

    @Mapping(target = "createTime", ignore = true)
    @Mapping(target = "updateTime", ignore = true)
    @Mapping(target = "createUser", ignore = true)
    @Mapping(target = "updateUser", ignore = true)
    RoleEntity covertEntity(UpdateRoleForm updateRoleForm);

    @Mapping(target = "createTime", ignore = true)
    @Mapping(target = "updateTime", ignore = true)
    RoleDTO covertDTO(QueryRoleForm queryRoleForm);

    List<RoleVO> covertVO(List<RoleDTO> RoleDTOs);

    RoleVO covertVO(RoleDTO queryRoleDTO);

    List<PagePermissionVO> covertPagePermissionVO(List<RoleMenuDTO> roleMenuDTOS);
}