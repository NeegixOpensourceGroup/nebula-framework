
package com.neegix.system.role.interfaces.controller;

import com.neegix.base.PageVO;
import com.neegix.exception.BusinessRuntimeException;
import com.neegix.result.Result;
import com.neegix.system.role.application.assembler.RoleAssembler;
import com.neegix.system.role.application.cqrs.query.RoleQueryRepository;
import com.neegix.system.role.domain.entity.RoleEntity;
import com.neegix.system.role.interfaces.vo.RoleVO;
import com.neegix.system.role.application.service.RoleService;
import com.neegix.system.role.interfaces.form.NewRoleForm;
import com.neegix.system.role.interfaces.form.QueryRoleForm;
import com.neegix.system.role.interfaces.form.UpdateRoleForm;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.security.access.prepost.PreAuthorize;

import java.util.List;
import java.util.Optional;

 /**
  * This file is auto-generated by nebula-framework-generator.
  * The auto-generation plugin was developed using IntelliJ IDEA Community Edition.
  * Thanks to JetBrains for their outstanding contributions to the developer community.
  * <p>
  * The code generated by this tool is owned by the user of the tool.
  * The tool itself is copyrighted by <a href="https://www.neegix.com">https://www.neegix.com</a>.
  *
  * @author <a href="https://www.neegix.com">https://www.neegix.com</a>
  * @version 1.0.0
  * @since 2024-11-25 11:32:40
  */

@RestController
@RequestMapping("/api/v1/role")
public class RoleController {

    @Autowired
    private RoleQueryRepository roleQueryRepository;

    @Autowired
    private RoleService roleService;

    @PreAuthorize("hasAuthority('system:role:add')")
    @PostMapping
    public Result<Void> createRole(@RequestBody @Valid NewRoleForm roleForm){
        Void result = roleService.createRole(RoleAssembler.INSTANCE.covertEntity(roleForm));
        return Result.success("创建成功", result);
    }

    @PreAuthorize("hasAuthority('system:role:modify')")
    @PutMapping("/{id}")
    public Result<Void> updateRole(@PathVariable("id") Long id, @RequestBody @Valid UpdateRoleForm roleForm){
        RoleEntity roleEntity = RoleAssembler.INSTANCE.covertEntity(roleForm);
        roleEntity.setId(id);
        Void result = roleService.modifyRole(roleEntity);
        return Result.success("更新成功",result);
    }

    @PreAuthorize("hasAuthority('system:role:list')")
    @GetMapping("/{currentPage}/{pageSize}")
    public Result<PageVO<RoleVO>> getRoles(@PathVariable("currentPage") Integer currentPage, @PathVariable("pageSize") Integer pageSize, @ModelAttribute QueryRoleForm roleForm){
        if(roleForm == null) {
            roleForm = new QueryRoleForm();
        }
        PageVO<RoleVO> pageVO = roleQueryRepository.findPage(currentPage, pageSize, RoleAssembler.INSTANCE.covertDTO(roleForm));
        return Result.success("查询成功",pageVO);
    }

    @PreAuthorize("hasAuthority('system:role:get')")
    @GetMapping("/{id}")
    public Result<RoleVO> getRoleById(@PathVariable("id") Long id) {
        Optional<RoleVO> optional = roleQueryRepository.findById(id);
        return Result.success("获取成功", optional.orElseThrow(()-> new BusinessRuntimeException("查询结果不存在")));
    }

    @PreAuthorize("hasAuthority('system:role:remove')")
    @DeleteMapping
    public Result<Void> removeRole(@RequestBody List<Long> ids){
        return Result.success("删除成功", roleService.removeRole(ids));
    }
}