
package com.neegix.log.operationLog.interfaces.controller;

import com.neegix.base.PageVO;
import com.neegix.cqrs.command.UniversalCommandBus;
import com.neegix.cqrs.query.UniversalQueryBus;
import com.neegix.log.exceptionLog.application.service.query.GetExceptionLogDetailQuery;
import com.neegix.log.exceptionLog.interfaces.vo.ExceptionLogVO;
import com.neegix.log.operationLog.application.service.command.DeleteOperationLogCommand;
import com.neegix.log.operationLog.application.service.query.GetPageOperationLogQuery;
import com.neegix.log.operationLog.application.service.query.mapper.OperationLogQueryMapper;
import com.neegix.log.operationLog.interfaces.form.QueryOperationLogForm;
import com.neegix.log.operationLog.interfaces.vo.OperationLogVO;
import com.neegix.inferfaces.result.Result;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

 /**
  * This file is auto-generated by nebula-framework-generator.
  * The auto-generation plugin was developed using IntelliJ IDEA Community Edition.
  * Thanks to JetBrains for their outstanding contributions to the developer community.
  * <p>
  * The code generated by this tool is owned by the user of the tool.
  * The tool itself is copyrighted by <a href="https://www.neegix.com">https://www.neegix.com</a>.
  *
  * @author <a href="https://www.neegix.com">https://www.neegix.com</a>
  * @version 1.0.0
  * @since 2024-11-24 19:51:10
  */

@RestController
@RequestMapping("/api/v1/operationLog")
public class OperationLogController {
    @Autowired
    private UniversalCommandBus commandBus;

    @Autowired
    private UniversalQueryBus queryBus;

    @PreAuthorize("hasAuthority('log:operationLog:list')")
    @GetMapping("/{currentPage}/{pageSize}")
    public Result<PageVO<OperationLogVO>> getOperationLogs(@PathVariable("currentPage") Integer currentPage, @PathVariable("pageSize") Integer pageSize, @ModelAttribute QueryOperationLogForm operationLogForm){
        if(operationLogForm == null) {
            operationLogForm = new QueryOperationLogForm();
        }
        GetPageOperationLogQuery query = OperationLogQueryMapper.INSTANCE.covertToGetQuery(operationLogForm);
        query.setCurrentPage(currentPage);
        query.setPageSize(pageSize);
        PageVO<OperationLogVO> pageVO = queryBus.execute(query);
        return Result.success("查询成功",pageVO);
    }

    @PreAuthorize("hasAuthority('log:operationLog:get')")
    @GetMapping("/{id}")
    public Result<ExceptionLogVO> getOperationLogById(@PathVariable("id") Long id) {
        return Result.success("获取成功", queryBus.execute(new GetExceptionLogDetailQuery(id)));
    }

    @PreAuthorize("hasAuthority('log:operationLog:remove')")
    @DeleteMapping
    public Result<Void> removeOperationLog(@RequestBody List<Long> ids){
        return Result.success("删除成功", commandBus.execute(new DeleteOperationLogCommand(ids)));
    }
}