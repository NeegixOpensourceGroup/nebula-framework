package com.neegix.log.operationLog.infrastructure.repository.condition;

import com.neegix.application.query.EnumOperator;
import com.neegix.application.query.WhereGroups;
import java.time.Instant;
import java.time.LocalDate;
import java.util.List;

 /**
  * This file is auto-generated by nebula-framework-generator.
  * The auto-generation plugin was developed using IntelliJ IDEA Community Edition.
  * Thanks to JetBrains for their outstanding contributions to the developer community.
  * <p>
  * The code generated by this tool is owned by the user of the tool.
  * The tool itself is copyrighted by <a href="https://www.neegix.com">https://www.neegix.com</a>.
  *
  * @author <a href="https://www.neegix.com">https://www.neegix.com</a>
  * @version 1.0.0
  * @since 2024-11-24 19:51:10
  */

public class OperationLogWhereGroup extends WhereGroups {

    public OperationLogWhereGroup andCreateTimeIsNull() {
        addCriterion("create_time", EnumOperator.IS_NULL, null);
        return this;
    }

    public OperationLogWhereGroup andCreateTimeIsNotNull() {
        addCriterion("create_time", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public OperationLogWhereGroup andCreateTimeEqualTo(Instant value) {
        addCriterion("create_time", EnumOperator.EQUAL, value);
        return this;
    }


    public OperationLogWhereGroup andCreateTimeNotEqualTo(Instant value) {
        addCriterion("create_time", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public OperationLogWhereGroup andCreateTimeBetween(LocalDate value1, LocalDate value2) {
        addCriterion("create_time", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("create_time", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public OperationLogWhereGroup andCreateTimeNotBetween(LocalDate value1, LocalDate value2) {
        addCriterion("create_time", EnumOperator.LESS_THAN, value1);
        addCriterion("create_time", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public OperationLogWhereGroup andCreateTimeLikeTo(Instant value) {
        addCriterion("create_time", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public OperationLogWhereGroup andCreateTimeLikeTo(boolean prefix, Instant value) {
        addCriterion("create_time", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public OperationLogWhereGroup andCreateTimeLikeTo(Instant value, boolean suffix) {
        addCriterion("create_time", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public OperationLogWhereGroup andCreateTimeNotLikeTo(Instant value) {
        addCriterion("create_time", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public OperationLogWhereGroup andCreateTimeNotLikeTo(boolean prefix, Instant value) {
        addCriterion("create_time", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public OperationLogWhereGroup andCreateTimeNotLikeTo(Instant value, boolean suffix) {
        addCriterion("create_time", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public OperationLogWhereGroup andCreateTimeIn(List<Instant> list) {
        addCriterion("create_time", EnumOperator.IN, list);
        return this;
    }


    public OperationLogWhereGroup andCreateTimeNotIn(List<Instant> list) {
        addCriterion("create_time", EnumOperator.NOT_IN, list);
        return this;
    }

    public OperationLogWhereGroup andCreateUserIsNull() {
        addCriterion("create_user", EnumOperator.IS_NULL, null);
        return this;
    }

    public OperationLogWhereGroup andCreateUserIsNotNull() {
        addCriterion("create_user", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public OperationLogWhereGroup andCreateUserEqualTo(Long value) {
        addCriterion("create_user", EnumOperator.EQUAL, value);
        return this;
    }


    public OperationLogWhereGroup andCreateUserNotEqualTo(Long value) {
        addCriterion("create_user", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public OperationLogWhereGroup andCreateUserBetween(Long value1, Long value2) {
        addCriterion("create_user", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("create_user", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public OperationLogWhereGroup andCreateUserNotBetween(Long value1, Long value2) {
        addCriterion("create_user", EnumOperator.LESS_THAN, value1);
        addCriterion("create_user", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public OperationLogWhereGroup andCreateUserLikeTo(Long value) {
        addCriterion("create_user", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public OperationLogWhereGroup andCreateUserLikeTo(boolean prefix, Long value) {
        addCriterion("create_user", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public OperationLogWhereGroup andCreateUserLikeTo(Long value, boolean suffix) {
        addCriterion("create_user", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public OperationLogWhereGroup andCreateUserNotLikeTo(Long value) {
        addCriterion("create_user", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public OperationLogWhereGroup andCreateUserNotLikeTo(boolean prefix, Long value) {
        addCriterion("create_user", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public OperationLogWhereGroup andCreateUserNotLikeTo(Long value, boolean suffix) {
        addCriterion("create_user", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public OperationLogWhereGroup andCreateUserIn(List<Long> list) {
        addCriterion("create_user", EnumOperator.IN, list);
        return this;
    }


    public OperationLogWhereGroup andCreateUserNotIn(List<Long> list) {
        addCriterion("create_user", EnumOperator.NOT_IN, list);
        return this;
    }


    public OperationLogWhereGroup andDescriptionIsNull() {
        addCriterion("description", EnumOperator.IS_NULL, null);
        return this;
    }

    public OperationLogWhereGroup andDescriptionIsNotNull() {
        addCriterion("description", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public OperationLogWhereGroup andDescriptionEqualTo(String value) {
        addCriterion("description", EnumOperator.EQUAL, value);
        return this;
    }


    public OperationLogWhereGroup andDescriptionNotEqualTo(String value) {
        addCriterion("description", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public OperationLogWhereGroup andDescriptionBetween(String value1, String value2) {
        addCriterion("description", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("description", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public OperationLogWhereGroup andDescriptionNotBetween(String value1, String value2) {
        addCriterion("description", EnumOperator.LESS_THAN, value1);
        addCriterion("description", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public OperationLogWhereGroup andDescriptionLikeTo(String value) {
        addCriterion("description", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public OperationLogWhereGroup andDescriptionLikeTo(boolean prefix, String value) {
        addCriterion("description", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public OperationLogWhereGroup andDescriptionLikeTo(String value, boolean suffix) {
        addCriterion("description", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public OperationLogWhereGroup andDescriptionNotLikeTo(String value) {
        addCriterion("description", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public OperationLogWhereGroup andDescriptionNotLikeTo(boolean prefix, String value) {
        addCriterion("description", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public OperationLogWhereGroup andDescriptionNotLikeTo(String value, boolean suffix) {
        addCriterion("description", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public OperationLogWhereGroup andDescriptionIn(List<String> list) {
        addCriterion("description", EnumOperator.IN, list);
        return this;
    }


    public OperationLogWhereGroup andDescriptionNotIn(List<String> list) {
        addCriterion("description", EnumOperator.NOT_IN, list);
        return this;
    }


    public OperationLogWhereGroup andIdIsNull() {
        addCriterion("id", EnumOperator.IS_NULL, null);
        return this;
    }

    public OperationLogWhereGroup andIdIsNotNull() {
        addCriterion("id", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public OperationLogWhereGroup andIdEqualTo(Long value) {
        addCriterion("id", EnumOperator.EQUAL, value);
        return this;
    }


    public OperationLogWhereGroup andIdNotEqualTo(Long value) {
        addCriterion("id", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public OperationLogWhereGroup andIdBetween(Long value1, Long value2) {
        addCriterion("id", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("id", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public OperationLogWhereGroup andIdNotBetween(Long value1, Long value2) {
        addCriterion("id", EnumOperator.LESS_THAN, value1);
        addCriterion("id", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public OperationLogWhereGroup andIdLikeTo(Long value) {
        addCriterion("id", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public OperationLogWhereGroup andIdLikeTo(boolean prefix, Long value) {
        addCriterion("id", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public OperationLogWhereGroup andIdLikeTo(Long value, boolean suffix) {
        addCriterion("id", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public OperationLogWhereGroup andIdNotLikeTo(Long value) {
        addCriterion("id", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public OperationLogWhereGroup andIdNotLikeTo(boolean prefix, Long value) {
        addCriterion("id", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public OperationLogWhereGroup andIdNotLikeTo(Long value, boolean suffix) {
        addCriterion("id", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public OperationLogWhereGroup andIdIn(List<Long> list) {
        addCriterion("id", EnumOperator.IN, list);
        return this;
    }


    public OperationLogWhereGroup andIdNotIn(List<Long> list) {
        addCriterion("id", EnumOperator.NOT_IN, list);
        return this;
    }

    public OperationLogWhereGroup andModuleIsNull() {
        addCriterion("module", EnumOperator.IS_NULL, null);
        return this;
    }

    public OperationLogWhereGroup andModuleIsNotNull() {
        addCriterion("module", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public OperationLogWhereGroup andModuleEqualTo(String value) {
        addCriterion("module", EnumOperator.EQUAL, value);
        return this;
    }


    public OperationLogWhereGroup andModuleNotEqualTo(String value) {
        addCriterion("module", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public OperationLogWhereGroup andModuleBetween(String value1, String value2) {
        addCriterion("module", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("module", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public OperationLogWhereGroup andModuleNotBetween(String value1, String value2) {
        addCriterion("module", EnumOperator.LESS_THAN, value1);
        addCriterion("module", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public OperationLogWhereGroup andModuleLikeTo(String value) {
        addCriterion("module", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public OperationLogWhereGroup andModuleLikeTo(boolean prefix, String value) {
        addCriterion("module", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public OperationLogWhereGroup andModuleLikeTo(String value, boolean suffix) {
        addCriterion("module", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public OperationLogWhereGroup andModuleNotLikeTo(String value) {
        addCriterion("module", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public OperationLogWhereGroup andModuleNotLikeTo(boolean prefix, String value) {
        addCriterion("module", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public OperationLogWhereGroup andModuleNotLikeTo(String value, boolean suffix) {
        addCriterion("module", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public OperationLogWhereGroup andModuleIn(List<String> list) {
        addCriterion("module", EnumOperator.IN, list);
        return this;
    }


    public OperationLogWhereGroup andModuleNotIn(List<String> list) {
        addCriterion("module", EnumOperator.NOT_IN, list);
        return this;
    }

    public OperationLogWhereGroup andTypeIsNull() {
        addCriterion("type", EnumOperator.IS_NULL, null);
        return this;
    }

    public OperationLogWhereGroup andTypeIsNotNull() {
        addCriterion("type", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public OperationLogWhereGroup andTypeEqualTo(Integer value) {
        addCriterion("type", EnumOperator.EQUAL, value);
        return this;
    }


    public OperationLogWhereGroup andTypeNotEqualTo(Integer value) {
        addCriterion("type", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public OperationLogWhereGroup andTypeBetween(Integer value1, Integer value2) {
        addCriterion("type", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("type", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public OperationLogWhereGroup andTypeNotBetween(Integer value1, Integer value2) {
        addCriterion("type", EnumOperator.LESS_THAN, value1);
        addCriterion("type", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public OperationLogWhereGroup andTypeLikeTo(Integer value) {
        addCriterion("type", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public OperationLogWhereGroup andTypeLikeTo(boolean prefix, Integer value) {
        addCriterion("type", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public OperationLogWhereGroup andTypeLikeTo(Integer value, boolean suffix) {
        addCriterion("type", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public OperationLogWhereGroup andTypeNotLikeTo(Integer value) {
        addCriterion("type", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public OperationLogWhereGroup andTypeNotLikeTo(boolean prefix, Integer value) {
        addCriterion("type", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public OperationLogWhereGroup andTypeNotLikeTo(Integer value, boolean suffix) {
        addCriterion("type", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public OperationLogWhereGroup andTypeIn(List<Integer> list) {
        addCriterion("type", EnumOperator.IN, list);
        return this;
    }


    public OperationLogWhereGroup andTypeNotIn(List<Integer> list) {
        addCriterion("type", EnumOperator.NOT_IN, list);
        return this;
    }

    public OperationLogWhereGroup andUpdateTimeIsNull() {
        addCriterion("update_time", EnumOperator.IS_NULL, null);
        return this;
    }

    public OperationLogWhereGroup andUpdateTimeIsNotNull() {
        addCriterion("update_time", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public OperationLogWhereGroup andUpdateTimeEqualTo(Instant value) {
        addCriterion("update_time", EnumOperator.EQUAL, value);
        return this;
    }


    public OperationLogWhereGroup andUpdateTimeNotEqualTo(Instant value) {
        addCriterion("update_time", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public OperationLogWhereGroup andUpdateTimeBetween(LocalDate value1, LocalDate value2) {
        addCriterion("update_time", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("update_time", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public OperationLogWhereGroup andUpdateTimeNotBetween(LocalDate value1, LocalDate value2) {
        addCriterion("update_time", EnumOperator.LESS_THAN, value1);
        addCriterion("update_time", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public OperationLogWhereGroup andUpdateTimeLikeTo(Instant value) {
        addCriterion("update_time", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public OperationLogWhereGroup andUpdateTimeLikeTo(boolean prefix, Instant value) {
        addCriterion("update_time", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public OperationLogWhereGroup andUpdateTimeLikeTo(Instant value, boolean suffix) {
        addCriterion("update_time", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public OperationLogWhereGroup andUpdateTimeNotLikeTo(Instant value) {
        addCriterion("update_time", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public OperationLogWhereGroup andUpdateTimeNotLikeTo(boolean prefix, Instant value) {
        addCriterion("update_time", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public OperationLogWhereGroup andUpdateTimeNotLikeTo(Instant value, boolean suffix) {
        addCriterion("update_time", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public OperationLogWhereGroup andUpdateTimeIn(List<Instant> list) {
        addCriterion("update_time", EnumOperator.IN, list);
        return this;
    }


    public OperationLogWhereGroup andUpdateTimeNotIn(List<Instant> list) {
        addCriterion("update_time", EnumOperator.NOT_IN, list);
        return this;
    }

    public OperationLogWhereGroup andUpdateUserIsNull() {
        addCriterion("update_user", EnumOperator.IS_NULL, null);
        return this;
    }

    public OperationLogWhereGroup andUpdateUserIsNotNull() {
        addCriterion("update_user", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public OperationLogWhereGroup andUpdateUserEqualTo(Long value) {
        addCriterion("update_user", EnumOperator.EQUAL, value);
        return this;
    }


    public OperationLogWhereGroup andUpdateUserNotEqualTo(Long value) {
        addCriterion("update_user", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public OperationLogWhereGroup andUpdateUserBetween(Long value1, Long value2) {
        addCriterion("update_user", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("update_user", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public OperationLogWhereGroup andUpdateUserNotBetween(Long value1, Long value2) {
        addCriterion("update_user", EnumOperator.LESS_THAN, value1);
        addCriterion("update_user", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public OperationLogWhereGroup andUpdateUserLikeTo(Long value) {
        addCriterion("update_user", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public OperationLogWhereGroup andUpdateUserLikeTo(boolean prefix, Long value) {
        addCriterion("update_user", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public OperationLogWhereGroup andUpdateUserLikeTo(Long value, boolean suffix) {
        addCriterion("update_user", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public OperationLogWhereGroup andUpdateUserNotLikeTo(Long value) {
        addCriterion("update_user", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public OperationLogWhereGroup andUpdateUserNotLikeTo(boolean prefix, Long value) {
        addCriterion("update_user", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public OperationLogWhereGroup andUpdateUserNotLikeTo(Long value, boolean suffix) {
        addCriterion("update_user", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public OperationLogWhereGroup andUpdateUserIn(List<Long> list) {
        addCriterion("update_user", EnumOperator.IN, list);
        return this;
    }


    public OperationLogWhereGroup andUpdateUserNotIn(List<Long> list) {
        addCriterion("update_user", EnumOperator.NOT_IN, list);
        return this;
    }


}
