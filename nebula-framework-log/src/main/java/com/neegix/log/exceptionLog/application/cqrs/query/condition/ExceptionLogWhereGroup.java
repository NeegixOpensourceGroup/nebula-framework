package com.neegix.log.exceptionLog.application.cqrs.query.condition;

import com.neegix.application.query.EnumOperator;
import com.neegix.application.query.WhereGroups;
import java.time.Instant;
import java.util.List;

 /**
  * This file is auto-generated by nebula-framework-generator.
  * The auto-generation plugin was developed using IntelliJ IDEA Community Edition.
  * Thanks to JetBrains for their outstanding contributions to the developer community.
  * <p>
  * The code generated by this tool is owned by the user of the tool.
  * The tool itself is copyrighted by <a href="https://www.neegix.com">https://www.neegix.com</a>.
  *
  * @author <a href="https://www.neegix.com">https://www.neegix.com</a>
  * @version 1.0.0
  * @since 2024-12-19 15:04:54
  */

public class ExceptionLogWhereGroup extends WhereGroups {
    public ExceptionLogWhereGroup andIdIsNull() {
        addCriterion("id", EnumOperator.IS_NULL, null);
        return this;
    }

    public ExceptionLogWhereGroup andIdIsNotNull() {
        addCriterion("id", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public ExceptionLogWhereGroup andIdEqualTo(Long value) {
        addCriterion("id", EnumOperator.EQUAL, value);
        return this;
    }


    public ExceptionLogWhereGroup andIdNotEqualTo(Long value) {
        addCriterion("id", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public ExceptionLogWhereGroup andIdBetween(Long value1, Long value2) {
        addCriterion("id", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("id", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public ExceptionLogWhereGroup andIdNotBetween(Long value1, Long value2) {
        addCriterion("id", EnumOperator.LESS_THAN, value1);
        addCriterion("id", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public ExceptionLogWhereGroup andIdLikeTo(Long value) {
        addCriterion("id", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public ExceptionLogWhereGroup andIdLikeTo(boolean prefix, Long value) {
        addCriterion("id", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public ExceptionLogWhereGroup andIdLikeTo(Long value, boolean suffix) {
        addCriterion("id", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public ExceptionLogWhereGroup andIdNotLikeTo(Long value) {
        addCriterion("id", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public ExceptionLogWhereGroup andIdNotLikeTo(boolean prefix, Long value) {
        addCriterion("id", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public ExceptionLogWhereGroup andIdNotLikeTo(Long value, boolean suffix) {
        addCriterion("id", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public ExceptionLogWhereGroup andIdIn(List<Long> list) {
        addCriterion("id", EnumOperator.IN, list);
        return this;
    }


    public ExceptionLogWhereGroup andIdNotIn(List<Long> list) {
        addCriterion("id", EnumOperator.NOT_IN, list);
        return this;
    }

    public ExceptionLogWhereGroup andCreateTimeIsNull() {
        addCriterion("create_time", EnumOperator.IS_NULL, null);
        return this;
    }

    public ExceptionLogWhereGroup andCreateTimeIsNotNull() {
        addCriterion("create_time", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public ExceptionLogWhereGroup andCreateTimeEqualTo(Instant value) {
        addCriterion("create_time", EnumOperator.EQUAL, value);
        return this;
    }


    public ExceptionLogWhereGroup andCreateTimeNotEqualTo(Instant value) {
        addCriterion("create_time", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public ExceptionLogWhereGroup andCreateTimeBetween(Instant value1, Instant value2) {
        addCriterion("create_time", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("create_time", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public ExceptionLogWhereGroup andCreateTimeNotBetween(Instant value1, Instant value2) {
        addCriterion("create_time", EnumOperator.LESS_THAN, value1);
        addCriterion("create_time", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public ExceptionLogWhereGroup andCreateTimeLikeTo(Instant value) {
        addCriterion("create_time", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public ExceptionLogWhereGroup andCreateTimeLikeTo(boolean prefix, Instant value) {
        addCriterion("create_time", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public ExceptionLogWhereGroup andCreateTimeLikeTo(Instant value, boolean suffix) {
        addCriterion("create_time", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public ExceptionLogWhereGroup andCreateTimeNotLikeTo(Instant value) {
        addCriterion("create_time", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public ExceptionLogWhereGroup andCreateTimeNotLikeTo(boolean prefix, Instant value) {
        addCriterion("create_time", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public ExceptionLogWhereGroup andCreateTimeNotLikeTo(Instant value, boolean suffix) {
        addCriterion("create_time", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public ExceptionLogWhereGroup andCreateTimeIn(List<Instant> list) {
        addCriterion("create_time", EnumOperator.IN, list);
        return this;
    }


    public ExceptionLogWhereGroup andCreateTimeNotIn(List<Instant> list) {
        addCriterion("create_time", EnumOperator.NOT_IN, list);
        return this;
    }

    public ExceptionLogWhereGroup andUpdateTimeIsNull() {
        addCriterion("update_time", EnumOperator.IS_NULL, null);
        return this;
    }

    public ExceptionLogWhereGroup andUpdateTimeIsNotNull() {
        addCriterion("update_time", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public ExceptionLogWhereGroup andUpdateTimeEqualTo(Instant value) {
        addCriterion("update_time", EnumOperator.EQUAL, value);
        return this;
    }


    public ExceptionLogWhereGroup andUpdateTimeNotEqualTo(Instant value) {
        addCriterion("update_time", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public ExceptionLogWhereGroup andUpdateTimeBetween(Instant value1, Instant value2) {
        addCriterion("update_time", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("update_time", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public ExceptionLogWhereGroup andUpdateTimeNotBetween(Instant value1, Instant value2) {
        addCriterion("update_time", EnumOperator.LESS_THAN, value1);
        addCriterion("update_time", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public ExceptionLogWhereGroup andUpdateTimeLikeTo(Instant value) {
        addCriterion("update_time", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public ExceptionLogWhereGroup andUpdateTimeLikeTo(boolean prefix, Instant value) {
        addCriterion("update_time", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public ExceptionLogWhereGroup andUpdateTimeLikeTo(Instant value, boolean suffix) {
        addCriterion("update_time", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public ExceptionLogWhereGroup andUpdateTimeNotLikeTo(Instant value) {
        addCriterion("update_time", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public ExceptionLogWhereGroup andUpdateTimeNotLikeTo(boolean prefix, Instant value) {
        addCriterion("update_time", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public ExceptionLogWhereGroup andUpdateTimeNotLikeTo(Instant value, boolean suffix) {
        addCriterion("update_time", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public ExceptionLogWhereGroup andUpdateTimeIn(List<Instant> list) {
        addCriterion("update_time", EnumOperator.IN, list);
        return this;
    }


    public ExceptionLogWhereGroup andUpdateTimeNotIn(List<Instant> list) {
        addCriterion("update_time", EnumOperator.NOT_IN, list);
        return this;
    }

    public ExceptionLogWhereGroup andCreateUserIsNull() {
        addCriterion("create_user", EnumOperator.IS_NULL, null);
        return this;
    }

    public ExceptionLogWhereGroup andCreateUserIsNotNull() {
        addCriterion("create_user", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public ExceptionLogWhereGroup andCreateUserEqualTo(Long value) {
        addCriterion("create_user", EnumOperator.EQUAL, value);
        return this;
    }


    public ExceptionLogWhereGroup andCreateUserNotEqualTo(Long value) {
        addCriterion("create_user", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public ExceptionLogWhereGroup andCreateUserBetween(Long value1, Long value2) {
        addCriterion("create_user", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("create_user", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public ExceptionLogWhereGroup andCreateUserNotBetween(Long value1, Long value2) {
        addCriterion("create_user", EnumOperator.LESS_THAN, value1);
        addCriterion("create_user", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public ExceptionLogWhereGroup andCreateUserLikeTo(Long value) {
        addCriterion("create_user", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public ExceptionLogWhereGroup andCreateUserLikeTo(boolean prefix, Long value) {
        addCriterion("create_user", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public ExceptionLogWhereGroup andCreateUserLikeTo(Long value, boolean suffix) {
        addCriterion("create_user", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public ExceptionLogWhereGroup andCreateUserNotLikeTo(Long value) {
        addCriterion("create_user", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public ExceptionLogWhereGroup andCreateUserNotLikeTo(boolean prefix, Long value) {
        addCriterion("create_user", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public ExceptionLogWhereGroup andCreateUserNotLikeTo(Long value, boolean suffix) {
        addCriterion("create_user", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public ExceptionLogWhereGroup andCreateUserIn(List<Long> list) {
        addCriterion("create_user", EnumOperator.IN, list);
        return this;
    }


    public ExceptionLogWhereGroup andCreateUserNotIn(List<Long> list) {
        addCriterion("create_user", EnumOperator.NOT_IN, list);
        return this;
    }

    public ExceptionLogWhereGroup andUpdateUserIsNull() {
        addCriterion("update_user", EnumOperator.IS_NULL, null);
        return this;
    }

    public ExceptionLogWhereGroup andUpdateUserIsNotNull() {
        addCriterion("update_user", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public ExceptionLogWhereGroup andUpdateUserEqualTo(Long value) {
        addCriterion("update_user", EnumOperator.EQUAL, value);
        return this;
    }


    public ExceptionLogWhereGroup andUpdateUserNotEqualTo(Long value) {
        addCriterion("update_user", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public ExceptionLogWhereGroup andUpdateUserBetween(Long value1, Long value2) {
        addCriterion("update_user", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("update_user", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public ExceptionLogWhereGroup andUpdateUserNotBetween(Long value1, Long value2) {
        addCriterion("update_user", EnumOperator.LESS_THAN, value1);
        addCriterion("update_user", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public ExceptionLogWhereGroup andUpdateUserLikeTo(Long value) {
        addCriterion("update_user", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public ExceptionLogWhereGroup andUpdateUserLikeTo(boolean prefix, Long value) {
        addCriterion("update_user", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public ExceptionLogWhereGroup andUpdateUserLikeTo(Long value, boolean suffix) {
        addCriterion("update_user", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public ExceptionLogWhereGroup andUpdateUserNotLikeTo(Long value) {
        addCriterion("update_user", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public ExceptionLogWhereGroup andUpdateUserNotLikeTo(boolean prefix, Long value) {
        addCriterion("update_user", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public ExceptionLogWhereGroup andUpdateUserNotLikeTo(Long value, boolean suffix) {
        addCriterion("update_user", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public ExceptionLogWhereGroup andUpdateUserIn(List<Long> list) {
        addCriterion("update_user", EnumOperator.IN, list);
        return this;
    }


    public ExceptionLogWhereGroup andUpdateUserNotIn(List<Long> list) {
        addCriterion("update_user", EnumOperator.NOT_IN, list);
        return this;
    }

    public ExceptionLogWhereGroup andUserIsNull() {
        addCriterion("user", EnumOperator.IS_NULL, null);
        return this;
    }

    public ExceptionLogWhereGroup andUserIsNotNull() {
        addCriterion("user", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public ExceptionLogWhereGroup andUserEqualTo(String value) {
        addCriterion("user", EnumOperator.EQUAL, value);
        return this;
    }


    public ExceptionLogWhereGroup andUserNotEqualTo(String value) {
        addCriterion("user", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public ExceptionLogWhereGroup andUserBetween(String value1, String value2) {
        addCriterion("user", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("user", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public ExceptionLogWhereGroup andUserNotBetween(String value1, String value2) {
        addCriterion("user", EnumOperator.LESS_THAN, value1);
        addCriterion("user", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public ExceptionLogWhereGroup andUserLikeTo(String value) {
        addCriterion("user", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public ExceptionLogWhereGroup andUserLikeTo(boolean prefix, String value) {
        addCriterion("user", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public ExceptionLogWhereGroup andUserLikeTo(String value, boolean suffix) {
        addCriterion("user", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public ExceptionLogWhereGroup andUserNotLikeTo(String value) {
        addCriterion("user", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public ExceptionLogWhereGroup andUserNotLikeTo(boolean prefix, String value) {
        addCriterion("user", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public ExceptionLogWhereGroup andUserNotLikeTo(String value, boolean suffix) {
        addCriterion("user", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public ExceptionLogWhereGroup andUserIn(List<String> list) {
        addCriterion("user", EnumOperator.IN, list);
        return this;
    }


    public ExceptionLogWhereGroup andUserNotIn(List<String> list) {
        addCriterion("user", EnumOperator.NOT_IN, list);
        return this;
    }

    public ExceptionLogWhereGroup andModuleIsNull() {
        addCriterion("module", EnumOperator.IS_NULL, null);
        return this;
    }

    public ExceptionLogWhereGroup andModuleIsNotNull() {
        addCriterion("module", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public ExceptionLogWhereGroup andModuleEqualTo(String value) {
        addCriterion("module", EnumOperator.EQUAL, value);
        return this;
    }


    public ExceptionLogWhereGroup andModuleNotEqualTo(String value) {
        addCriterion("module", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public ExceptionLogWhereGroup andModuleBetween(String value1, String value2) {
        addCriterion("module", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("module", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public ExceptionLogWhereGroup andModuleNotBetween(String value1, String value2) {
        addCriterion("module", EnumOperator.LESS_THAN, value1);
        addCriterion("module", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public ExceptionLogWhereGroup andModuleLikeTo(String value) {
        addCriterion("module", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public ExceptionLogWhereGroup andModuleLikeTo(boolean prefix, String value) {
        addCriterion("module", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public ExceptionLogWhereGroup andModuleLikeTo(String value, boolean suffix) {
        addCriterion("module", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public ExceptionLogWhereGroup andModuleNotLikeTo(String value) {
        addCriterion("module", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public ExceptionLogWhereGroup andModuleNotLikeTo(boolean prefix, String value) {
        addCriterion("module", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public ExceptionLogWhereGroup andModuleNotLikeTo(String value, boolean suffix) {
        addCriterion("module", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public ExceptionLogWhereGroup andModuleIn(List<String> list) {
        addCriterion("module", EnumOperator.IN, list);
        return this;
    }


    public ExceptionLogWhereGroup andModuleNotIn(List<String> list) {
        addCriterion("module", EnumOperator.NOT_IN, list);
        return this;
    }

    public ExceptionLogWhereGroup andTypeIsNull() {
        addCriterion("type", EnumOperator.IS_NULL, null);
        return this;
    }

    public ExceptionLogWhereGroup andTypeIsNotNull() {
        addCriterion("type", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public ExceptionLogWhereGroup andTypeEqualTo(Integer value) {
        addCriterion("type", EnumOperator.EQUAL, value);
        return this;
    }


    public ExceptionLogWhereGroup andTypeNotEqualTo(Integer value) {
        addCriterion("type", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public ExceptionLogWhereGroup andTypeBetween(Integer value1, Integer value2) {
        addCriterion("type", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("type", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public ExceptionLogWhereGroup andTypeNotBetween(Integer value1, Integer value2) {
        addCriterion("type", EnumOperator.LESS_THAN, value1);
        addCriterion("type", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public ExceptionLogWhereGroup andTypeLikeTo(Integer value) {
        addCriterion("type", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public ExceptionLogWhereGroup andTypeLikeTo(boolean prefix, Integer value) {
        addCriterion("type", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public ExceptionLogWhereGroup andTypeLikeTo(Integer value, boolean suffix) {
        addCriterion("type", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public ExceptionLogWhereGroup andTypeNotLikeTo(Integer value) {
        addCriterion("type", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public ExceptionLogWhereGroup andTypeNotLikeTo(boolean prefix, Integer value) {
        addCriterion("type", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public ExceptionLogWhereGroup andTypeNotLikeTo(Integer value, boolean suffix) {
        addCriterion("type", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public ExceptionLogWhereGroup andTypeIn(List<Integer> list) {
        addCriterion("type", EnumOperator.IN, list);
        return this;
    }


    public ExceptionLogWhereGroup andTypeNotIn(List<Integer> list) {
        addCriterion("type", EnumOperator.NOT_IN, list);
        return this;
    }

    public ExceptionLogWhereGroup andDescriptionIsNull() {
        addCriterion("description", EnumOperator.IS_NULL, null);
        return this;
    }

    public ExceptionLogWhereGroup andDescriptionIsNotNull() {
        addCriterion("description", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public ExceptionLogWhereGroup andDescriptionEqualTo(String value) {
        addCriterion("description", EnumOperator.EQUAL, value);
        return this;
    }


    public ExceptionLogWhereGroup andDescriptionNotEqualTo(String value) {
        addCriterion("description", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public ExceptionLogWhereGroup andDescriptionBetween(String value1, String value2) {
        addCriterion("description", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("description", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public ExceptionLogWhereGroup andDescriptionNotBetween(String value1, String value2) {
        addCriterion("description", EnumOperator.LESS_THAN, value1);
        addCriterion("description", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public ExceptionLogWhereGroup andDescriptionLikeTo(String value) {
        addCriterion("description", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public ExceptionLogWhereGroup andDescriptionLikeTo(boolean prefix, String value) {
        addCriterion("description", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public ExceptionLogWhereGroup andDescriptionLikeTo(String value, boolean suffix) {
        addCriterion("description", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public ExceptionLogWhereGroup andDescriptionNotLikeTo(String value) {
        addCriterion("description", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public ExceptionLogWhereGroup andDescriptionNotLikeTo(boolean prefix, String value) {
        addCriterion("description", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public ExceptionLogWhereGroup andDescriptionNotLikeTo(String value, boolean suffix) {
        addCriterion("description", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public ExceptionLogWhereGroup andDescriptionIn(List<String> list) {
        addCriterion("description", EnumOperator.IN, list);
        return this;
    }


    public ExceptionLogWhereGroup andDescriptionNotIn(List<String> list) {
        addCriterion("description", EnumOperator.NOT_IN, list);
        return this;
    }

    public ExceptionLogWhereGroup andUriIsNull() {
        addCriterion("uri", EnumOperator.IS_NULL, null);
        return this;
    }

    public ExceptionLogWhereGroup andUriIsNotNull() {
        addCriterion("uri", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public ExceptionLogWhereGroup andUriEqualTo(String value) {
        addCriterion("uri", EnumOperator.EQUAL, value);
        return this;
    }


    public ExceptionLogWhereGroup andUriNotEqualTo(String value) {
        addCriterion("uri", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public ExceptionLogWhereGroup andUriBetween(String value1, String value2) {
        addCriterion("uri", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("uri", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public ExceptionLogWhereGroup andUriNotBetween(String value1, String value2) {
        addCriterion("uri", EnumOperator.LESS_THAN, value1);
        addCriterion("uri", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public ExceptionLogWhereGroup andUriLikeTo(String value) {
        addCriterion("uri", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public ExceptionLogWhereGroup andUriLikeTo(boolean prefix, String value) {
        addCriterion("uri", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public ExceptionLogWhereGroup andUriLikeTo(String value, boolean suffix) {
        addCriterion("uri", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public ExceptionLogWhereGroup andUriNotLikeTo(String value) {
        addCriterion("uri", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public ExceptionLogWhereGroup andUriNotLikeTo(boolean prefix, String value) {
        addCriterion("uri", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public ExceptionLogWhereGroup andUriNotLikeTo(String value, boolean suffix) {
        addCriterion("uri", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public ExceptionLogWhereGroup andUriIn(List<String> list) {
        addCriterion("uri", EnumOperator.IN, list);
        return this;
    }


    public ExceptionLogWhereGroup andUriNotIn(List<String> list) {
        addCriterion("uri", EnumOperator.NOT_IN, list);
        return this;
    }

    public ExceptionLogWhereGroup andFullNameIsNull() {
        addCriterion("full_name", EnumOperator.IS_NULL, null);
        return this;
    }

    public ExceptionLogWhereGroup andFullNameIsNotNull() {
        addCriterion("full_name", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public ExceptionLogWhereGroup andFullNameEqualTo(String value) {
        addCriterion("full_name", EnumOperator.EQUAL, value);
        return this;
    }


    public ExceptionLogWhereGroup andFullNameNotEqualTo(String value) {
        addCriterion("full_name", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public ExceptionLogWhereGroup andFullNameBetween(String value1, String value2) {
        addCriterion("full_name", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("full_name", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public ExceptionLogWhereGroup andFullNameNotBetween(String value1, String value2) {
        addCriterion("full_name", EnumOperator.LESS_THAN, value1);
        addCriterion("full_name", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public ExceptionLogWhereGroup andFullNameLikeTo(String value) {
        addCriterion("full_name", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public ExceptionLogWhereGroup andFullNameLikeTo(boolean prefix, String value) {
        addCriterion("full_name", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public ExceptionLogWhereGroup andFullNameLikeTo(String value, boolean suffix) {
        addCriterion("full_name", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public ExceptionLogWhereGroup andFullNameNotLikeTo(String value) {
        addCriterion("full_name", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public ExceptionLogWhereGroup andFullNameNotLikeTo(boolean prefix, String value) {
        addCriterion("full_name", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public ExceptionLogWhereGroup andFullNameNotLikeTo(String value, boolean suffix) {
        addCriterion("full_name", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public ExceptionLogWhereGroup andFullNameIn(List<String> list) {
        addCriterion("full_name", EnumOperator.IN, list);
        return this;
    }


    public ExceptionLogWhereGroup andFullNameNotIn(List<String> list) {
        addCriterion("full_name", EnumOperator.NOT_IN, list);
        return this;
    }

    public ExceptionLogWhereGroup andExceptionIsNull() {
        addCriterion("exception", EnumOperator.IS_NULL, null);
        return this;
    }

    public ExceptionLogWhereGroup andExceptionIsNotNull() {
        addCriterion("exception", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public ExceptionLogWhereGroup andExceptionEqualTo(String value) {
        addCriterion("exception", EnumOperator.EQUAL, value);
        return this;
    }


    public ExceptionLogWhereGroup andExceptionNotEqualTo(String value) {
        addCriterion("exception", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public ExceptionLogWhereGroup andExceptionBetween(String value1, String value2) {
        addCriterion("exception", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("exception", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public ExceptionLogWhereGroup andExceptionNotBetween(String value1, String value2) {
        addCriterion("exception", EnumOperator.LESS_THAN, value1);
        addCriterion("exception", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public ExceptionLogWhereGroup andExceptionLikeTo(String value) {
        addCriterion("exception", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public ExceptionLogWhereGroup andExceptionLikeTo(boolean prefix, String value) {
        addCriterion("exception", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public ExceptionLogWhereGroup andExceptionLikeTo(String value, boolean suffix) {
        addCriterion("exception", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public ExceptionLogWhereGroup andExceptionNotLikeTo(String value) {
        addCriterion("exception", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public ExceptionLogWhereGroup andExceptionNotLikeTo(boolean prefix, String value) {
        addCriterion("exception", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public ExceptionLogWhereGroup andExceptionNotLikeTo(String value, boolean suffix) {
        addCriterion("exception", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public ExceptionLogWhereGroup andExceptionIn(List<String> list) {
        addCriterion("exception", EnumOperator.IN, list);
        return this;
    }


    public ExceptionLogWhereGroup andExceptionNotIn(List<String> list) {
        addCriterion("exception", EnumOperator.NOT_IN, list);
        return this;
    }


}
