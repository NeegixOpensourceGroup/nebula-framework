package com.neegix.log.loginLog.infrastructure.repository.impl;

import com.neegix.application.query.NebulaSQL;
import com.neegix.base.PageVO;
import com.neegix.log.loginLog.application.assembler.LoginLogAssembler;
import com.neegix.log.loginLog.application.cqrs.query.LoginLogQueryRepository;
import com.neegix.log.loginLog.application.cqrs.query.condition.LoginLogWhereGroup;
import com.neegix.log.loginLog.application.dto.LoginLogDTO;
import com.neegix.log.loginLog.interfaces.vo.LoginLogVO;
import com.neegix.log.loginLog.infrastructure.repository.convert.LoginLogConverter;
import com.neegix.log.loginLog.infrastructure.repository.dataobject.LoginLogDO;
import com.neegix.log.loginLog.infrastructure.repository.mapper.LoginLogMapper;
import com.neegix.log.loginLog.infrastructure.repository.mapper.customized.LoginLogCustomizedMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

 /**
  * This file is auto-generated by nebula-framework-generator.
  * The auto-generation plugin was developed using IntelliJ IDEA Community Edition.
  * Thanks to JetBrains for their outstanding contributions to the developer community.
  * <p>
  * The code generated by this tool is owned by the user of the tool.
  * The tool itself is copyrighted by <a href="https://www.neegix.com">https://www.neegix.com</a>.
  *
  * @author <a href="https://www.neegix.com">https://www.neegix.com</a>
  * @version 1.0.0
  * @since 2024-12-19 15:39:21
  */

@Repository
public class LoginLogQueryRepositoryImpl implements LoginLogQueryRepository {

    @Autowired
    private LoginLogMapper loginLogMapper;

    @Autowired
    private LoginLogCustomizedMapper loginLogCustomizedMapper;

    @Override
    public Optional<LoginLogVO> findById(Long id) {
        LoginLogDO loginLogDO = loginLogMapper.selectByPrimaryKey(id);
        return Optional.ofNullable(LoginLogAssembler.INSTANCE.covertVO(LoginLogConverter.INSTANCE.covertDTO(loginLogDO)));
    }

    @Override
    public Integer selectCount(List<Long> ids) {
        return loginLogCustomizedMapper.selectCountByIds(ids);
    }

    @Override
    public PageVO<LoginLogVO> findPage(Integer currentPage, Integer pageSize, LoginLogDTO loginLogDTO) {
        NebulaSQL nebulaSQL = new NebulaSQL();
        nebulaSQL.createWhereGroups(LoginLogWhereGroup.class)
           .andIdEqualTo(loginLogDTO.getId())
           .andCreateTimeBetween(loginLogDTO.getStartCreateTime(),loginLogDTO.getEndCreateTime())
           .andUpdateTimeBetween(loginLogDTO.getStartUpdateTime(),loginLogDTO.getEndUpdateTime())
           .andCreateUserEqualTo(loginLogDTO.getCreateUser())
           .andUpdateUserEqualTo(loginLogDTO.getUpdateUser())
           .andIpLikeTo(loginLogDTO.getIp())
           .andAreaLikeTo(loginLogDTO.getArea())
           .andTypeEqualTo(loginLogDTO.getType())
           .andClientLikeTo(loginLogDTO.getClient())
           .andEnabledEqualTo(loginLogDTO.getEnabled())
           .andDeletedEqualTo(loginLogDTO.getDeleted());
           
        nebulaSQL.setPager(currentPage, pageSize);
        List<LoginLogDO> result = loginLogMapper.selectList(nebulaSQL);
        Long total = loginLogMapper.selectCount(nebulaSQL);
        PageVO<LoginLogVO> page = new PageVO<>(currentPage, pageSize);
        page.setTotal(total);
        page.setResult(LoginLogAssembler.INSTANCE.covertVO(LoginLogConverter.INSTANCE.covertDTOS(result)));
        return page;
    }
}
