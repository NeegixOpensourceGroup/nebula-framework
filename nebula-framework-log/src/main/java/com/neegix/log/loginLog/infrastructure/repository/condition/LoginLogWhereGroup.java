package com.neegix.log.loginLog.infrastructure.repository.condition;

import com.neegix.application.query.EnumOperator;
import com.neegix.application.query.WhereGroups;
import java.time.Instant;
import java.time.LocalDate;
import java.util.List;

 /**
  * This file is auto-generated by nebula-framework-generator.
  * The auto-generation plugin was developed using IntelliJ IDEA Community Edition.
  * Thanks to JetBrains for their outstanding contributions to the developer community.
  * <p>
  * The code generated by this tool is owned by the user of the tool.
  * The tool itself is copyrighted by <a href="https://www.neegix.com">https://www.neegix.com</a>.
  *
  * @author <a href="https://www.neegix.com">https://www.neegix.com</a>
  * @version 1.0.0
  * @since 2024-12-19 15:39:21
  */

public class LoginLogWhereGroup extends WhereGroups {
    public LoginLogWhereGroup andIdIsNull() {
        addCriterion("id", EnumOperator.IS_NULL, null);
        return this;
    }

    public LoginLogWhereGroup andIdIsNotNull() {
        addCriterion("id", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public LoginLogWhereGroup andIdEqualTo(Long value) {
        addCriterion("id", EnumOperator.EQUAL, value);
        return this;
    }


    public LoginLogWhereGroup andIdNotEqualTo(Long value) {
        addCriterion("id", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public LoginLogWhereGroup andIdBetween(Long value1, Long value2) {
        addCriterion("id", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("id", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public LoginLogWhereGroup andIdNotBetween(Long value1, Long value2) {
        addCriterion("id", EnumOperator.LESS_THAN, value1);
        addCriterion("id", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public LoginLogWhereGroup andIdLikeTo(Long value) {
        addCriterion("id", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public LoginLogWhereGroup andIdLikeTo(boolean prefix, Long value) {
        addCriterion("id", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public LoginLogWhereGroup andIdLikeTo(Long value, boolean suffix) {
        addCriterion("id", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public LoginLogWhereGroup andIdNotLikeTo(Long value) {
        addCriterion("id", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public LoginLogWhereGroup andIdNotLikeTo(boolean prefix, Long value) {
        addCriterion("id", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public LoginLogWhereGroup andIdNotLikeTo(Long value, boolean suffix) {
        addCriterion("id", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public LoginLogWhereGroup andIdIn(List<Long> list) {
        addCriterion("id", EnumOperator.IN, list);
        return this;
    }


    public LoginLogWhereGroup andIdNotIn(List<Long> list) {
        addCriterion("id", EnumOperator.NOT_IN, list);
        return this;
    }

    public LoginLogWhereGroup andCreateTimeIsNull() {
        addCriterion("create_time", EnumOperator.IS_NULL, null);
        return this;
    }

    public LoginLogWhereGroup andCreateTimeIsNotNull() {
        addCriterion("create_time", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public LoginLogWhereGroup andCreateTimeEqualTo(Instant value) {
        addCriterion("create_time", EnumOperator.EQUAL, value);
        return this;
    }


    public LoginLogWhereGroup andCreateTimeNotEqualTo(Instant value) {
        addCriterion("create_time", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public LoginLogWhereGroup andCreateTimeBetween(LocalDate value1, LocalDate value2) {
        addCriterion("create_time", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("create_time", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public LoginLogWhereGroup andCreateTimeNotBetween(LocalDate value1, LocalDate value2) {
        addCriterion("create_time", EnumOperator.LESS_THAN, value1);
        addCriterion("create_time", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public LoginLogWhereGroup andCreateTimeLikeTo(Instant value) {
        addCriterion("create_time", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public LoginLogWhereGroup andCreateTimeLikeTo(boolean prefix, Instant value) {
        addCriterion("create_time", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public LoginLogWhereGroup andCreateTimeLikeTo(Instant value, boolean suffix) {
        addCriterion("create_time", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public LoginLogWhereGroup andCreateTimeNotLikeTo(Instant value) {
        addCriterion("create_time", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public LoginLogWhereGroup andCreateTimeNotLikeTo(boolean prefix, Instant value) {
        addCriterion("create_time", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public LoginLogWhereGroup andCreateTimeNotLikeTo(Instant value, boolean suffix) {
        addCriterion("create_time", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public LoginLogWhereGroup andCreateTimeIn(List<Instant> list) {
        addCriterion("create_time", EnumOperator.IN, list);
        return this;
    }


    public LoginLogWhereGroup andCreateTimeNotIn(List<Instant> list) {
        addCriterion("create_time", EnumOperator.NOT_IN, list);
        return this;
    }

    public LoginLogWhereGroup andUpdateTimeIsNull() {
        addCriterion("update_time", EnumOperator.IS_NULL, null);
        return this;
    }

    public LoginLogWhereGroup andUpdateTimeIsNotNull() {
        addCriterion("update_time", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public LoginLogWhereGroup andUpdateTimeEqualTo(Instant value) {
        addCriterion("update_time", EnumOperator.EQUAL, value);
        return this;
    }


    public LoginLogWhereGroup andUpdateTimeNotEqualTo(Instant value) {
        addCriterion("update_time", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public LoginLogWhereGroup andUpdateTimeBetween(LocalDate value1, LocalDate value2) {
        addCriterion("update_time", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("update_time", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public LoginLogWhereGroup andUpdateTimeNotBetween(LocalDate value1, LocalDate value2) {
        addCriterion("update_time", EnumOperator.LESS_THAN, value1);
        addCriterion("update_time", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public LoginLogWhereGroup andUpdateTimeLikeTo(Instant value) {
        addCriterion("update_time", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public LoginLogWhereGroup andUpdateTimeLikeTo(boolean prefix, Instant value) {
        addCriterion("update_time", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public LoginLogWhereGroup andUpdateTimeLikeTo(Instant value, boolean suffix) {
        addCriterion("update_time", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public LoginLogWhereGroup andUpdateTimeNotLikeTo(Instant value) {
        addCriterion("update_time", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public LoginLogWhereGroup andUpdateTimeNotLikeTo(boolean prefix, Instant value) {
        addCriterion("update_time", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public LoginLogWhereGroup andUpdateTimeNotLikeTo(Instant value, boolean suffix) {
        addCriterion("update_time", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public LoginLogWhereGroup andUpdateTimeIn(List<Instant> list) {
        addCriterion("update_time", EnumOperator.IN, list);
        return this;
    }


    public LoginLogWhereGroup andUpdateTimeNotIn(List<Instant> list) {
        addCriterion("update_time", EnumOperator.NOT_IN, list);
        return this;
    }

    public LoginLogWhereGroup andCreateUserIsNull() {
        addCriterion("create_user", EnumOperator.IS_NULL, null);
        return this;
    }

    public LoginLogWhereGroup andCreateUserIsNotNull() {
        addCriterion("create_user", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public LoginLogWhereGroup andCreateUserEqualTo(Long value) {
        addCriterion("create_user", EnumOperator.EQUAL, value);
        return this;
    }


    public LoginLogWhereGroup andCreateUserNotEqualTo(Long value) {
        addCriterion("create_user", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public LoginLogWhereGroup andCreateUserBetween(Long value1, Long value2) {
        addCriterion("create_user", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("create_user", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public LoginLogWhereGroup andCreateUserNotBetween(Long value1, Long value2) {
        addCriterion("create_user", EnumOperator.LESS_THAN, value1);
        addCriterion("create_user", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public LoginLogWhereGroup andCreateUserLikeTo(Long value) {
        addCriterion("create_user", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public LoginLogWhereGroup andCreateUserLikeTo(boolean prefix, Long value) {
        addCriterion("create_user", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public LoginLogWhereGroup andCreateUserLikeTo(Long value, boolean suffix) {
        addCriterion("create_user", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public LoginLogWhereGroup andCreateUserNotLikeTo(Long value) {
        addCriterion("create_user", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public LoginLogWhereGroup andCreateUserNotLikeTo(boolean prefix, Long value) {
        addCriterion("create_user", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public LoginLogWhereGroup andCreateUserNotLikeTo(Long value, boolean suffix) {
        addCriterion("create_user", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public LoginLogWhereGroup andCreateUserIn(List<Long> list) {
        addCriterion("create_user", EnumOperator.IN, list);
        return this;
    }


    public LoginLogWhereGroup andCreateUserNotIn(List<Long> list) {
        addCriterion("create_user", EnumOperator.NOT_IN, list);
        return this;
    }

    public LoginLogWhereGroup andUpdateUserIsNull() {
        addCriterion("update_user", EnumOperator.IS_NULL, null);
        return this;
    }

    public LoginLogWhereGroup andUpdateUserIsNotNull() {
        addCriterion("update_user", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public LoginLogWhereGroup andUpdateUserEqualTo(Long value) {
        addCriterion("update_user", EnumOperator.EQUAL, value);
        return this;
    }


    public LoginLogWhereGroup andUpdateUserNotEqualTo(Long value) {
        addCriterion("update_user", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public LoginLogWhereGroup andUpdateUserBetween(Long value1, Long value2) {
        addCriterion("update_user", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("update_user", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public LoginLogWhereGroup andUpdateUserNotBetween(Long value1, Long value2) {
        addCriterion("update_user", EnumOperator.LESS_THAN, value1);
        addCriterion("update_user", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public LoginLogWhereGroup andUpdateUserLikeTo(Long value) {
        addCriterion("update_user", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public LoginLogWhereGroup andUpdateUserLikeTo(boolean prefix, Long value) {
        addCriterion("update_user", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public LoginLogWhereGroup andUpdateUserLikeTo(Long value, boolean suffix) {
        addCriterion("update_user", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public LoginLogWhereGroup andUpdateUserNotLikeTo(Long value) {
        addCriterion("update_user", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public LoginLogWhereGroup andUpdateUserNotLikeTo(boolean prefix, Long value) {
        addCriterion("update_user", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public LoginLogWhereGroup andUpdateUserNotLikeTo(Long value, boolean suffix) {
        addCriterion("update_user", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public LoginLogWhereGroup andUpdateUserIn(List<Long> list) {
        addCriterion("update_user", EnumOperator.IN, list);
        return this;
    }


    public LoginLogWhereGroup andUpdateUserNotIn(List<Long> list) {
        addCriterion("update_user", EnumOperator.NOT_IN, list);
        return this;
    }

    public LoginLogWhereGroup andIpIsNull() {
        addCriterion("ip", EnumOperator.IS_NULL, null);
        return this;
    }

    public LoginLogWhereGroup andIpIsNotNull() {
        addCriterion("ip", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public LoginLogWhereGroup andIpEqualTo(String value) {
        addCriterion("ip", EnumOperator.EQUAL, value);
        return this;
    }


    public LoginLogWhereGroup andIpNotEqualTo(String value) {
        addCriterion("ip", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public LoginLogWhereGroup andIpBetween(String value1, String value2) {
        addCriterion("ip", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("ip", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public LoginLogWhereGroup andIpNotBetween(String value1, String value2) {
        addCriterion("ip", EnumOperator.LESS_THAN, value1);
        addCriterion("ip", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public LoginLogWhereGroup andIpLikeTo(String value) {
        addCriterion("ip", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public LoginLogWhereGroup andIpLikeTo(boolean prefix, String value) {
        addCriterion("ip", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public LoginLogWhereGroup andIpLikeTo(String value, boolean suffix) {
        addCriterion("ip", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public LoginLogWhereGroup andIpNotLikeTo(String value) {
        addCriterion("ip", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public LoginLogWhereGroup andIpNotLikeTo(boolean prefix, String value) {
        addCriterion("ip", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public LoginLogWhereGroup andIpNotLikeTo(String value, boolean suffix) {
        addCriterion("ip", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public LoginLogWhereGroup andIpIn(List<String> list) {
        addCriterion("ip", EnumOperator.IN, list);
        return this;
    }


    public LoginLogWhereGroup andIpNotIn(List<String> list) {
        addCriterion("ip", EnumOperator.NOT_IN, list);
        return this;
    }

    public LoginLogWhereGroup andAreaIsNull() {
        addCriterion("area", EnumOperator.IS_NULL, null);
        return this;
    }

    public LoginLogWhereGroup andAreaIsNotNull() {
        addCriterion("area", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public LoginLogWhereGroup andAreaEqualTo(String value) {
        addCriterion("area", EnumOperator.EQUAL, value);
        return this;
    }


    public LoginLogWhereGroup andAreaNotEqualTo(String value) {
        addCriterion("area", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public LoginLogWhereGroup andAreaBetween(String value1, String value2) {
        addCriterion("area", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("area", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public LoginLogWhereGroup andAreaNotBetween(String value1, String value2) {
        addCriterion("area", EnumOperator.LESS_THAN, value1);
        addCriterion("area", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public LoginLogWhereGroup andAreaLikeTo(String value) {
        addCriterion("area", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public LoginLogWhereGroup andAreaLikeTo(boolean prefix, String value) {
        addCriterion("area", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public LoginLogWhereGroup andAreaLikeTo(String value, boolean suffix) {
        addCriterion("area", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public LoginLogWhereGroup andAreaNotLikeTo(String value) {
        addCriterion("area", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public LoginLogWhereGroup andAreaNotLikeTo(boolean prefix, String value) {
        addCriterion("area", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public LoginLogWhereGroup andAreaNotLikeTo(String value, boolean suffix) {
        addCriterion("area", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public LoginLogWhereGroup andAreaIn(List<String> list) {
        addCriterion("area", EnumOperator.IN, list);
        return this;
    }


    public LoginLogWhereGroup andAreaNotIn(List<String> list) {
        addCriterion("area", EnumOperator.NOT_IN, list);
        return this;
    }

    public LoginLogWhereGroup andTypeIsNull() {
        addCriterion("type", EnumOperator.IS_NULL, null);
        return this;
    }

    public LoginLogWhereGroup andTypeIsNotNull() {
        addCriterion("type", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public LoginLogWhereGroup andTypeEqualTo(Integer value) {
        addCriterion("type", EnumOperator.EQUAL, value);
        return this;
    }


    public LoginLogWhereGroup andTypeNotEqualTo(Integer value) {
        addCriterion("type", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public LoginLogWhereGroup andTypeBetween(Integer value1, Integer value2) {
        addCriterion("type", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("type", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public LoginLogWhereGroup andTypeNotBetween(Integer value1, Integer value2) {
        addCriterion("type", EnumOperator.LESS_THAN, value1);
        addCriterion("type", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public LoginLogWhereGroup andTypeLikeTo(Integer value) {
        addCriterion("type", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public LoginLogWhereGroup andTypeLikeTo(boolean prefix, Integer value) {
        addCriterion("type", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public LoginLogWhereGroup andTypeLikeTo(Integer value, boolean suffix) {
        addCriterion("type", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public LoginLogWhereGroup andTypeNotLikeTo(Integer value) {
        addCriterion("type", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public LoginLogWhereGroup andTypeNotLikeTo(boolean prefix, Integer value) {
        addCriterion("type", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public LoginLogWhereGroup andTypeNotLikeTo(Integer value, boolean suffix) {
        addCriterion("type", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public LoginLogWhereGroup andTypeIn(List<Integer> list) {
        addCriterion("type", EnumOperator.IN, list);
        return this;
    }


    public LoginLogWhereGroup andTypeNotIn(List<Integer> list) {
        addCriterion("type", EnumOperator.NOT_IN, list);
        return this;
    }

    public LoginLogWhereGroup andClientIsNull() {
        addCriterion("client", EnumOperator.IS_NULL, null);
        return this;
    }

    public LoginLogWhereGroup andClientIsNotNull() {
        addCriterion("client", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public LoginLogWhereGroup andClientEqualTo(String value) {
        addCriterion("client", EnumOperator.EQUAL, value);
        return this;
    }


    public LoginLogWhereGroup andClientNotEqualTo(String value) {
        addCriterion("client", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public LoginLogWhereGroup andClientBetween(String value1, String value2) {
        addCriterion("client", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("client", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public LoginLogWhereGroup andClientNotBetween(String value1, String value2) {
        addCriterion("client", EnumOperator.LESS_THAN, value1);
        addCriterion("client", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public LoginLogWhereGroup andClientLikeTo(String value) {
        addCriterion("client", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public LoginLogWhereGroup andClientLikeTo(boolean prefix, String value) {
        addCriterion("client", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public LoginLogWhereGroup andClientLikeTo(String value, boolean suffix) {
        addCriterion("client", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public LoginLogWhereGroup andClientNotLikeTo(String value) {
        addCriterion("client", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public LoginLogWhereGroup andClientNotLikeTo(boolean prefix, String value) {
        addCriterion("client", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public LoginLogWhereGroup andClientNotLikeTo(String value, boolean suffix) {
        addCriterion("client", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public LoginLogWhereGroup andClientIn(List<String> list) {
        addCriterion("client", EnumOperator.IN, list);
        return this;
    }


    public LoginLogWhereGroup andClientNotIn(List<String> list) {
        addCriterion("client", EnumOperator.NOT_IN, list);
        return this;
    }

    public LoginLogWhereGroup andEnabledIsNull() {
        addCriterion("enabled", EnumOperator.IS_NULL, null);
        return this;
    }

    public LoginLogWhereGroup andEnabledIsNotNull() {
        addCriterion("enabled", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public LoginLogWhereGroup andEnabledEqualTo(Boolean value) {
        addCriterion("enabled", EnumOperator.EQUAL, value);
        return this;
    }


    public LoginLogWhereGroup andEnabledNotEqualTo(Boolean value) {
        addCriterion("enabled", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public LoginLogWhereGroup andEnabledBetween(Boolean value1, Boolean value2) {
        addCriterion("enabled", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("enabled", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public LoginLogWhereGroup andEnabledNotBetween(Boolean value1, Boolean value2) {
        addCriterion("enabled", EnumOperator.LESS_THAN, value1);
        addCriterion("enabled", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public LoginLogWhereGroup andEnabledLikeTo(Boolean value) {
        addCriterion("enabled", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public LoginLogWhereGroup andEnabledLikeTo(boolean prefix, Boolean value) {
        addCriterion("enabled", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public LoginLogWhereGroup andEnabledLikeTo(Boolean value, boolean suffix) {
        addCriterion("enabled", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public LoginLogWhereGroup andEnabledNotLikeTo(Boolean value) {
        addCriterion("enabled", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public LoginLogWhereGroup andEnabledNotLikeTo(boolean prefix, Boolean value) {
        addCriterion("enabled", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public LoginLogWhereGroup andEnabledNotLikeTo(Boolean value, boolean suffix) {
        addCriterion("enabled", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public LoginLogWhereGroup andEnabledIn(List<Boolean> list) {
        addCriterion("enabled", EnumOperator.IN, list);
        return this;
    }


    public LoginLogWhereGroup andEnabledNotIn(List<Boolean> list) {
        addCriterion("enabled", EnumOperator.NOT_IN, list);
        return this;
    }

    public LoginLogWhereGroup andDeletedIsNull() {
        addCriterion("deleted", EnumOperator.IS_NULL, null);
        return this;
    }

    public LoginLogWhereGroup andDeletedIsNotNull() {
        addCriterion("deleted", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public LoginLogWhereGroup andDeletedEqualTo(Boolean value) {
        addCriterion("deleted", EnumOperator.EQUAL, value);
        return this;
    }


    public LoginLogWhereGroup andDeletedNotEqualTo(Boolean value) {
        addCriterion("deleted", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public LoginLogWhereGroup andDeletedBetween(Boolean value1, Boolean value2) {
        addCriterion("deleted", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("deleted", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public LoginLogWhereGroup andDeletedNotBetween(Boolean value1, Boolean value2) {
        addCriterion("deleted", EnumOperator.LESS_THAN, value1);
        addCriterion("deleted", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public LoginLogWhereGroup andDeletedLikeTo(Boolean value) {
        addCriterion("deleted", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public LoginLogWhereGroup andDeletedLikeTo(boolean prefix, Boolean value) {
        addCriterion("deleted", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public LoginLogWhereGroup andDeletedLikeTo(Boolean value, boolean suffix) {
        addCriterion("deleted", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public LoginLogWhereGroup andDeletedNotLikeTo(Boolean value) {
        addCriterion("deleted", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public LoginLogWhereGroup andDeletedNotLikeTo(boolean prefix, Boolean value) {
        addCriterion("deleted", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public LoginLogWhereGroup andDeletedNotLikeTo(Boolean value, boolean suffix) {
        addCriterion("deleted", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public LoginLogWhereGroup andDeletedIn(List<Boolean> list) {
        addCriterion("deleted", EnumOperator.IN, list);
        return this;
    }


    public LoginLogWhereGroup andDeletedNotIn(List<Boolean> list) {
        addCriterion("deleted", EnumOperator.NOT_IN, list);
        return this;
    }


}
