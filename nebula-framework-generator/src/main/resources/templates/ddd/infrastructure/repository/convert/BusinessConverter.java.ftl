<#assign currentTime = .now>
package ${templateTable.packageName}.${templateTable.javaTableName[0]?lower_case+templateTable.javaTableName[1..]}.infrastructure.repository.convert;

import ${templateTable.packageName}.${templateTable.javaTableName[0]?lower_case+templateTable.javaTableName[1..]}.application.dto.${templateTable.javaTableName}DTO;
import ${templateTable.packageName}.${templateTable.javaTableName[0]?lower_case+templateTable.javaTableName[1..]}.domain.entity.${templateTable.javaTableName}Entity;
import ${templateTable.packageName}.${templateTable.javaTableName[0]?lower_case+templateTable.javaTableName[1..]}.infrastructure.repository.dataobject.${templateTable.javaTableName}DO;
import org.mapstruct.Mapper;
import org.mapstruct.factory.Mappers;

import java.util.List;

 /**
  * This file is auto-generated by nebula-framework-generator.
  * The auto-generation plugin was developed using IntelliJ IDEA Community Edition.
  * Thanks to JetBrains for their outstanding contributions to the developer community.
  *
  * The code generated by this tool is owned by the user of the tool.
  * The tool itself is copyrighted by ${templateTable.copyright}.
  *
  * @author ${templateTable.copyright}
  * @version ${templateTable.version}
  * @since ${currentTime?string("yyyy-MM-dd HH:mm:ss")}
  */
@Mapper
public interface ${templateTable.javaTableName}Converter {
    ${templateTable.javaTableName}Converter INSTANCE = Mappers.getMapper(${templateTable.javaTableName}Converter.class);
    ${templateTable.javaTableName}DO covertDO(${templateTable.javaTableName}Entity ${templateTable.javaTableName[0]?lower_case+templateTable.javaTableName[1..]}Entity);
    ${templateTable.javaTableName}DTO covertDTO(${templateTable.javaTableName}DO ${templateTable.javaTableName[0]?lower_case+templateTable.javaTableName[1..]}DO);
    List<${templateTable.javaTableName}DTO> covertDTOS(List<${templateTable.javaTableName}DO> ${templateTable.javaTableName[0]?lower_case+templateTable.javaTableName[1..]}DOS);
}