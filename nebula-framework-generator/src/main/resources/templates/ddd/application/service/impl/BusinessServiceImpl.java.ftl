<#assign currentTime = .now>
package ${templateTable.packageName}.application.service.impl;

import com.neegix.application.command.BaseService;
import com.neegix.exception.BusinessRuntimeException;
import ${templateTable.packageName}.application.cqrs.command.BatchDelete${templateTable.javaTableName}Command;
import ${templateTable.packageName}.application.cqrs.command.New${templateTable.javaTableName}Command;
import ${templateTable.packageName}.application.cqrs.command.Update${templateTable.javaTableName}Command;
import ${templateTable.packageName}.application.cqrs.query.${templateTable.javaTableName}QueryRepository;
import ${templateTable.packageName}.application.dto.${templateTable.javaTableName}DTO;
import ${templateTable.packageName}.application.service.${templateTable.javaTableName}Service;
import ${templateTable.packageName}.domain.entity.${templateTable.javaTableName}Entity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

 /**
  * This file is auto-generated by nebula-framework-generator.
  * The auto-generation plugin was developed using IntelliJ IDEA Community Edition.
  * Thanks to JetBrains for their outstanding contributions to the developer community.
  *
  * The code generated by this tool is owned by the user of the tool.
  * The tool itself is copyrighted by ${templateTable.copyright}.
  *
  * @author ${templateTable.copyright}
  * @version ${templateTable.version}
  * @since ${currentTime?string("yyyy-MM-dd HH:mm:ss")}
  */
@Service
public class ${templateTable.javaTableName}ServiceImpl extends BaseService implements ${templateTable.javaTableName}Service{
    @Autowired
    private ${templateTable.javaTableName}QueryRepository ${templateTable.javaTableName[0]?lower_case+templateTable.javaTableName[1..]}QueryRepository;

    @Override
    public Void create${templateTable.javaTableName}(String code, String name) {
        Optional<${templateTable.javaTableName}DTO> optional = ${templateTable.javaTableName[0]?lower_case+templateTable.javaTableName[1..]}QueryRepository.findByCodeAndName(code, name);
        optional.ifPresent((${templateTable.javaTableName[0]?lower_case+templateTable.javaTableName[1..]}DTO)-> {throw new BusinessRuntimeException("字典组已经存在！");});
        return commandInvoker.execute(new New${templateTable.javaTableName}Command(new ${templateTable.javaTableName}Entity(code, name)));
    }

    @Override
    public Void modify${templateTable.javaTableName}(Long id, String code, String name) {
        return commandInvoker.execute(new Update${templateTable.javaTableName}Command(new ${templateTable.javaTableName}Entity(id, code, name)));
    }

    @Override
    public Void remove${templateTable.javaTableName}(List<Long> ids) {
        Integer count = ${templateTable.javaTableName[0]?lower_case+templateTable.javaTableName[1..]}QueryRepository.selectCount(ids);
        if (count.equals(0)){
            throw new BusinessRuntimeException("要删除的记录不存在！");
        }
        return commandInvoker.execute(new BatchDelete${templateTable.javaTableName}Command(ids));
    }
}
