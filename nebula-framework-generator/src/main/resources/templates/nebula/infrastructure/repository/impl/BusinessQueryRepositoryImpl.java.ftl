<#assign currentTime = .now>
package ${templateTable.packageName}.${templateTable.javaTableName[0]?lower_case+templateTable.javaTableName[1..]}.infrastructure.repository.impl;

import com.neegix.application.query.NebulaSQL;
import com.neegix.base.PageDTO;
import ${templateTable.packageName}.${templateTable.javaTableName[0]?lower_case+templateTable.javaTableName[1..]}.application.cqrs.query.${templateTable.javaTableName}QueryRepository;
import ${templateTable.packageName}.${templateTable.javaTableName[0]?lower_case+templateTable.javaTableName[1..]}.application.cqrs.query.condition.${templateTable.javaTableName}WhereGroup;
import ${templateTable.packageName}.${templateTable.javaTableName[0]?lower_case+templateTable.javaTableName[1..]}.application.dto.${templateTable.javaTableName}DTO;
import ${templateTable.packageName}.${templateTable.javaTableName[0]?lower_case+templateTable.javaTableName[1..]}.infrastructure.repository.convert.${templateTable.javaTableName}Converter;
import ${templateTable.packageName}.${templateTable.javaTableName[0]?lower_case+templateTable.javaTableName[1..]}.infrastructure.repository.dataobject.${templateTable.javaTableName}DO;
import ${templateTable.packageName}.${templateTable.javaTableName[0]?lower_case+templateTable.javaTableName[1..]}.infrastructure.repository.mapper.${templateTable.javaTableName}Mapper;
import ${templateTable.packageName}.${templateTable.javaTableName[0]?lower_case+templateTable.javaTableName[1..]}.infrastructure.repository.mapper.customized.${templateTable.javaTableName}CustomizedMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

 /**
  * This file is auto-generated by nebula-framework-generator.
  * The auto-generation plugin was developed using IntelliJ IDEA Community Edition.
  * Thanks to JetBrains for their outstanding contributions to the developer community.
  * <p>
  * The code generated by this tool is owned by the user of the tool.
  * The tool itself is copyrighted by <a href="${templateTable.copyright}">${templateTable.copyright}</a>.
  *
  * @author <a href="${templateTable.copyright}">${templateTable.copyright}</a>
  * @version ${templateTable.version}
  * @since ${currentTime?string("yyyy-MM-dd HH:mm:ss")}
  */

@Repository
public class ${templateTable.javaTableName}QueryRepositoryImpl implements ${templateTable.javaTableName}QueryRepository {

    @Autowired
    private ${templateTable.javaTableName}Mapper ${templateTable.javaTableName[0]?lower_case+templateTable.javaTableName[1..]}Mapper;

    @Autowired
    private ${templateTable.javaTableName}CustomizedMapper ${templateTable.javaTableName[0]?lower_case+templateTable.javaTableName[1..]}CustomizedMapper;

    @Override
    public Optional<${templateTable.javaTableName}DTO> findById(Long id) {
        ${templateTable.javaTableName}DO ${templateTable.javaTableName[0]?lower_case+templateTable.javaTableName[1..]}DO = ${templateTable.javaTableName[0]?lower_case+templateTable.javaTableName[1..]}Mapper.selectByPrimaryKey(id);
        return Optional.ofNullable(${templateTable.javaTableName}Converter.INSTANCE.covertDTO(${templateTable.javaTableName[0]?lower_case+templateTable.javaTableName[1..]}DO));
    }

    @Override
    public Integer selectCount(List<Long> ids) {
        return ${templateTable.javaTableName[0]?lower_case+templateTable.javaTableName[1..]}CustomizedMapper.selectCountByIds(ids);
    }

    @Override
    public PageDTO<${templateTable.javaTableName}DTO> findPage(Integer currentPage, Integer pageSize, ${templateTable.javaTableName}DTO ${templateTable.javaTableName[0]?lower_case+templateTable.javaTableName[1..]}DTO) {
        NebulaSQL nebulaSQL = new NebulaSQL();
        nebulaSQL.createWhereGroups(${templateTable.javaTableName}WhereGroup.class);
        nebulaSQL.setPager(currentPage, pageSize);
        List<${templateTable.javaTableName}DO> result = ${templateTable.javaTableName[0]?lower_case+templateTable.javaTableName[1..]}Mapper.selectList(nebulaSQL);
        Long total = ${templateTable.javaTableName[0]?lower_case+templateTable.javaTableName[1..]}Mapper.selectCount(nebulaSQL);
        PageDTO<${templateTable.javaTableName}DTO> page = new PageDTO<>(currentPage, pageSize);
        page.setTotal(total);
        page.setResult(${templateTable.javaTableName}Converter.INSTANCE.covertDTOS(result));
        return page;
    }
}
