package com.neegix.development.api.application.cqrs.query.condition;

import com.neegix.application.query.EnumOperator;
import com.neegix.application.query.WhereGroups;
import java.time.Instant;
import java.util.List;

 /**
  * This file is auto-generated by nebula-framework-generator.
  * The auto-generation plugin was developed using IntelliJ IDEA Community Edition.
  * Thanks to JetBrains for their outstanding contributions to the developer community.
  * <p>
  * The code generated by this tool is owned by the user of the tool.
  * The tool itself is copyrighted by <a href="https://www.neegix.com">https://www.neegix.com</a>.
  *
  * @author <a href="https://www.neegix.com">https://www.neegix.com</a>
  * @version 1.0.0
  * @since 2024-11-22 11:43:14
  */

public class ApiWhereGroup extends WhereGroups {
    public ApiWhereGroup andIdIsNull() {
        addCriterion("id", EnumOperator.IS_NULL, null);
        return this;
    }

    public ApiWhereGroup andIdIsNotNull() {
        addCriterion("id", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public ApiWhereGroup andIdEqualTo(Long value) {
        addCriterion("id", EnumOperator.EQUAL, value);
        return this;
    }


    public ApiWhereGroup andIdNotEqualTo(Long value) {
        addCriterion("id", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public ApiWhereGroup andIdBetween(Long value1, Long value2) {
        addCriterion("id", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("id", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public ApiWhereGroup andIdNotBetween(Long value1, Long value2) {
        addCriterion("id", EnumOperator.LESS_THAN, value1);
        addCriterion("id", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public ApiWhereGroup andIdLikeTo(Long value) {
        addCriterion("id", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public ApiWhereGroup andIdLikeTo(boolean prefix, Long value) {
        addCriterion("id", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public ApiWhereGroup andIdLikeTo(Long value, boolean suffix) {
        addCriterion("id", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public ApiWhereGroup andIdNotLikeTo(Long value) {
        addCriterion("id", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public ApiWhereGroup andIdNotLikeTo(boolean prefix, Long value) {
        addCriterion("id", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public ApiWhereGroup andIdNotLikeTo(Long value, boolean suffix) {
        addCriterion("id", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public ApiWhereGroup andIdIn(List<Long> list) {
        addCriterion("id", EnumOperator.IN, list);
        return this;
    }


    public ApiWhereGroup andIdNotIn(List<Long> list) {
        addCriterion("id", EnumOperator.NOT_IN, list);
        return this;
    }

    public ApiWhereGroup andCreateTimeIsNull() {
        addCriterion("create_time", EnumOperator.IS_NULL, null);
        return this;
    }

    public ApiWhereGroup andCreateTimeIsNotNull() {
        addCriterion("create_time", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public ApiWhereGroup andCreateTimeEqualTo(Instant value) {
        addCriterion("create_time", EnumOperator.EQUAL, value);
        return this;
    }


    public ApiWhereGroup andCreateTimeNotEqualTo(Instant value) {
        addCriterion("create_time", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public ApiWhereGroup andCreateTimeBetween(Instant value1, Instant value2) {
        addCriterion("create_time", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("create_time", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public ApiWhereGroup andCreateTimeNotBetween(Instant value1, Instant value2) {
        addCriterion("create_time", EnumOperator.LESS_THAN, value1);
        addCriterion("create_time", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public ApiWhereGroup andCreateTimeLikeTo(Instant value) {
        addCriterion("create_time", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public ApiWhereGroup andCreateTimeLikeTo(boolean prefix, Instant value) {
        addCriterion("createTime", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public ApiWhereGroup andCreateTimeLikeTo(Instant value, boolean suffix) {
        addCriterion("create_time", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public ApiWhereGroup andCreateTimeNotLikeTo(Instant value) {
        addCriterion("create_time", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public ApiWhereGroup andCreateTimeNotLikeTo(boolean prefix, Instant value) {
        addCriterion("create_time", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public ApiWhereGroup andCreateTimeNotLikeTo(Instant value, boolean suffix) {
        addCriterion("create_time", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public ApiWhereGroup andCreateTimeIn(List<Instant> list) {
        addCriterion("create_time", EnumOperator.IN, list);
        return this;
    }


    public ApiWhereGroup andCreateTimeNotIn(List<Instant> list) {
        addCriterion("create_time", EnumOperator.NOT_IN, list);
        return this;
    }

    public ApiWhereGroup andUpdateTimeIsNull() {
        addCriterion("update_time", EnumOperator.IS_NULL, null);
        return this;
    }

    public ApiWhereGroup andUpdateTimeIsNotNull() {
        addCriterion("update_time", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public ApiWhereGroup andUpdateTimeEqualTo(Instant value) {
        addCriterion("update_time", EnumOperator.EQUAL, value);
        return this;
    }


    public ApiWhereGroup andUpdateTimeNotEqualTo(Instant value) {
        addCriterion("update_time", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public ApiWhereGroup andUpdateTimeBetween(Instant value1, Instant value2) {
        addCriterion("update_time", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("update_time", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public ApiWhereGroup andUpdateTimeNotBetween(Instant value1, Instant value2) {
        addCriterion("update_time", EnumOperator.LESS_THAN, value1);
        addCriterion("update_time", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public ApiWhereGroup andUpdateTimeLikeTo(Instant value) {
        addCriterion("update_time", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public ApiWhereGroup andUpdateTimeLikeTo(boolean prefix, Instant value) {
        addCriterion("update_time", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public ApiWhereGroup andUpdateTimeLikeTo(Instant value, boolean suffix) {
        addCriterion("update_time", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public ApiWhereGroup andUpdateTimeNotLikeTo(Instant value) {
        addCriterion("update_time", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public ApiWhereGroup andUpdateTimeNotLikeTo(boolean prefix, Instant value) {
        addCriterion("update_time", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public ApiWhereGroup andUpdateTimeNotLikeTo(Instant value, boolean suffix) {
        addCriterion("update_time", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public ApiWhereGroup andUpdateTimeIn(List<Instant> list) {
        addCriterion("update_time", EnumOperator.IN, list);
        return this;
    }


    public ApiWhereGroup andUpdateTimeNotIn(List<Instant> list) {
        addCriterion("update_time", EnumOperator.NOT_IN, list);
        return this;
    }

    public ApiWhereGroup andCreateUserIsNull() {
        addCriterion("createUser", EnumOperator.IS_NULL, null);
        return this;
    }

    public ApiWhereGroup andCreateUserIsNotNull() {
        addCriterion("createUser", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public ApiWhereGroup andCreateUserEqualTo(Long value) {
        addCriterion("createUser", EnumOperator.EQUAL, value);
        return this;
    }


    public ApiWhereGroup andCreateUserNotEqualTo(Long value) {
        addCriterion("createUser", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public ApiWhereGroup andCreateUserBetween(Long value1, Long value2) {
        addCriterion("createUser", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("createUser", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public ApiWhereGroup andCreateUserNotBetween(Long value1, Long value2) {
        addCriterion("createUser", EnumOperator.LESS_THAN, value1);
        addCriterion("createUser", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public ApiWhereGroup andCreateUserLikeTo(Long value) {
        addCriterion("createUser", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public ApiWhereGroup andCreateUserLikeTo(boolean prefix, Long value) {
        addCriterion("createUser", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public ApiWhereGroup andCreateUserLikeTo(Long value, boolean suffix) {
        addCriterion("createUser", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public ApiWhereGroup andCreateUserNotLikeTo(Long value) {
        addCriterion("createUser", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public ApiWhereGroup andCreateUserNotLikeTo(boolean prefix, Long value) {
        addCriterion("createUser", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public ApiWhereGroup andCreateUserNotLikeTo(Long value, boolean suffix) {
        addCriterion("createUser", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public ApiWhereGroup andCreateUserIn(List<Long> list) {
        addCriterion("createUser", EnumOperator.IN, list);
        return this;
    }


    public ApiWhereGroup andCreateUserNotIn(List<Long> list) {
        addCriterion("createUser", EnumOperator.NOT_IN, list);
        return this;
    }

    public ApiWhereGroup andUpdateUserIsNull() {
        addCriterion("updateUser", EnumOperator.IS_NULL, null);
        return this;
    }

    public ApiWhereGroup andUpdateUserIsNotNull() {
        addCriterion("updateUser", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public ApiWhereGroup andUpdateUserEqualTo(Long value) {
        addCriterion("updateUser", EnumOperator.EQUAL, value);
        return this;
    }


    public ApiWhereGroup andUpdateUserNotEqualTo(Long value) {
        addCriterion("updateUser", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public ApiWhereGroup andUpdateUserBetween(Long value1, Long value2) {
        addCriterion("updateUser", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("updateUser", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public ApiWhereGroup andUpdateUserNotBetween(Long value1, Long value2) {
        addCriterion("updateUser", EnumOperator.LESS_THAN, value1);
        addCriterion("updateUser", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public ApiWhereGroup andUpdateUserLikeTo(Long value) {
        addCriterion("updateUser", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public ApiWhereGroup andUpdateUserLikeTo(boolean prefix, Long value) {
        addCriterion("updateUser", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public ApiWhereGroup andUpdateUserLikeTo(Long value, boolean suffix) {
        addCriterion("updateUser", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public ApiWhereGroup andUpdateUserNotLikeTo(Long value) {
        addCriterion("updateUser", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public ApiWhereGroup andUpdateUserNotLikeTo(boolean prefix, Long value) {
        addCriterion("updateUser", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public ApiWhereGroup andUpdateUserNotLikeTo(Long value, boolean suffix) {
        addCriterion("updateUser", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public ApiWhereGroup andUpdateUserIn(List<Long> list) {
        addCriterion("updateUser", EnumOperator.IN, list);
        return this;
    }


    public ApiWhereGroup andUpdateUserNotIn(List<Long> list) {
        addCriterion("updateUser", EnumOperator.NOT_IN, list);
        return this;
    }

    public ApiWhereGroup andModuleIsNull() {
        addCriterion("module", EnumOperator.IS_NULL, null);
        return this;
    }

    public ApiWhereGroup andModuleIsNotNull() {
        addCriterion("module", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public ApiWhereGroup andModuleEqualTo(Long value) {
        addCriterion("module", EnumOperator.EQUAL, value);
        return this;
    }


    public ApiWhereGroup andModuleNotEqualTo(Long value) {
        addCriterion("module", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public ApiWhereGroup andModuleBetween(Long value1, Long value2) {
        addCriterion("module", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("module", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public ApiWhereGroup andModuleNotBetween(Long value1, Long value2) {
        addCriterion("module", EnumOperator.LESS_THAN, value1);
        addCriterion("module", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public ApiWhereGroup andModuleLikeTo(Long value) {
        addCriterion("module", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public ApiWhereGroup andModuleLikeTo(boolean prefix, Long value) {
        addCriterion("module", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public ApiWhereGroup andModuleLikeTo(Long value, boolean suffix) {
        addCriterion("module", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public ApiWhereGroup andModuleNotLikeTo(Long value) {
        addCriterion("module", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public ApiWhereGroup andModuleNotLikeTo(boolean prefix, Long value) {
        addCriterion("module", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public ApiWhereGroup andModuleNotLikeTo(Long value, boolean suffix) {
        addCriterion("module", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public ApiWhereGroup andModuleIn(List<Long> list) {
        addCriterion("module", EnumOperator.IN, list);
        return this;
    }


    public ApiWhereGroup andModuleNotIn(List<Long> list) {
        addCriterion("module", EnumOperator.NOT_IN, list);
        return this;
    }

    public ApiWhereGroup andNameIsNull() {
        addCriterion("name", EnumOperator.IS_NULL, null);
        return this;
    }

    public ApiWhereGroup andNameIsNotNull() {
        addCriterion("name", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public ApiWhereGroup andNameEqualTo(String value) {
        addCriterion("name", EnumOperator.EQUAL, value);
        return this;
    }


    public ApiWhereGroup andNameNotEqualTo(String value) {
        addCriterion("name", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public ApiWhereGroup andNameBetween(String value1, String value2) {
        addCriterion("name", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("name", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public ApiWhereGroup andNameNotBetween(String value1, String value2) {
        addCriterion("name", EnumOperator.LESS_THAN, value1);
        addCriterion("name", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public ApiWhereGroup andNameLikeTo(String value) {
        addCriterion("name", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public ApiWhereGroup andNameLikeTo(boolean prefix, String value) {
        addCriterion("name", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public ApiWhereGroup andNameLikeTo(String value, boolean suffix) {
        addCriterion("name", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public ApiWhereGroup andNameNotLikeTo(String value) {
        addCriterion("name", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public ApiWhereGroup andNameNotLikeTo(boolean prefix, String value) {
        addCriterion("name", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public ApiWhereGroup andNameNotLikeTo(String value, boolean suffix) {
        addCriterion("name", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public ApiWhereGroup andNameIn(List<String> list) {
        addCriterion("name", EnumOperator.IN, list);
        return this;
    }


    public ApiWhereGroup andNameNotIn(List<String> list) {
        addCriterion("name", EnumOperator.NOT_IN, list);
        return this;
    }

    public ApiWhereGroup andAccessIsNull() {
        addCriterion("access", EnumOperator.IS_NULL, null);
        return this;
    }

    public ApiWhereGroup andAccessIsNotNull() {
        addCriterion("access", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public ApiWhereGroup andAccessEqualTo(String value) {
        addCriterion("access", EnumOperator.EQUAL, value);
        return this;
    }


    public ApiWhereGroup andAccessNotEqualTo(String value) {
        addCriterion("access", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public ApiWhereGroup andAccessBetween(String value1, String value2) {
        addCriterion("access", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("access", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public ApiWhereGroup andAccessNotBetween(String value1, String value2) {
        addCriterion("access", EnumOperator.LESS_THAN, value1);
        addCriterion("access", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public ApiWhereGroup andAccessLikeTo(String value) {
        addCriterion("access", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public ApiWhereGroup andAccessLikeTo(boolean prefix, String value) {
        addCriterion("access", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public ApiWhereGroup andAccessLikeTo(String value, boolean suffix) {
        addCriterion("access", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public ApiWhereGroup andAccessNotLikeTo(String value) {
        addCriterion("access", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public ApiWhereGroup andAccessNotLikeTo(boolean prefix, String value) {
        addCriterion("access", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public ApiWhereGroup andAccessNotLikeTo(String value, boolean suffix) {
        addCriterion("access", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public ApiWhereGroup andAccessIn(List<String> list) {
        addCriterion("access", EnumOperator.IN, list);
        return this;
    }


    public ApiWhereGroup andAccessNotIn(List<String> list) {
        addCriterion("access", EnumOperator.NOT_IN, list);
        return this;
    }

    public ApiWhereGroup andTypeIsNull() {
        addCriterion("type", EnumOperator.IS_NULL, null);
        return this;
    }

    public ApiWhereGroup andTypeIsNotNull() {
        addCriterion("type", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public ApiWhereGroup andTypeEqualTo(Integer value) {
        addCriterion("type", EnumOperator.EQUAL, value);
        return this;
    }


    public ApiWhereGroup andTypeNotEqualTo(Integer value) {
        addCriterion("type", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public ApiWhereGroup andTypeBetween(Integer value1, Integer value2) {
        addCriterion("type", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("type", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public ApiWhereGroup andTypeNotBetween(Integer value1, Integer value2) {
        addCriterion("type", EnumOperator.LESS_THAN, value1);
        addCriterion("type", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public ApiWhereGroup andTypeLikeTo(Integer value) {
        addCriterion("type", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public ApiWhereGroup andTypeLikeTo(boolean prefix, Integer value) {
        addCriterion("type", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public ApiWhereGroup andTypeLikeTo(Integer value, boolean suffix) {
        addCriterion("type", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public ApiWhereGroup andTypeNotLikeTo(Integer value) {
        addCriterion("type", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public ApiWhereGroup andTypeNotLikeTo(boolean prefix, Integer value) {
        addCriterion("type", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public ApiWhereGroup andTypeNotLikeTo(Integer value, boolean suffix) {
        addCriterion("type", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public ApiWhereGroup andTypeIn(List<Integer> list) {
        addCriterion("type", EnumOperator.IN, list);
        return this;
    }


    public ApiWhereGroup andTypeNotIn(List<Integer> list) {
        addCriterion("type", EnumOperator.NOT_IN, list);
        return this;
    }

    public ApiWhereGroup andEnabledIsNull() {
        addCriterion("enabled", EnumOperator.IS_NULL, null);
        return this;
    }

    public ApiWhereGroup andEnabledIsNotNull() {
        addCriterion("enabled", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public ApiWhereGroup andEnabledEqualTo(Boolean value) {
        addCriterion("enabled", EnumOperator.EQUAL, value);
        return this;
    }


    public ApiWhereGroup andEnabledNotEqualTo(Boolean value) {
        addCriterion("enabled", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public ApiWhereGroup andEnabledBetween(Boolean value1, Boolean value2) {
        addCriterion("enabled", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("enabled", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public ApiWhereGroup andEnabledNotBetween(Boolean value1, Boolean value2) {
        addCriterion("enabled", EnumOperator.LESS_THAN, value1);
        addCriterion("enabled", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public ApiWhereGroup andEnabledLikeTo(Boolean value) {
        addCriterion("enabled", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public ApiWhereGroup andEnabledLikeTo(boolean prefix, Boolean value) {
        addCriterion("enabled", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public ApiWhereGroup andEnabledLikeTo(Boolean value, boolean suffix) {
        addCriterion("enabled", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public ApiWhereGroup andEnabledNotLikeTo(Boolean value) {
        addCriterion("enabled", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public ApiWhereGroup andEnabledNotLikeTo(boolean prefix, Boolean value) {
        addCriterion("enabled", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public ApiWhereGroup andEnabledNotLikeTo(Boolean value, boolean suffix) {
        addCriterion("enabled", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public ApiWhereGroup andEnabledIn(List<Boolean> list) {
        addCriterion("enabled", EnumOperator.IN, list);
        return this;
    }


    public ApiWhereGroup andEnabledNotIn(List<Boolean> list) {
        addCriterion("enabled", EnumOperator.NOT_IN, list);
        return this;
    }

    public ApiWhereGroup andDeletedIsNull() {
        addCriterion("deleted", EnumOperator.IS_NULL, null);
        return this;
    }

    public ApiWhereGroup andDeletedIsNotNull() {
        addCriterion("deleted", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public ApiWhereGroup andDeletedEqualTo(Boolean value) {
        addCriterion("deleted", EnumOperator.EQUAL, value);
        return this;
    }


    public ApiWhereGroup andDeletedNotEqualTo(Boolean value) {
        addCriterion("deleted", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public ApiWhereGroup andDeletedBetween(Boolean value1, Boolean value2) {
        addCriterion("deleted", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("deleted", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public ApiWhereGroup andDeletedNotBetween(Boolean value1, Boolean value2) {
        addCriterion("deleted", EnumOperator.LESS_THAN, value1);
        addCriterion("deleted", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public ApiWhereGroup andDeletedLikeTo(Boolean value) {
        addCriterion("deleted", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public ApiWhereGroup andDeletedLikeTo(boolean prefix, Boolean value) {
        addCriterion("deleted", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public ApiWhereGroup andDeletedLikeTo(Boolean value, boolean suffix) {
        addCriterion("deleted", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public ApiWhereGroup andDeletedNotLikeTo(Boolean value) {
        addCriterion("deleted", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public ApiWhereGroup andDeletedNotLikeTo(boolean prefix, Boolean value) {
        addCriterion("deleted", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public ApiWhereGroup andDeletedNotLikeTo(Boolean value, boolean suffix) {
        addCriterion("deleted", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public ApiWhereGroup andDeletedIn(List<Boolean> list) {
        addCriterion("deleted", EnumOperator.IN, list);
        return this;
    }


    public ApiWhereGroup andDeletedNotIn(List<Boolean> list) {
        addCriterion("deleted", EnumOperator.NOT_IN, list);
        return this;
    }


}
