package com.neegix.development.menu.infrastructure.repository.condition;

import com.neegix.application.query.EnumOperator;
import com.neegix.application.query.WhereGroups;
import java.time.Instant;
import java.util.List;

 /**
  * This file is auto-generated by nebula-framework-generator.
  * The auto-generation plugin was developed using IntelliJ IDEA Community Edition.
  * Thanks to JetBrains for their outstanding contributions to the developer community.
  * <p>
  * The code generated by this tool is owned by the user of the tool.
  * The tool itself is copyrighted by <a href="https://www.neegix.com">https://www.neegix.com</a>.
  *
  * @author <a href="https://www.neegix.com">https://www.neegix.com</a>
  * @version 1.0.0
  * @since 2024-11-21 16:19:51
  */

public class MenuWhereGroup extends WhereGroups {
    public MenuWhereGroup andIdIsNull() {
        addCriterion("id", EnumOperator.IS_NULL, null);
        return this;
    }

    public MenuWhereGroup andIdIsNotNull() {
        addCriterion("id", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public MenuWhereGroup andIdEqualTo(Long value) {
        addCriterion("id", EnumOperator.EQUAL, value);
        return this;
    }


    public MenuWhereGroup andIdNotEqualTo(Long value) {
        addCriterion("id", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public MenuWhereGroup andIdBetween(Long value1, Long value2) {
        addCriterion("id", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("id", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public MenuWhereGroup andIdNotBetween(Long value1, Long value2) {
        addCriterion("id", EnumOperator.LESS_THAN, value1);
        addCriterion("id", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public MenuWhereGroup andIdLikeTo(Long value) {
        addCriterion("id", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public MenuWhereGroup andIdLikeTo(boolean prefix, Long value) {
        addCriterion("id", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public MenuWhereGroup andIdLikeTo(Long value, boolean suffix) {
        addCriterion("id", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public MenuWhereGroup andIdNotLikeTo(Long value) {
        addCriterion("id", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public MenuWhereGroup andIdNotLikeTo(boolean prefix, Long value) {
        addCriterion("id", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public MenuWhereGroup andIdNotLikeTo(Long value, boolean suffix) {
        addCriterion("id", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public MenuWhereGroup andIdIn(List<Long> list) {
        addCriterion("id", EnumOperator.IN, list);
        return this;
    }


    public MenuWhereGroup andIdNotIn(List<Long> list) {
        addCriterion("id", EnumOperator.NOT_IN, list);
        return this;
    }

    public MenuWhereGroup andCreateTimeIsNull() {
        addCriterion("createTime", EnumOperator.IS_NULL, null);
        return this;
    }

    public MenuWhereGroup andCreateTimeIsNotNull() {
        addCriterion("createTime", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public MenuWhereGroup andCreateTimeEqualTo(Instant value) {
        addCriterion("createTime", EnumOperator.EQUAL, value);
        return this;
    }


    public MenuWhereGroup andCreateTimeNotEqualTo(Instant value) {
        addCriterion("createTime", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public MenuWhereGroup andCreateTimeBetween(Instant value1, Instant value2) {
        addCriterion("createTime", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("createTime", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public MenuWhereGroup andCreateTimeNotBetween(Instant value1, Instant value2) {
        addCriterion("createTime", EnumOperator.LESS_THAN, value1);
        addCriterion("createTime", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public MenuWhereGroup andCreateTimeLikeTo(Instant value) {
        addCriterion("createTime", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public MenuWhereGroup andCreateTimeLikeTo(boolean prefix, Instant value) {
        addCriterion("createTime", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public MenuWhereGroup andCreateTimeLikeTo(Instant value, boolean suffix) {
        addCriterion("createTime", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public MenuWhereGroup andCreateTimeNotLikeTo(Instant value) {
        addCriterion("createTime", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public MenuWhereGroup andCreateTimeNotLikeTo(boolean prefix, Instant value) {
        addCriterion("createTime", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public MenuWhereGroup andCreateTimeNotLikeTo(Instant value, boolean suffix) {
        addCriterion("createTime", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public MenuWhereGroup andCreateTimeIn(List<Instant> list) {
        addCriterion("createTime", EnumOperator.IN, list);
        return this;
    }


    public MenuWhereGroup andCreateTimeNotIn(List<Instant> list) {
        addCriterion("createTime", EnumOperator.NOT_IN, list);
        return this;
    }

    public MenuWhereGroup andUpdateTimeIsNull() {
        addCriterion("updateTime", EnumOperator.IS_NULL, null);
        return this;
    }

    public MenuWhereGroup andUpdateTimeIsNotNull() {
        addCriterion("updateTime", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public MenuWhereGroup andUpdateTimeEqualTo(Instant value) {
        addCriterion("updateTime", EnumOperator.EQUAL, value);
        return this;
    }


    public MenuWhereGroup andUpdateTimeNotEqualTo(Instant value) {
        addCriterion("updateTime", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public MenuWhereGroup andUpdateTimeBetween(Instant value1, Instant value2) {
        addCriterion("updateTime", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("updateTime", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public MenuWhereGroup andUpdateTimeNotBetween(Instant value1, Instant value2) {
        addCriterion("updateTime", EnumOperator.LESS_THAN, value1);
        addCriterion("updateTime", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public MenuWhereGroup andUpdateTimeLikeTo(Instant value) {
        addCriterion("updateTime", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public MenuWhereGroup andUpdateTimeLikeTo(boolean prefix, Instant value) {
        addCriterion("updateTime", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public MenuWhereGroup andUpdateTimeLikeTo(Instant value, boolean suffix) {
        addCriterion("updateTime", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public MenuWhereGroup andUpdateTimeNotLikeTo(Instant value) {
        addCriterion("updateTime", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public MenuWhereGroup andUpdateTimeNotLikeTo(boolean prefix, Instant value) {
        addCriterion("updateTime", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public MenuWhereGroup andUpdateTimeNotLikeTo(Instant value, boolean suffix) {
        addCriterion("updateTime", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public MenuWhereGroup andUpdateTimeIn(List<Instant> list) {
        addCriterion("updateTime", EnumOperator.IN, list);
        return this;
    }


    public MenuWhereGroup andUpdateTimeNotIn(List<Instant> list) {
        addCriterion("updateTime", EnumOperator.NOT_IN, list);
        return this;
    }

    public MenuWhereGroup andCreateUserIsNull() {
        addCriterion("createUser", EnumOperator.IS_NULL, null);
        return this;
    }

    public MenuWhereGroup andCreateUserIsNotNull() {
        addCriterion("createUser", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public MenuWhereGroup andCreateUserEqualTo(Long value) {
        addCriterion("createUser", EnumOperator.EQUAL, value);
        return this;
    }


    public MenuWhereGroup andCreateUserNotEqualTo(Long value) {
        addCriterion("createUser", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public MenuWhereGroup andCreateUserBetween(Long value1, Long value2) {
        addCriterion("createUser", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("createUser", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public MenuWhereGroup andCreateUserNotBetween(Long value1, Long value2) {
        addCriterion("createUser", EnumOperator.LESS_THAN, value1);
        addCriterion("createUser", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public MenuWhereGroup andCreateUserLikeTo(Long value) {
        addCriterion("createUser", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public MenuWhereGroup andCreateUserLikeTo(boolean prefix, Long value) {
        addCriterion("createUser", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public MenuWhereGroup andCreateUserLikeTo(Long value, boolean suffix) {
        addCriterion("createUser", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public MenuWhereGroup andCreateUserNotLikeTo(Long value) {
        addCriterion("createUser", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public MenuWhereGroup andCreateUserNotLikeTo(boolean prefix, Long value) {
        addCriterion("createUser", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public MenuWhereGroup andCreateUserNotLikeTo(Long value, boolean suffix) {
        addCriterion("createUser", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public MenuWhereGroup andCreateUserIn(List<Long> list) {
        addCriterion("createUser", EnumOperator.IN, list);
        return this;
    }


    public MenuWhereGroup andCreateUserNotIn(List<Long> list) {
        addCriterion("createUser", EnumOperator.NOT_IN, list);
        return this;
    }

    public MenuWhereGroup andUpdateUserIsNull() {
        addCriterion("updateUser", EnumOperator.IS_NULL, null);
        return this;
    }

    public MenuWhereGroup andUpdateUserIsNotNull() {
        addCriterion("updateUser", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public MenuWhereGroup andUpdateUserEqualTo(Long value) {
        addCriterion("updateUser", EnumOperator.EQUAL, value);
        return this;
    }


    public MenuWhereGroup andUpdateUserNotEqualTo(Long value) {
        addCriterion("updateUser", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public MenuWhereGroup andUpdateUserBetween(Long value1, Long value2) {
        addCriterion("updateUser", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("updateUser", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public MenuWhereGroup andUpdateUserNotBetween(Long value1, Long value2) {
        addCriterion("updateUser", EnumOperator.LESS_THAN, value1);
        addCriterion("updateUser", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public MenuWhereGroup andUpdateUserLikeTo(Long value) {
        addCriterion("updateUser", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public MenuWhereGroup andUpdateUserLikeTo(boolean prefix, Long value) {
        addCriterion("updateUser", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public MenuWhereGroup andUpdateUserLikeTo(Long value, boolean suffix) {
        addCriterion("updateUser", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public MenuWhereGroup andUpdateUserNotLikeTo(Long value) {
        addCriterion("updateUser", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public MenuWhereGroup andUpdateUserNotLikeTo(boolean prefix, Long value) {
        addCriterion("updateUser", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public MenuWhereGroup andUpdateUserNotLikeTo(Long value, boolean suffix) {
        addCriterion("updateUser", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public MenuWhereGroup andUpdateUserIn(List<Long> list) {
        addCriterion("updateUser", EnumOperator.IN, list);
        return this;
    }


    public MenuWhereGroup andUpdateUserNotIn(List<Long> list) {
        addCriterion("updateUser", EnumOperator.NOT_IN, list);
        return this;
    }

    public MenuWhereGroup andPidIsNull() {
        addCriterion("pid", EnumOperator.IS_NULL, null);
        return this;
    }

    public MenuWhereGroup andPidIsNotNull() {
        addCriterion("pid", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public MenuWhereGroup andPidEqualTo(Long value) {
        addCriterion("pid", EnumOperator.EQUAL, value);
        return this;
    }


    public MenuWhereGroup andPidNotEqualTo(Long value) {
        addCriterion("pid", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public MenuWhereGroup andPidBetween(Long value1, Long value2) {
        addCriterion("pid", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("pid", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public MenuWhereGroup andPidNotBetween(Long value1, Long value2) {
        addCriterion("pid", EnumOperator.LESS_THAN, value1);
        addCriterion("pid", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public MenuWhereGroup andPidLikeTo(Long value) {
        addCriterion("pid", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public MenuWhereGroup andPidLikeTo(boolean prefix, Long value) {
        addCriterion("pid", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public MenuWhereGroup andPidLikeTo(Long value, boolean suffix) {
        addCriterion("pid", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public MenuWhereGroup andPidNotLikeTo(Long value) {
        addCriterion("pid", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public MenuWhereGroup andPidNotLikeTo(boolean prefix, Long value) {
        addCriterion("pid", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public MenuWhereGroup andPidNotLikeTo(Long value, boolean suffix) {
        addCriterion("pid", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public MenuWhereGroup andPidIn(List<Long> list) {
        addCriterion("pid", EnumOperator.IN, list);
        return this;
    }


    public MenuWhereGroup andPidNotIn(List<Long> list) {
        addCriterion("pid", EnumOperator.NOT_IN, list);
        return this;
    }

    public MenuWhereGroup andNameIsNull() {
        addCriterion("name", EnumOperator.IS_NULL, null);
        return this;
    }

    public MenuWhereGroup andNameIsNotNull() {
        addCriterion("name", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public MenuWhereGroup andNameEqualTo(String value) {
        addCriterion("name", EnumOperator.EQUAL, value);
        return this;
    }


    public MenuWhereGroup andNameNotEqualTo(String value) {
        addCriterion("name", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public MenuWhereGroup andNameBetween(String value1, String value2) {
        addCriterion("name", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("name", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public MenuWhereGroup andNameNotBetween(String value1, String value2) {
        addCriterion("name", EnumOperator.LESS_THAN, value1);
        addCriterion("name", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public MenuWhereGroup andNameLikeTo(String value) {
        addCriterion("name", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public MenuWhereGroup andNameLikeTo(boolean prefix, String value) {
        addCriterion("name", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public MenuWhereGroup andNameLikeTo(String value, boolean suffix) {
        addCriterion("name", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public MenuWhereGroup andNameNotLikeTo(String value) {
        addCriterion("name", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public MenuWhereGroup andNameNotLikeTo(boolean prefix, String value) {
        addCriterion("name", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public MenuWhereGroup andNameNotLikeTo(String value, boolean suffix) {
        addCriterion("name", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public MenuWhereGroup andNameIn(List<String> list) {
        addCriterion("name", EnumOperator.IN, list);
        return this;
    }


    public MenuWhereGroup andNameNotIn(List<String> list) {
        addCriterion("name", EnumOperator.NOT_IN, list);
        return this;
    }

    public MenuWhereGroup andAccessIsNull() {
        addCriterion("access", EnumOperator.IS_NULL, null);
        return this;
    }

    public MenuWhereGroup andAccessIsNotNull() {
        addCriterion("access", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public MenuWhereGroup andAccessEqualTo(String value) {
        addCriterion("access", EnumOperator.EQUAL, value);
        return this;
    }


    public MenuWhereGroup andAccessNotEqualTo(String value) {
        addCriterion("access", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public MenuWhereGroup andAccessBetween(String value1, String value2) {
        addCriterion("access", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("access", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public MenuWhereGroup andAccessNotBetween(String value1, String value2) {
        addCriterion("access", EnumOperator.LESS_THAN, value1);
        addCriterion("access", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public MenuWhereGroup andAccessLikeTo(String value) {
        addCriterion("access", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public MenuWhereGroup andAccessLikeTo(boolean prefix, String value) {
        addCriterion("access", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public MenuWhereGroup andAccessLikeTo(String value, boolean suffix) {
        addCriterion("access", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public MenuWhereGroup andAccessNotLikeTo(String value) {
        addCriterion("access", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public MenuWhereGroup andAccessNotLikeTo(boolean prefix, String value) {
        addCriterion("access", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public MenuWhereGroup andAccessNotLikeTo(String value, boolean suffix) {
        addCriterion("access", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public MenuWhereGroup andAccessIn(List<String> list) {
        addCriterion("access", EnumOperator.IN, list);
        return this;
    }


    public MenuWhereGroup andAccessNotIn(List<String> list) {
        addCriterion("access", EnumOperator.NOT_IN, list);
        return this;
    }

    public MenuWhereGroup andTypeIsNull() {
        addCriterion("type", EnumOperator.IS_NULL, null);
        return this;
    }

    public MenuWhereGroup andTypeIsNotNull() {
        addCriterion("type", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public MenuWhereGroup andTypeEqualTo(Integer value) {
        addCriterion("type", EnumOperator.EQUAL, value);
        return this;
    }


    public MenuWhereGroup andTypeNotEqualTo(Integer value) {
        addCriterion("type", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public MenuWhereGroup andTypeBetween(Integer value1, Integer value2) {
        addCriterion("type", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("type", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public MenuWhereGroup andTypeNotBetween(Integer value1, Integer value2) {
        addCriterion("type", EnumOperator.LESS_THAN, value1);
        addCriterion("type", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public MenuWhereGroup andTypeLikeTo(Integer value) {
        addCriterion("type", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public MenuWhereGroup andTypeLikeTo(boolean prefix, Integer value) {
        addCriterion("type", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public MenuWhereGroup andTypeLikeTo(Integer value, boolean suffix) {
        addCriterion("type", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public MenuWhereGroup andTypeNotLikeTo(Integer value) {
        addCriterion("type", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public MenuWhereGroup andTypeNotLikeTo(boolean prefix, Integer value) {
        addCriterion("type", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public MenuWhereGroup andTypeNotLikeTo(Integer value, boolean suffix) {
        addCriterion("type", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public MenuWhereGroup andTypeIn(List<Integer> list) {
        addCriterion("type", EnumOperator.IN, list);
        return this;
    }


    public MenuWhereGroup andTypeNotIn(List<Integer> list) {
        addCriterion("type", EnumOperator.NOT_IN, list);
        return this;
    }

    public MenuWhereGroup andEnabledIsNull() {
        addCriterion("enabled", EnumOperator.IS_NULL, null);
        return this;
    }

    public MenuWhereGroup andEnabledIsNotNull() {
        addCriterion("enabled", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public MenuWhereGroup andEnabledEqualTo(Boolean value) {
        addCriterion("enabled", EnumOperator.EQUAL, value);
        return this;
    }


    public MenuWhereGroup andEnabledNotEqualTo(Boolean value) {
        addCriterion("enabled", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public MenuWhereGroup andEnabledBetween(Boolean value1, Boolean value2) {
        addCriterion("enabled", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("enabled", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public MenuWhereGroup andEnabledNotBetween(Boolean value1, Boolean value2) {
        addCriterion("enabled", EnumOperator.LESS_THAN, value1);
        addCriterion("enabled", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public MenuWhereGroup andEnabledLikeTo(Boolean value) {
        addCriterion("enabled", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public MenuWhereGroup andEnabledLikeTo(boolean prefix, Boolean value) {
        addCriterion("enabled", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public MenuWhereGroup andEnabledLikeTo(Boolean value, boolean suffix) {
        addCriterion("enabled", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public MenuWhereGroup andEnabledNotLikeTo(Boolean value) {
        addCriterion("enabled", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public MenuWhereGroup andEnabledNotLikeTo(boolean prefix, Boolean value) {
        addCriterion("enabled", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public MenuWhereGroup andEnabledNotLikeTo(Boolean value, boolean suffix) {
        addCriterion("enabled", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public MenuWhereGroup andEnabledIn(List<Boolean> list) {
        addCriterion("enabled", EnumOperator.IN, list);
        return this;
    }


    public MenuWhereGroup andEnabledNotIn(List<Boolean> list) {
        addCriterion("enabled", EnumOperator.NOT_IN, list);
        return this;
    }

    public MenuWhereGroup andDeletedIsNull() {
        addCriterion("deleted", EnumOperator.IS_NULL, null);
        return this;
    }

    public MenuWhereGroup andDeletedIsNotNull() {
        addCriterion("deleted", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public MenuWhereGroup andDeletedEqualTo(Boolean value) {
        addCriterion("deleted", EnumOperator.EQUAL, value);
        return this;
    }


    public MenuWhereGroup andDeletedNotEqualTo(Boolean value) {
        addCriterion("deleted", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public MenuWhereGroup andDeletedBetween(Boolean value1, Boolean value2) {
        addCriterion("deleted", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("deleted", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public MenuWhereGroup andDeletedNotBetween(Boolean value1, Boolean value2) {
        addCriterion("deleted", EnumOperator.LESS_THAN, value1);
        addCriterion("deleted", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public MenuWhereGroup andDeletedLikeTo(Boolean value) {
        addCriterion("deleted", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public MenuWhereGroup andDeletedLikeTo(boolean prefix, Boolean value) {
        addCriterion("deleted", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public MenuWhereGroup andDeletedLikeTo(Boolean value, boolean suffix) {
        addCriterion("deleted", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public MenuWhereGroup andDeletedNotLikeTo(Boolean value) {
        addCriterion("deleted", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public MenuWhereGroup andDeletedNotLikeTo(boolean prefix, Boolean value) {
        addCriterion("deleted", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public MenuWhereGroup andDeletedNotLikeTo(Boolean value, boolean suffix) {
        addCriterion("deleted", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public MenuWhereGroup andDeletedIn(List<Boolean> list) {
        addCriterion("deleted", EnumOperator.IN, list);
        return this;
    }


    public MenuWhereGroup andDeletedNotIn(List<Boolean> list) {
        addCriterion("deleted", EnumOperator.NOT_IN, list);
        return this;
    }


}
