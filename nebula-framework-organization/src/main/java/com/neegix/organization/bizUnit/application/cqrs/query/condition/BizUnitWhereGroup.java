package com.neegix.organization.bizUnit.application.cqrs.query.condition;

import com.neegix.application.query.EnumOperator;
import com.neegix.application.query.WhereGroups;
import java.time.Instant;
import java.util.List;

 /**
  * This file is auto-generated by nebula-framework-generator.
  * The auto-generation plugin was developed using IntelliJ IDEA Community Edition.
  * Thanks to JetBrains for their outstanding contributions to the developer community.
  * <p>
  * The code generated by this tool is owned by the user of the tool.
  * The tool itself is copyrighted by <a href="https://www.neegix.com">https://www.neegix.com</a>.
  *
  * @author <a href="https://www.neegix.com">https://www.neegix.com</a>
  * @version 1.0.0
  * @since 2024-12-10 10:58:59
  */

public class BizUnitWhereGroup extends WhereGroups {
    public BizUnitWhereGroup andIdIsNull() {
        addCriterion("id", EnumOperator.IS_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andIdIsNotNull() {
        addCriterion("id", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andIdEqualTo(Long value) {
        addCriterion("id", EnumOperator.EQUAL, value);
        return this;
    }


    public BizUnitWhereGroup andIdNotEqualTo(Long value) {
        addCriterion("id", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public BizUnitWhereGroup andIdBetween(Long value1, Long value2) {
        addCriterion("id", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("id", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public BizUnitWhereGroup andIdNotBetween(Long value1, Long value2) {
        addCriterion("id", EnumOperator.LESS_THAN, value1);
        addCriterion("id", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public BizUnitWhereGroup andIdLikeTo(Long value) {
        addCriterion("id", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andIdLikeTo(boolean prefix, Long value) {
        addCriterion("id", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andIdLikeTo(Long value, boolean suffix) {
        addCriterion("id", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public BizUnitWhereGroup andIdNotLikeTo(Long value) {
        addCriterion("id", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andIdNotLikeTo(boolean prefix, Long value) {
        addCriterion("id", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andIdNotLikeTo(Long value, boolean suffix) {
        addCriterion("id", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public BizUnitWhereGroup andIdIn(List<Long> list) {
        addCriterion("id", EnumOperator.IN, list);
        return this;
    }


    public BizUnitWhereGroup andIdNotIn(List<Long> list) {
        addCriterion("id", EnumOperator.NOT_IN, list);
        return this;
    }

    public BizUnitWhereGroup andCreateTimeIsNull() {
        addCriterion("create_time", EnumOperator.IS_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andCreateTimeIsNotNull() {
        addCriterion("create_time", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andCreateTimeEqualTo(Instant value) {
        addCriterion("create_time", EnumOperator.EQUAL, value);
        return this;
    }


    public BizUnitWhereGroup andCreateTimeNotEqualTo(Instant value) {
        addCriterion("create_time", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public BizUnitWhereGroup andCreateTimeBetween(Instant value1, Instant value2) {
        addCriterion("create_time", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("create_time", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public BizUnitWhereGroup andCreateTimeNotBetween(Instant value1, Instant value2) {
        addCriterion("create_time", EnumOperator.LESS_THAN, value1);
        addCriterion("create_time", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public BizUnitWhereGroup andCreateTimeLikeTo(Instant value) {
        addCriterion("create_time", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andCreateTimeLikeTo(boolean prefix, Instant value) {
        addCriterion("create_time", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andCreateTimeLikeTo(Instant value, boolean suffix) {
        addCriterion("create_time", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public BizUnitWhereGroup andCreateTimeNotLikeTo(Instant value) {
        addCriterion("create_time", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andCreateTimeNotLikeTo(boolean prefix, Instant value) {
        addCriterion("create_time", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andCreateTimeNotLikeTo(Instant value, boolean suffix) {
        addCriterion("create_time", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public BizUnitWhereGroup andCreateTimeIn(List<Instant> list) {
        addCriterion("create_time", EnumOperator.IN, list);
        return this;
    }


    public BizUnitWhereGroup andCreateTimeNotIn(List<Instant> list) {
        addCriterion("create_time", EnumOperator.NOT_IN, list);
        return this;
    }

    public BizUnitWhereGroup andUpdateTimeIsNull() {
        addCriterion("update_time", EnumOperator.IS_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andUpdateTimeIsNotNull() {
        addCriterion("update_time", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andUpdateTimeEqualTo(Instant value) {
        addCriterion("update_time", EnumOperator.EQUAL, value);
        return this;
    }


    public BizUnitWhereGroup andUpdateTimeNotEqualTo(Instant value) {
        addCriterion("update_time", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public BizUnitWhereGroup andUpdateTimeBetween(Instant value1, Instant value2) {
        addCriterion("update_time", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("update_time", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public BizUnitWhereGroup andUpdateTimeNotBetween(Instant value1, Instant value2) {
        addCriterion("update_time", EnumOperator.LESS_THAN, value1);
        addCriterion("update_time", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public BizUnitWhereGroup andUpdateTimeLikeTo(Instant value) {
        addCriterion("update_time", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andUpdateTimeLikeTo(boolean prefix, Instant value) {
        addCriterion("update_time", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andUpdateTimeLikeTo(Instant value, boolean suffix) {
        addCriterion("update_time", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public BizUnitWhereGroup andUpdateTimeNotLikeTo(Instant value) {
        addCriterion("update_time", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andUpdateTimeNotLikeTo(boolean prefix, Instant value) {
        addCriterion("update_time", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andUpdateTimeNotLikeTo(Instant value, boolean suffix) {
        addCriterion("update_time", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public BizUnitWhereGroup andUpdateTimeIn(List<Instant> list) {
        addCriterion("update_time", EnumOperator.IN, list);
        return this;
    }


    public BizUnitWhereGroup andUpdateTimeNotIn(List<Instant> list) {
        addCriterion("update_time", EnumOperator.NOT_IN, list);
        return this;
    }

    public BizUnitWhereGroup andCreateUserIsNull() {
        addCriterion("create_user", EnumOperator.IS_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andCreateUserIsNotNull() {
        addCriterion("create_user", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andCreateUserEqualTo(Long value) {
        addCriterion("create_user", EnumOperator.EQUAL, value);
        return this;
    }


    public BizUnitWhereGroup andCreateUserNotEqualTo(Long value) {
        addCriterion("create_user", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public BizUnitWhereGroup andCreateUserBetween(Long value1, Long value2) {
        addCriterion("create_user", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("create_user", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public BizUnitWhereGroup andCreateUserNotBetween(Long value1, Long value2) {
        addCriterion("create_user", EnumOperator.LESS_THAN, value1);
        addCriterion("create_user", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public BizUnitWhereGroup andCreateUserLikeTo(Long value) {
        addCriterion("create_user", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andCreateUserLikeTo(boolean prefix, Long value) {
        addCriterion("create_user", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andCreateUserLikeTo(Long value, boolean suffix) {
        addCriterion("create_user", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public BizUnitWhereGroup andCreateUserNotLikeTo(Long value) {
        addCriterion("create_user", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andCreateUserNotLikeTo(boolean prefix, Long value) {
        addCriterion("create_user", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andCreateUserNotLikeTo(Long value, boolean suffix) {
        addCriterion("create_user", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public BizUnitWhereGroup andCreateUserIn(List<Long> list) {
        addCriterion("create_user", EnumOperator.IN, list);
        return this;
    }


    public BizUnitWhereGroup andCreateUserNotIn(List<Long> list) {
        addCriterion("create_user", EnumOperator.NOT_IN, list);
        return this;
    }

    public BizUnitWhereGroup andUpdateUserIsNull() {
        addCriterion("update_user", EnumOperator.IS_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andUpdateUserIsNotNull() {
        addCriterion("update_user", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andUpdateUserEqualTo(Long value) {
        addCriterion("update_user", EnumOperator.EQUAL, value);
        return this;
    }


    public BizUnitWhereGroup andUpdateUserNotEqualTo(Long value) {
        addCriterion("update_user", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public BizUnitWhereGroup andUpdateUserBetween(Long value1, Long value2) {
        addCriterion("update_user", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("update_user", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public BizUnitWhereGroup andUpdateUserNotBetween(Long value1, Long value2) {
        addCriterion("update_user", EnumOperator.LESS_THAN, value1);
        addCriterion("update_user", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public BizUnitWhereGroup andUpdateUserLikeTo(Long value) {
        addCriterion("update_user", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andUpdateUserLikeTo(boolean prefix, Long value) {
        addCriterion("update_user", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andUpdateUserLikeTo(Long value, boolean suffix) {
        addCriterion("update_user", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public BizUnitWhereGroup andUpdateUserNotLikeTo(Long value) {
        addCriterion("update_user", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andUpdateUserNotLikeTo(boolean prefix, Long value) {
        addCriterion("update_user", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andUpdateUserNotLikeTo(Long value, boolean suffix) {
        addCriterion("update_user", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public BizUnitWhereGroup andUpdateUserIn(List<Long> list) {
        addCriterion("update_user", EnumOperator.IN, list);
        return this;
    }


    public BizUnitWhereGroup andUpdateUserNotIn(List<Long> list) {
        addCriterion("update_user", EnumOperator.NOT_IN, list);
        return this;
    }

    public BizUnitWhereGroup andPidIsNull() {
        addCriterion("pid", EnumOperator.IS_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andPidIsNotNull() {
        addCriterion("pid", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andPidEqualTo(Long value) {
        addCriterion("pid", EnumOperator.EQUAL, value);
        return this;
    }


    public BizUnitWhereGroup andPidNotEqualTo(Long value) {
        addCriterion("pid", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public BizUnitWhereGroup andPidBetween(Long value1, Long value2) {
        addCriterion("pid", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("pid", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public BizUnitWhereGroup andPidNotBetween(Long value1, Long value2) {
        addCriterion("pid", EnumOperator.LESS_THAN, value1);
        addCriterion("pid", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public BizUnitWhereGroup andPidLikeTo(Long value) {
        addCriterion("pid", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andPidLikeTo(boolean prefix, Long value) {
        addCriterion("pid", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andPidLikeTo(Long value, boolean suffix) {
        addCriterion("pid", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public BizUnitWhereGroup andPidNotLikeTo(Long value) {
        addCriterion("pid", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andPidNotLikeTo(boolean prefix, Long value) {
        addCriterion("pid", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andPidNotLikeTo(Long value, boolean suffix) {
        addCriterion("pid", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public BizUnitWhereGroup andPidIn(List<Long> list) {
        addCriterion("pid", EnumOperator.IN, list);
        return this;
    }


    public BizUnitWhereGroup andPidNotIn(List<Long> list) {
        addCriterion("pid", EnumOperator.NOT_IN, list);
        return this;
    }

    public BizUnitWhereGroup andCodeIsNull() {
        addCriterion("code", EnumOperator.IS_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andCodeIsNotNull() {
        addCriterion("code", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andCodeEqualTo(String value) {
        addCriterion("code", EnumOperator.EQUAL, value);
        return this;
    }


    public BizUnitWhereGroup andCodeNotEqualTo(String value) {
        addCriterion("code", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public BizUnitWhereGroup andCodeBetween(String value1, String value2) {
        addCriterion("code", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("code", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public BizUnitWhereGroup andCodeNotBetween(String value1, String value2) {
        addCriterion("code", EnumOperator.LESS_THAN, value1);
        addCriterion("code", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public BizUnitWhereGroup andCodeLikeTo(String value) {
        addCriterion("code", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andCodeLikeTo(boolean prefix, String value) {
        addCriterion("code", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andCodeLikeTo(String value, boolean suffix) {
        addCriterion("code", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public BizUnitWhereGroup andCodeNotLikeTo(String value) {
        addCriterion("code", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andCodeNotLikeTo(boolean prefix, String value) {
        addCriterion("code", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andCodeNotLikeTo(String value, boolean suffix) {
        addCriterion("code", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public BizUnitWhereGroup andCodeIn(List<String> list) {
        addCriterion("code", EnumOperator.IN, list);
        return this;
    }


    public BizUnitWhereGroup andCodeNotIn(List<String> list) {
        addCriterion("code", EnumOperator.NOT_IN, list);
        return this;
    }

    public BizUnitWhereGroup andNameIsNull() {
        addCriterion("name", EnumOperator.IS_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andNameIsNotNull() {
        addCriterion("name", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andNameEqualTo(String value) {
        addCriterion("name", EnumOperator.EQUAL, value);
        return this;
    }


    public BizUnitWhereGroup andNameNotEqualTo(String value) {
        addCriterion("name", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public BizUnitWhereGroup andNameBetween(String value1, String value2) {
        addCriterion("name", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("name", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public BizUnitWhereGroup andNameNotBetween(String value1, String value2) {
        addCriterion("name", EnumOperator.LESS_THAN, value1);
        addCriterion("name", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public BizUnitWhereGroup andNameLikeTo(String value) {
        addCriterion("name", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andNameLikeTo(boolean prefix, String value) {
        addCriterion("name", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andNameLikeTo(String value, boolean suffix) {
        addCriterion("name", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public BizUnitWhereGroup andNameNotLikeTo(String value) {
        addCriterion("name", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andNameNotLikeTo(boolean prefix, String value) {
        addCriterion("name", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andNameNotLikeTo(String value, boolean suffix) {
        addCriterion("name", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public BizUnitWhereGroup andNameIn(List<String> list) {
        addCriterion("name", EnumOperator.IN, list);
        return this;
    }


    public BizUnitWhereGroup andNameNotIn(List<String> list) {
        addCriterion("name", EnumOperator.NOT_IN, list);
        return this;
    }

    public BizUnitWhereGroup andAbbreviationIsNull() {
        addCriterion("abbreviation", EnumOperator.IS_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andAbbreviationIsNotNull() {
        addCriterion("abbreviation", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andAbbreviationEqualTo(String value) {
        addCriterion("abbreviation", EnumOperator.EQUAL, value);
        return this;
    }


    public BizUnitWhereGroup andAbbreviationNotEqualTo(String value) {
        addCriterion("abbreviation", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public BizUnitWhereGroup andAbbreviationBetween(String value1, String value2) {
        addCriterion("abbreviation", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("abbreviation", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public BizUnitWhereGroup andAbbreviationNotBetween(String value1, String value2) {
        addCriterion("abbreviation", EnumOperator.LESS_THAN, value1);
        addCriterion("abbreviation", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public BizUnitWhereGroup andAbbreviationLikeTo(String value) {
        addCriterion("abbreviation", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andAbbreviationLikeTo(boolean prefix, String value) {
        addCriterion("abbreviation", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andAbbreviationLikeTo(String value, boolean suffix) {
        addCriterion("abbreviation", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public BizUnitWhereGroup andAbbreviationNotLikeTo(String value) {
        addCriterion("abbreviation", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andAbbreviationNotLikeTo(boolean prefix, String value) {
        addCriterion("abbreviation", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andAbbreviationNotLikeTo(String value, boolean suffix) {
        addCriterion("abbreviation", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public BizUnitWhereGroup andAbbreviationIn(List<String> list) {
        addCriterion("abbreviation", EnumOperator.IN, list);
        return this;
    }


    public BizUnitWhereGroup andAbbreviationNotIn(List<String> list) {
        addCriterion("abbreviation", EnumOperator.NOT_IN, list);
        return this;
    }

    public BizUnitWhereGroup andTelIsNull() {
        addCriterion("tel", EnumOperator.IS_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andTelIsNotNull() {
        addCriterion("tel", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andTelEqualTo(String value) {
        addCriterion("tel", EnumOperator.EQUAL, value);
        return this;
    }


    public BizUnitWhereGroup andTelNotEqualTo(String value) {
        addCriterion("tel", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public BizUnitWhereGroup andTelBetween(String value1, String value2) {
        addCriterion("tel", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("tel", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public BizUnitWhereGroup andTelNotBetween(String value1, String value2) {
        addCriterion("tel", EnumOperator.LESS_THAN, value1);
        addCriterion("tel", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public BizUnitWhereGroup andTelLikeTo(String value) {
        addCriterion("tel", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andTelLikeTo(boolean prefix, String value) {
        addCriterion("tel", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andTelLikeTo(String value, boolean suffix) {
        addCriterion("tel", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public BizUnitWhereGroup andTelNotLikeTo(String value) {
        addCriterion("tel", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andTelNotLikeTo(boolean prefix, String value) {
        addCriterion("tel", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andTelNotLikeTo(String value, boolean suffix) {
        addCriterion("tel", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public BizUnitWhereGroup andTelIn(List<String> list) {
        addCriterion("tel", EnumOperator.IN, list);
        return this;
    }


    public BizUnitWhereGroup andTelNotIn(List<String> list) {
        addCriterion("tel", EnumOperator.NOT_IN, list);
        return this;
    }

    public BizUnitWhereGroup andManagerIsNull() {
        addCriterion("manager", EnumOperator.IS_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andManagerIsNotNull() {
        addCriterion("manager", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andManagerEqualTo(String value) {
        addCriterion("manager", EnumOperator.EQUAL, value);
        return this;
    }


    public BizUnitWhereGroup andManagerNotEqualTo(String value) {
        addCriterion("manager", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public BizUnitWhereGroup andManagerBetween(String value1, String value2) {
        addCriterion("manager", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("manager", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public BizUnitWhereGroup andManagerNotBetween(String value1, String value2) {
        addCriterion("manager", EnumOperator.LESS_THAN, value1);
        addCriterion("manager", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public BizUnitWhereGroup andManagerLikeTo(String value) {
        addCriterion("manager", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andManagerLikeTo(boolean prefix, String value) {
        addCriterion("manager", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andManagerLikeTo(String value, boolean suffix) {
        addCriterion("manager", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public BizUnitWhereGroup andManagerNotLikeTo(String value) {
        addCriterion("manager", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andManagerNotLikeTo(boolean prefix, String value) {
        addCriterion("manager", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andManagerNotLikeTo(String value, boolean suffix) {
        addCriterion("manager", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public BizUnitWhereGroup andManagerIn(List<String> list) {
        addCriterion("manager", EnumOperator.IN, list);
        return this;
    }


    public BizUnitWhereGroup andManagerNotIn(List<String> list) {
        addCriterion("manager", EnumOperator.NOT_IN, list);
        return this;
    }

    public BizUnitWhereGroup andMobilePhoneIsNull() {
        addCriterion("mobile_phone", EnumOperator.IS_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andMobilePhoneIsNotNull() {
        addCriterion("mobile_phone", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andMobilePhoneEqualTo(String value) {
        addCriterion("mobile_phone", EnumOperator.EQUAL, value);
        return this;
    }


    public BizUnitWhereGroup andMobilePhoneNotEqualTo(String value) {
        addCriterion("mobile_phone", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public BizUnitWhereGroup andMobilePhoneBetween(String value1, String value2) {
        addCriterion("mobile_phone", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("mobile_phone", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public BizUnitWhereGroup andMobilePhoneNotBetween(String value1, String value2) {
        addCriterion("mobile_phone", EnumOperator.LESS_THAN, value1);
        addCriterion("mobile_phone", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public BizUnitWhereGroup andMobilePhoneLikeTo(String value) {
        addCriterion("mobile_phone", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andMobilePhoneLikeTo(boolean prefix, String value) {
        addCriterion("mobile_phone", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andMobilePhoneLikeTo(String value, boolean suffix) {
        addCriterion("mobile_phone", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public BizUnitWhereGroup andMobilePhoneNotLikeTo(String value) {
        addCriterion("mobile_phone", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andMobilePhoneNotLikeTo(boolean prefix, String value) {
        addCriterion("mobile_phone", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andMobilePhoneNotLikeTo(String value, boolean suffix) {
        addCriterion("mobile_phone", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public BizUnitWhereGroup andMobilePhoneIn(List<String> list) {
        addCriterion("mobile_phone", EnumOperator.IN, list);
        return this;
    }


    public BizUnitWhereGroup andMobilePhoneNotIn(List<String> list) {
        addCriterion("mobile_phone", EnumOperator.NOT_IN, list);
        return this;
    }

    public BizUnitWhereGroup andRemarkIsNull() {
        addCriterion("remark", EnumOperator.IS_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andRemarkIsNotNull() {
        addCriterion("remark", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andRemarkEqualTo(String value) {
        addCriterion("remark", EnumOperator.EQUAL, value);
        return this;
    }


    public BizUnitWhereGroup andRemarkNotEqualTo(String value) {
        addCriterion("remark", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public BizUnitWhereGroup andRemarkBetween(String value1, String value2) {
        addCriterion("remark", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("remark", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public BizUnitWhereGroup andRemarkNotBetween(String value1, String value2) {
        addCriterion("remark", EnumOperator.LESS_THAN, value1);
        addCriterion("remark", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public BizUnitWhereGroup andRemarkLikeTo(String value) {
        addCriterion("remark", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andRemarkLikeTo(boolean prefix, String value) {
        addCriterion("remark", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andRemarkLikeTo(String value, boolean suffix) {
        addCriterion("remark", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public BizUnitWhereGroup andRemarkNotLikeTo(String value) {
        addCriterion("remark", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andRemarkNotLikeTo(boolean prefix, String value) {
        addCriterion("remark", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andRemarkNotLikeTo(String value, boolean suffix) {
        addCriterion("remark", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public BizUnitWhereGroup andRemarkIn(List<String> list) {
        addCriterion("remark", EnumOperator.IN, list);
        return this;
    }


    public BizUnitWhereGroup andRemarkNotIn(List<String> list) {
        addCriterion("remark", EnumOperator.NOT_IN, list);
        return this;
    }

    public BizUnitWhereGroup andTypeIsNull() {
        addCriterion("type", EnumOperator.IS_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andTypeIsNotNull() {
        addCriterion("type", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andTypeEqualTo(Integer value) {
        addCriterion("type", EnumOperator.EQUAL, value);
        return this;
    }


    public BizUnitWhereGroup andTypeNotEqualTo(Integer value) {
        addCriterion("type", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public BizUnitWhereGroup andTypeBetween(Integer value1, Integer value2) {
        addCriterion("type", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("type", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public BizUnitWhereGroup andTypeNotBetween(Integer value1, Integer value2) {
        addCriterion("type", EnumOperator.LESS_THAN, value1);
        addCriterion("type", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public BizUnitWhereGroup andTypeLikeTo(Integer value) {
        addCriterion("type", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andTypeLikeTo(boolean prefix, Integer value) {
        addCriterion("type", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andTypeLikeTo(Integer value, boolean suffix) {
        addCriterion("type", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public BizUnitWhereGroup andTypeNotLikeTo(Integer value) {
        addCriterion("type", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andTypeNotLikeTo(boolean prefix, Integer value) {
        addCriterion("type", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andTypeNotLikeTo(Integer value, boolean suffix) {
        addCriterion("type", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public BizUnitWhereGroup andTypeIn(List<Integer> list) {
        addCriterion("type", EnumOperator.IN, list);
        return this;
    }


    public BizUnitWhereGroup andTypeNotIn(List<Integer> list) {
        addCriterion("type", EnumOperator.NOT_IN, list);
        return this;
    }

    public BizUnitWhereGroup andEnabledIsNull() {
        addCriterion("enabled", EnumOperator.IS_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andEnabledIsNotNull() {
        addCriterion("enabled", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andEnabledEqualTo(Boolean value) {
        addCriterion("enabled", EnumOperator.EQUAL, value);
        return this;
    }


    public BizUnitWhereGroup andEnabledNotEqualTo(Boolean value) {
        addCriterion("enabled", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public BizUnitWhereGroup andEnabledBetween(Boolean value1, Boolean value2) {
        addCriterion("enabled", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("enabled", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public BizUnitWhereGroup andEnabledNotBetween(Boolean value1, Boolean value2) {
        addCriterion("enabled", EnumOperator.LESS_THAN, value1);
        addCriterion("enabled", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public BizUnitWhereGroup andEnabledLikeTo(Boolean value) {
        addCriterion("enabled", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andEnabledLikeTo(boolean prefix, Boolean value) {
        addCriterion("enabled", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andEnabledLikeTo(Boolean value, boolean suffix) {
        addCriterion("enabled", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public BizUnitWhereGroup andEnabledNotLikeTo(Boolean value) {
        addCriterion("enabled", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andEnabledNotLikeTo(boolean prefix, Boolean value) {
        addCriterion("enabled", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andEnabledNotLikeTo(Boolean value, boolean suffix) {
        addCriterion("enabled", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public BizUnitWhereGroup andEnabledIn(List<Boolean> list) {
        addCriterion("enabled", EnumOperator.IN, list);
        return this;
    }


    public BizUnitWhereGroup andEnabledNotIn(List<Boolean> list) {
        addCriterion("enabled", EnumOperator.NOT_IN, list);
        return this;
    }

    public BizUnitWhereGroup andDeletedIsNull() {
        addCriterion("deleted", EnumOperator.IS_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andDeletedIsNotNull() {
        addCriterion("deleted", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public BizUnitWhereGroup andDeletedEqualTo(Boolean value) {
        addCriterion("deleted", EnumOperator.EQUAL, value);
        return this;
    }


    public BizUnitWhereGroup andDeletedNotEqualTo(Boolean value) {
        addCriterion("deleted", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public BizUnitWhereGroup andDeletedBetween(Boolean value1, Boolean value2) {
        addCriterion("deleted", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("deleted", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public BizUnitWhereGroup andDeletedNotBetween(Boolean value1, Boolean value2) {
        addCriterion("deleted", EnumOperator.LESS_THAN, value1);
        addCriterion("deleted", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public BizUnitWhereGroup andDeletedLikeTo(Boolean value) {
        addCriterion("deleted", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andDeletedLikeTo(boolean prefix, Boolean value) {
        addCriterion("deleted", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andDeletedLikeTo(Boolean value, boolean suffix) {
        addCriterion("deleted", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public BizUnitWhereGroup andDeletedNotLikeTo(Boolean value) {
        addCriterion("deleted", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public BizUnitWhereGroup andDeletedNotLikeTo(boolean prefix, Boolean value) {
        addCriterion("deleted", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public BizUnitWhereGroup andDeletedNotLikeTo(Boolean value, boolean suffix) {
        addCriterion("deleted", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public BizUnitWhereGroup andDeletedIn(List<Boolean> list) {
        addCriterion("deleted", EnumOperator.IN, list);
        return this;
    }


    public BizUnitWhereGroup andDeletedNotIn(List<Boolean> list) {
        addCriterion("deleted", EnumOperator.NOT_IN, list);
        return this;
    }


}
