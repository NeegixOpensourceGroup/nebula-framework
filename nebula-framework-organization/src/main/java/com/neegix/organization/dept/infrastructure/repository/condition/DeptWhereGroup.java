package com.neegix.organization.dept.infrastructure.repository.condition;

import com.neegix.application.query.EnumOperator;
import com.neegix.application.query.WhereGroups;
import java.time.Instant;
import java.util.List;

 /**
  * This file is auto-generated by nebula-framework-generator.
  * The auto-generation plugin was developed using IntelliJ IDEA Community Edition.
  * Thanks to JetBrains for their outstanding contributions to the developer community.
  * <p>
  * The code generated by this tool is owned by the user of the tool.
  * The tool itself is copyrighted by <a href="https://www.neegix.com">https://www.neegix.com</a>.
  *
  * @author <a href="https://www.neegix.com">https://www.neegix.com</a>
  * @version 1.0.0
  * @since 2024-12-10 14:48:03
  */

public class DeptWhereGroup extends WhereGroups {
    public DeptWhereGroup andAbbreviationIsNull() {
        addCriterion("abbreviation", EnumOperator.IS_NULL, null);
        return this;
    }

    public DeptWhereGroup andAbbreviationIsNotNull() {
        addCriterion("abbreviation", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public DeptWhereGroup andAbbreviationEqualTo(String value) {
        addCriterion("abbreviation", EnumOperator.EQUAL, value);
        return this;
    }


    public DeptWhereGroup andAbbreviationNotEqualTo(String value) {
        addCriterion("abbreviation", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public DeptWhereGroup andAbbreviationBetween(String value1, String value2) {
        addCriterion("abbreviation", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("abbreviation", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public DeptWhereGroup andAbbreviationNotBetween(String value1, String value2) {
        addCriterion("abbreviation", EnumOperator.LESS_THAN, value1);
        addCriterion("abbreviation", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public DeptWhereGroup andAbbreviationLikeTo(String value) {
        addCriterion("abbreviation", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public DeptWhereGroup andAbbreviationLikeTo(boolean prefix, String value) {
        addCriterion("abbreviation", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public DeptWhereGroup andAbbreviationLikeTo(String value, boolean suffix) {
        addCriterion("abbreviation", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public DeptWhereGroup andAbbreviationNotLikeTo(String value) {
        addCriterion("abbreviation", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public DeptWhereGroup andAbbreviationNotLikeTo(boolean prefix, String value) {
        addCriterion("abbreviation", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public DeptWhereGroup andAbbreviationNotLikeTo(String value, boolean suffix) {
        addCriterion("abbreviation", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public DeptWhereGroup andAbbreviationIn(List<String> list) {
        addCriterion("abbreviation", EnumOperator.IN, list);
        return this;
    }


    public DeptWhereGroup andAbbreviationNotIn(List<String> list) {
        addCriterion("abbreviation", EnumOperator.NOT_IN, list);
        return this;
    }

    public DeptWhereGroup andCodeIsNull() {
        addCriterion("code", EnumOperator.IS_NULL, null);
        return this;
    }

    public DeptWhereGroup andCodeIsNotNull() {
        addCriterion("code", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public DeptWhereGroup andCodeEqualTo(String value) {
        addCriterion("code", EnumOperator.EQUAL, value);
        return this;
    }


    public DeptWhereGroup andCodeNotEqualTo(String value) {
        addCriterion("code", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public DeptWhereGroup andCodeBetween(String value1, String value2) {
        addCriterion("code", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("code", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public DeptWhereGroup andCodeNotBetween(String value1, String value2) {
        addCriterion("code", EnumOperator.LESS_THAN, value1);
        addCriterion("code", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public DeptWhereGroup andCodeLikeTo(String value) {
        addCriterion("code", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public DeptWhereGroup andCodeLikeTo(boolean prefix, String value) {
        addCriterion("code", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public DeptWhereGroup andCodeLikeTo(String value, boolean suffix) {
        addCriterion("code", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public DeptWhereGroup andCodeNotLikeTo(String value) {
        addCriterion("code", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public DeptWhereGroup andCodeNotLikeTo(boolean prefix, String value) {
        addCriterion("code", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public DeptWhereGroup andCodeNotLikeTo(String value, boolean suffix) {
        addCriterion("code", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public DeptWhereGroup andCodeIn(List<String> list) {
        addCriterion("code", EnumOperator.IN, list);
        return this;
    }


    public DeptWhereGroup andCodeNotIn(List<String> list) {
        addCriterion("code", EnumOperator.NOT_IN, list);
        return this;
    }

    public DeptWhereGroup andCreateTimeIsNull() {
        addCriterion("create_time", EnumOperator.IS_NULL, null);
        return this;
    }

    public DeptWhereGroup andCreateTimeIsNotNull() {
        addCriterion("create_time", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public DeptWhereGroup andCreateTimeEqualTo(Instant value) {
        addCriterion("create_time", EnumOperator.EQUAL, value);
        return this;
    }


    public DeptWhereGroup andCreateTimeNotEqualTo(Instant value) {
        addCriterion("create_time", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public DeptWhereGroup andCreateTimeBetween(Instant value1, Instant value2) {
        addCriterion("create_time", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("create_time", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public DeptWhereGroup andCreateTimeNotBetween(Instant value1, Instant value2) {
        addCriterion("create_time", EnumOperator.LESS_THAN, value1);
        addCriterion("create_time", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public DeptWhereGroup andCreateTimeLikeTo(Instant value) {
        addCriterion("create_time", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public DeptWhereGroup andCreateTimeLikeTo(boolean prefix, Instant value) {
        addCriterion("create_time", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public DeptWhereGroup andCreateTimeLikeTo(Instant value, boolean suffix) {
        addCriterion("create_time", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public DeptWhereGroup andCreateTimeNotLikeTo(Instant value) {
        addCriterion("create_time", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public DeptWhereGroup andCreateTimeNotLikeTo(boolean prefix, Instant value) {
        addCriterion("create_time", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public DeptWhereGroup andCreateTimeNotLikeTo(Instant value, boolean suffix) {
        addCriterion("create_time", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public DeptWhereGroup andCreateTimeIn(List<Instant> list) {
        addCriterion("create_time", EnumOperator.IN, list);
        return this;
    }


    public DeptWhereGroup andCreateTimeNotIn(List<Instant> list) {
        addCriterion("create_time", EnumOperator.NOT_IN, list);
        return this;
    }

    public DeptWhereGroup andCreateUserIsNull() {
        addCriterion("create_user", EnumOperator.IS_NULL, null);
        return this;
    }

    public DeptWhereGroup andCreateUserIsNotNull() {
        addCriterion("create_user", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public DeptWhereGroup andCreateUserEqualTo(Long value) {
        addCriterion("create_user", EnumOperator.EQUAL, value);
        return this;
    }


    public DeptWhereGroup andCreateUserNotEqualTo(Long value) {
        addCriterion("create_user", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public DeptWhereGroup andCreateUserBetween(Long value1, Long value2) {
        addCriterion("create_user", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("create_user", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public DeptWhereGroup andCreateUserNotBetween(Long value1, Long value2) {
        addCriterion("create_user", EnumOperator.LESS_THAN, value1);
        addCriterion("create_user", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public DeptWhereGroup andCreateUserLikeTo(Long value) {
        addCriterion("create_user", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public DeptWhereGroup andCreateUserLikeTo(boolean prefix, Long value) {
        addCriterion("create_user", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public DeptWhereGroup andCreateUserLikeTo(Long value, boolean suffix) {
        addCriterion("create_user", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public DeptWhereGroup andCreateUserNotLikeTo(Long value) {
        addCriterion("create_user", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public DeptWhereGroup andCreateUserNotLikeTo(boolean prefix, Long value) {
        addCriterion("create_user", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public DeptWhereGroup andCreateUserNotLikeTo(Long value, boolean suffix) {
        addCriterion("create_user", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public DeptWhereGroup andCreateUserIn(List<Long> list) {
        addCriterion("create_user", EnumOperator.IN, list);
        return this;
    }


    public DeptWhereGroup andCreateUserNotIn(List<Long> list) {
        addCriterion("create_user", EnumOperator.NOT_IN, list);
        return this;
    }

    public DeptWhereGroup andDeletedIsNull() {
        addCriterion("deleted", EnumOperator.IS_NULL, null);
        return this;
    }

    public DeptWhereGroup andDeletedIsNotNull() {
        addCriterion("deleted", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public DeptWhereGroup andDeletedEqualTo(Boolean value) {
        addCriterion("deleted", EnumOperator.EQUAL, value);
        return this;
    }


    public DeptWhereGroup andDeletedNotEqualTo(Boolean value) {
        addCriterion("deleted", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public DeptWhereGroup andDeletedBetween(Boolean value1, Boolean value2) {
        addCriterion("deleted", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("deleted", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public DeptWhereGroup andDeletedNotBetween(Boolean value1, Boolean value2) {
        addCriterion("deleted", EnumOperator.LESS_THAN, value1);
        addCriterion("deleted", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public DeptWhereGroup andDeletedLikeTo(Boolean value) {
        addCriterion("deleted", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public DeptWhereGroup andDeletedLikeTo(boolean prefix, Boolean value) {
        addCriterion("deleted", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public DeptWhereGroup andDeletedLikeTo(Boolean value, boolean suffix) {
        addCriterion("deleted", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public DeptWhereGroup andDeletedNotLikeTo(Boolean value) {
        addCriterion("deleted", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public DeptWhereGroup andDeletedNotLikeTo(boolean prefix, Boolean value) {
        addCriterion("deleted", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public DeptWhereGroup andDeletedNotLikeTo(Boolean value, boolean suffix) {
        addCriterion("deleted", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public DeptWhereGroup andDeletedIn(List<Boolean> list) {
        addCriterion("deleted", EnumOperator.IN, list);
        return this;
    }


    public DeptWhereGroup andDeletedNotIn(List<Boolean> list) {
        addCriterion("deleted", EnumOperator.NOT_IN, list);
        return this;
    }

    public DeptWhereGroup andEnabledIsNull() {
        addCriterion("enabled", EnumOperator.IS_NULL, null);
        return this;
    }

    public DeptWhereGroup andEnabledIsNotNull() {
        addCriterion("enabled", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public DeptWhereGroup andEnabledEqualTo(Boolean value) {
        addCriterion("enabled", EnumOperator.EQUAL, value);
        return this;
    }


    public DeptWhereGroup andEnabledNotEqualTo(Boolean value) {
        addCriterion("enabled", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public DeptWhereGroup andEnabledBetween(Boolean value1, Boolean value2) {
        addCriterion("enabled", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("enabled", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public DeptWhereGroup andEnabledNotBetween(Boolean value1, Boolean value2) {
        addCriterion("enabled", EnumOperator.LESS_THAN, value1);
        addCriterion("enabled", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public DeptWhereGroup andEnabledLikeTo(Boolean value) {
        addCriterion("enabled", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public DeptWhereGroup andEnabledLikeTo(boolean prefix, Boolean value) {
        addCriterion("enabled", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public DeptWhereGroup andEnabledLikeTo(Boolean value, boolean suffix) {
        addCriterion("enabled", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public DeptWhereGroup andEnabledNotLikeTo(Boolean value) {
        addCriterion("enabled", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public DeptWhereGroup andEnabledNotLikeTo(boolean prefix, Boolean value) {
        addCriterion("enabled", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public DeptWhereGroup andEnabledNotLikeTo(Boolean value, boolean suffix) {
        addCriterion("enabled", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public DeptWhereGroup andEnabledIn(List<Boolean> list) {
        addCriterion("enabled", EnumOperator.IN, list);
        return this;
    }


    public DeptWhereGroup andEnabledNotIn(List<Boolean> list) {
        addCriterion("enabled", EnumOperator.NOT_IN, list);
        return this;
    }

    public DeptWhereGroup andIdIsNull() {
        addCriterion("id", EnumOperator.IS_NULL, null);
        return this;
    }

    public DeptWhereGroup andIdIsNotNull() {
        addCriterion("id", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public DeptWhereGroup andIdEqualTo(Long value) {
        addCriterion("id", EnumOperator.EQUAL, value);
        return this;
    }


    public DeptWhereGroup andIdNotEqualTo(Long value) {
        addCriterion("id", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public DeptWhereGroup andIdBetween(Long value1, Long value2) {
        addCriterion("id", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("id", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public DeptWhereGroup andIdNotBetween(Long value1, Long value2) {
        addCriterion("id", EnumOperator.LESS_THAN, value1);
        addCriterion("id", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public DeptWhereGroup andIdLikeTo(Long value) {
        addCriterion("id", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public DeptWhereGroup andIdLikeTo(boolean prefix, Long value) {
        addCriterion("id", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public DeptWhereGroup andIdLikeTo(Long value, boolean suffix) {
        addCriterion("id", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public DeptWhereGroup andIdNotLikeTo(Long value) {
        addCriterion("id", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public DeptWhereGroup andIdNotLikeTo(boolean prefix, Long value) {
        addCriterion("id", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public DeptWhereGroup andIdNotLikeTo(Long value, boolean suffix) {
        addCriterion("id", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public DeptWhereGroup andIdIn(List<Long> list) {
        addCriterion("id", EnumOperator.IN, list);
        return this;
    }


    public DeptWhereGroup andIdNotIn(List<Long> list) {
        addCriterion("id", EnumOperator.NOT_IN, list);
        return this;
    }

    public DeptWhereGroup andManagerIsNull() {
        addCriterion("manager", EnumOperator.IS_NULL, null);
        return this;
    }

    public DeptWhereGroup andManagerIsNotNull() {
        addCriterion("manager", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public DeptWhereGroup andManagerEqualTo(String value) {
        addCriterion("manager", EnumOperator.EQUAL, value);
        return this;
    }


    public DeptWhereGroup andManagerNotEqualTo(String value) {
        addCriterion("manager", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public DeptWhereGroup andManagerBetween(String value1, String value2) {
        addCriterion("manager", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("manager", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public DeptWhereGroup andManagerNotBetween(String value1, String value2) {
        addCriterion("manager", EnumOperator.LESS_THAN, value1);
        addCriterion("manager", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public DeptWhereGroup andManagerLikeTo(String value) {
        addCriterion("manager", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public DeptWhereGroup andManagerLikeTo(boolean prefix, String value) {
        addCriterion("manager", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public DeptWhereGroup andManagerLikeTo(String value, boolean suffix) {
        addCriterion("manager", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public DeptWhereGroup andManagerNotLikeTo(String value) {
        addCriterion("manager", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public DeptWhereGroup andManagerNotLikeTo(boolean prefix, String value) {
        addCriterion("manager", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public DeptWhereGroup andManagerNotLikeTo(String value, boolean suffix) {
        addCriterion("manager", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public DeptWhereGroup andManagerIn(List<String> list) {
        addCriterion("manager", EnumOperator.IN, list);
        return this;
    }


    public DeptWhereGroup andManagerNotIn(List<String> list) {
        addCriterion("manager", EnumOperator.NOT_IN, list);
        return this;
    }

    public DeptWhereGroup andMobilePhoneIsNull() {
        addCriterion("mobile_phone", EnumOperator.IS_NULL, null);
        return this;
    }

    public DeptWhereGroup andMobilePhoneIsNotNull() {
        addCriterion("mobile_phone", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public DeptWhereGroup andMobilePhoneEqualTo(String value) {
        addCriterion("mobile_phone", EnumOperator.EQUAL, value);
        return this;
    }


    public DeptWhereGroup andMobilePhoneNotEqualTo(String value) {
        addCriterion("mobile_phone", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public DeptWhereGroup andMobilePhoneBetween(String value1, String value2) {
        addCriterion("mobile_phone", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("mobile_phone", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public DeptWhereGroup andMobilePhoneNotBetween(String value1, String value2) {
        addCriterion("mobile_phone", EnumOperator.LESS_THAN, value1);
        addCriterion("mobile_phone", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public DeptWhereGroup andMobilePhoneLikeTo(String value) {
        addCriterion("mobile_phone", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public DeptWhereGroup andMobilePhoneLikeTo(boolean prefix, String value) {
        addCriterion("mobile_phone", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public DeptWhereGroup andMobilePhoneLikeTo(String value, boolean suffix) {
        addCriterion("mobile_phone", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public DeptWhereGroup andMobilePhoneNotLikeTo(String value) {
        addCriterion("mobile_phone", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public DeptWhereGroup andMobilePhoneNotLikeTo(boolean prefix, String value) {
        addCriterion("mobile_phone", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public DeptWhereGroup andMobilePhoneNotLikeTo(String value, boolean suffix) {
        addCriterion("mobile_phone", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public DeptWhereGroup andMobilePhoneIn(List<String> list) {
        addCriterion("mobile_phone", EnumOperator.IN, list);
        return this;
    }


    public DeptWhereGroup andMobilePhoneNotIn(List<String> list) {
        addCriterion("mobile_phone", EnumOperator.NOT_IN, list);
        return this;
    }

    public DeptWhereGroup andNameIsNull() {
        addCriterion("name", EnumOperator.IS_NULL, null);
        return this;
    }

    public DeptWhereGroup andNameIsNotNull() {
        addCriterion("name", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public DeptWhereGroup andNameEqualTo(String value) {
        addCriterion("name", EnumOperator.EQUAL, value);
        return this;
    }


    public DeptWhereGroup andNameNotEqualTo(String value) {
        addCriterion("name", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public DeptWhereGroup andNameBetween(String value1, String value2) {
        addCriterion("name", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("name", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public DeptWhereGroup andNameNotBetween(String value1, String value2) {
        addCriterion("name", EnumOperator.LESS_THAN, value1);
        addCriterion("name", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public DeptWhereGroup andNameLikeTo(String value) {
        addCriterion("name", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public DeptWhereGroup andNameLikeTo(boolean prefix, String value) {
        addCriterion("name", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public DeptWhereGroup andNameLikeTo(String value, boolean suffix) {
        addCriterion("name", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public DeptWhereGroup andNameNotLikeTo(String value) {
        addCriterion("name", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public DeptWhereGroup andNameNotLikeTo(boolean prefix, String value) {
        addCriterion("name", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public DeptWhereGroup andNameNotLikeTo(String value, boolean suffix) {
        addCriterion("name", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public DeptWhereGroup andNameIn(List<String> list) {
        addCriterion("name", EnumOperator.IN, list);
        return this;
    }


    public DeptWhereGroup andNameNotIn(List<String> list) {
        addCriterion("name", EnumOperator.NOT_IN, list);
        return this;
    }

    public DeptWhereGroup andPidIsNull() {
        addCriterion("pid", EnumOperator.IS_NULL, null);
        return this;
    }

    public DeptWhereGroup andPidIsNotNull() {
        addCriterion("pid", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public DeptWhereGroup andPidEqualTo(Long value) {
        addCriterion("pid", EnumOperator.EQUAL, value);
        return this;
    }


    public DeptWhereGroup andPidNotEqualTo(Long value) {
        addCriterion("pid", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public DeptWhereGroup andPidBetween(Long value1, Long value2) {
        addCriterion("pid", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("pid", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public DeptWhereGroup andPidNotBetween(Long value1, Long value2) {
        addCriterion("pid", EnumOperator.LESS_THAN, value1);
        addCriterion("pid", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public DeptWhereGroup andPidLikeTo(Long value) {
        addCriterion("pid", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public DeptWhereGroup andPidLikeTo(boolean prefix, Long value) {
        addCriterion("pid", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public DeptWhereGroup andPidLikeTo(Long value, boolean suffix) {
        addCriterion("pid", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public DeptWhereGroup andPidNotLikeTo(Long value) {
        addCriterion("pid", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public DeptWhereGroup andPidNotLikeTo(boolean prefix, Long value) {
        addCriterion("pid", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public DeptWhereGroup andPidNotLikeTo(Long value, boolean suffix) {
        addCriterion("pid", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public DeptWhereGroup andPidIn(List<Long> list) {
        addCriterion("pid", EnumOperator.IN, list);
        return this;
    }


    public DeptWhereGroup andPidNotIn(List<Long> list) {
        addCriterion("pid", EnumOperator.NOT_IN, list);
        return this;
    }

    public DeptWhereGroup andPkBizUnitIsNull() {
        addCriterion("pk_biz_unit", EnumOperator.IS_NULL, null);
        return this;
    }

    public DeptWhereGroup andPkBizUnitIsNotNull() {
        addCriterion("pk_biz_unit", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public DeptWhereGroup andPkBizUnitEqualTo(Long value) {
        addCriterion("pk_biz_unit", EnumOperator.EQUAL, value);
        return this;
    }


    public DeptWhereGroup andPkBizUnitNotEqualTo(Long value) {
        addCriterion("pk_biz_unit", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public DeptWhereGroup andPkBizUnitBetween(Long value1, Long value2) {
        addCriterion("pk_biz_unit", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("pk_biz_unit", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public DeptWhereGroup andPkBizUnitNotBetween(Long value1, Long value2) {
        addCriterion("pk_biz_unit", EnumOperator.LESS_THAN, value1);
        addCriterion("pk_biz_unit", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public DeptWhereGroup andPkBizUnitLikeTo(Long value) {
        addCriterion("pk_biz_unit", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public DeptWhereGroup andPkBizUnitLikeTo(boolean prefix, Long value) {
        addCriterion("pk_biz_unit", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public DeptWhereGroup andPkBizUnitLikeTo(Long value, boolean suffix) {
        addCriterion("pk_biz_unit", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public DeptWhereGroup andPkBizUnitNotLikeTo(Long value) {
        addCriterion("pk_biz_unit", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public DeptWhereGroup andPkBizUnitNotLikeTo(boolean prefix, Long value) {
        addCriterion("pk_biz_unit", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public DeptWhereGroup andPkBizUnitNotLikeTo(Long value, boolean suffix) {
        addCriterion("pk_biz_unit", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public DeptWhereGroup andPkBizUnitIn(List<Long> list) {
        addCriterion("pk_biz_unit", EnumOperator.IN, list);
        return this;
    }


    public DeptWhereGroup andPkBizUnitNotIn(List<Long> list) {
        addCriterion("pk_biz_unit", EnumOperator.NOT_IN, list);
        return this;
    }

    public DeptWhereGroup andTelIsNull() {
        addCriterion("tel", EnumOperator.IS_NULL, null);
        return this;
    }

    public DeptWhereGroup andTelIsNotNull() {
        addCriterion("tel", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public DeptWhereGroup andTelEqualTo(String value) {
        addCriterion("tel", EnumOperator.EQUAL, value);
        return this;
    }


    public DeptWhereGroup andTelNotEqualTo(String value) {
        addCriterion("tel", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public DeptWhereGroup andTelBetween(String value1, String value2) {
        addCriterion("tel", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("tel", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public DeptWhereGroup andTelNotBetween(String value1, String value2) {
        addCriterion("tel", EnumOperator.LESS_THAN, value1);
        addCriterion("tel", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public DeptWhereGroup andTelLikeTo(String value) {
        addCriterion("tel", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public DeptWhereGroup andTelLikeTo(boolean prefix, String value) {
        addCriterion("tel", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public DeptWhereGroup andTelLikeTo(String value, boolean suffix) {
        addCriterion("tel", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public DeptWhereGroup andTelNotLikeTo(String value) {
        addCriterion("tel", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public DeptWhereGroup andTelNotLikeTo(boolean prefix, String value) {
        addCriterion("tel", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public DeptWhereGroup andTelNotLikeTo(String value, boolean suffix) {
        addCriterion("tel", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public DeptWhereGroup andTelIn(List<String> list) {
        addCriterion("tel", EnumOperator.IN, list);
        return this;
    }


    public DeptWhereGroup andTelNotIn(List<String> list) {
        addCriterion("tel", EnumOperator.NOT_IN, list);
        return this;
    }

    public DeptWhereGroup andUpdateTimeIsNull() {
        addCriterion("update_time", EnumOperator.IS_NULL, null);
        return this;
    }

    public DeptWhereGroup andUpdateTimeIsNotNull() {
        addCriterion("update_time", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public DeptWhereGroup andUpdateTimeEqualTo(Instant value) {
        addCriterion("update_time", EnumOperator.EQUAL, value);
        return this;
    }


    public DeptWhereGroup andUpdateTimeNotEqualTo(Instant value) {
        addCriterion("update_time", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public DeptWhereGroup andUpdateTimeBetween(Instant value1, Instant value2) {
        addCriterion("update_time", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("update_time", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public DeptWhereGroup andUpdateTimeNotBetween(Instant value1, Instant value2) {
        addCriterion("update_time", EnumOperator.LESS_THAN, value1);
        addCriterion("update_time", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public DeptWhereGroup andUpdateTimeLikeTo(Instant value) {
        addCriterion("update_time", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public DeptWhereGroup andUpdateTimeLikeTo(boolean prefix, Instant value) {
        addCriterion("update_time", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public DeptWhereGroup andUpdateTimeLikeTo(Instant value, boolean suffix) {
        addCriterion("update_time", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public DeptWhereGroup andUpdateTimeNotLikeTo(Instant value) {
        addCriterion("update_time", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public DeptWhereGroup andUpdateTimeNotLikeTo(boolean prefix, Instant value) {
        addCriterion("update_time", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public DeptWhereGroup andUpdateTimeNotLikeTo(Instant value, boolean suffix) {
        addCriterion("update_time", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public DeptWhereGroup andUpdateTimeIn(List<Instant> list) {
        addCriterion("update_time", EnumOperator.IN, list);
        return this;
    }


    public DeptWhereGroup andUpdateTimeNotIn(List<Instant> list) {
        addCriterion("update_time", EnumOperator.NOT_IN, list);
        return this;
    }

    public DeptWhereGroup andUpdateUserIsNull() {
        addCriterion("update_user", EnumOperator.IS_NULL, null);
        return this;
    }

    public DeptWhereGroup andUpdateUserIsNotNull() {
        addCriterion("update_user", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public DeptWhereGroup andUpdateUserEqualTo(Long value) {
        addCriterion("update_user", EnumOperator.EQUAL, value);
        return this;
    }


    public DeptWhereGroup andUpdateUserNotEqualTo(Long value) {
        addCriterion("update_user", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public DeptWhereGroup andUpdateUserBetween(Long value1, Long value2) {
        addCriterion("update_user", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("update_user", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public DeptWhereGroup andUpdateUserNotBetween(Long value1, Long value2) {
        addCriterion("update_user", EnumOperator.LESS_THAN, value1);
        addCriterion("update_user", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public DeptWhereGroup andUpdateUserLikeTo(Long value) {
        addCriterion("update_user", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public DeptWhereGroup andUpdateUserLikeTo(boolean prefix, Long value) {
        addCriterion("update_user", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public DeptWhereGroup andUpdateUserLikeTo(Long value, boolean suffix) {
        addCriterion("update_user", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public DeptWhereGroup andUpdateUserNotLikeTo(Long value) {
        addCriterion("update_user", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public DeptWhereGroup andUpdateUserNotLikeTo(boolean prefix, Long value) {
        addCriterion("update_user", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public DeptWhereGroup andUpdateUserNotLikeTo(Long value, boolean suffix) {
        addCriterion("update_user", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public DeptWhereGroup andUpdateUserIn(List<Long> list) {
        addCriterion("update_user", EnumOperator.IN, list);
        return this;
    }


    public DeptWhereGroup andUpdateUserNotIn(List<Long> list) {
        addCriterion("update_user", EnumOperator.NOT_IN, list);
        return this;
    }


}
