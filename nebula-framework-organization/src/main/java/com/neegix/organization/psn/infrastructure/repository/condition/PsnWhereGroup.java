package com.neegix.organization.psn.infrastructure.repository.condition;

import com.neegix.application.query.EnumOperator;
import com.neegix.application.query.WhereGroups;
import java.time.Instant;
import java.util.List;

 /**
  * This file is auto-generated by nebula-framework-generator.
  * The auto-generation plugin was developed using IntelliJ IDEA Community Edition.
  * Thanks to JetBrains for their outstanding contributions to the developer community.
  * <p>
  * The code generated by this tool is owned by the user of the tool.
  * The tool itself is copyrighted by <a href="https://www.neegix.com">https://www.neegix.com</a>.
  *
  * @author <a href="https://www.neegix.com">https://www.neegix.com</a>
  * @version 1.0.0
  * @since 2024-12-11 15:13:32
  */

public class PsnWhereGroup extends WhereGroups {
    public PsnWhereGroup andBirthIsNull() {
        addCriterion("birth", EnumOperator.IS_NULL, null);
        return this;
    }

    public PsnWhereGroup andBirthIsNotNull() {
        addCriterion("birth", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public PsnWhereGroup andBirthEqualTo(String value) {
        addCriterion("birth", EnumOperator.EQUAL, value);
        return this;
    }


    public PsnWhereGroup andBirthNotEqualTo(String value) {
        addCriterion("birth", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public PsnWhereGroup andBirthBetween(String value1, String value2) {
        addCriterion("birth", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("birth", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public PsnWhereGroup andBirthNotBetween(String value1, String value2) {
        addCriterion("birth", EnumOperator.LESS_THAN, value1);
        addCriterion("birth", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public PsnWhereGroup andBirthLikeTo(String value) {
        addCriterion("birth", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andBirthLikeTo(boolean prefix, String value) {
        addCriterion("birth", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andBirthLikeTo(String value, boolean suffix) {
        addCriterion("birth", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public PsnWhereGroup andBirthNotLikeTo(String value) {
        addCriterion("birth", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andBirthNotLikeTo(boolean prefix, String value) {
        addCriterion("birth", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andBirthNotLikeTo(String value, boolean suffix) {
        addCriterion("birth", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public PsnWhereGroup andBirthIn(List<String> list) {
        addCriterion("birth", EnumOperator.IN, list);
        return this;
    }


    public PsnWhereGroup andBirthNotIn(List<String> list) {
        addCriterion("birth", EnumOperator.NOT_IN, list);
        return this;
    }

    public PsnWhereGroup andCodeIsNull() {
        addCriterion("code", EnumOperator.IS_NULL, null);
        return this;
    }

    public PsnWhereGroup andCodeIsNotNull() {
        addCriterion("code", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public PsnWhereGroup andCodeEqualTo(String value) {
        addCriterion("code", EnumOperator.EQUAL, value);
        return this;
    }


    public PsnWhereGroup andCodeNotEqualTo(String value) {
        addCriterion("code", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public PsnWhereGroup andCodeBetween(String value1, String value2) {
        addCriterion("code", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("code", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public PsnWhereGroup andCodeNotBetween(String value1, String value2) {
        addCriterion("code", EnumOperator.LESS_THAN, value1);
        addCriterion("code", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public PsnWhereGroup andCodeLikeTo(String value) {
        addCriterion("code", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andCodeLikeTo(boolean prefix, String value) {
        addCriterion("code", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andCodeLikeTo(String value, boolean suffix) {
        addCriterion("code", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public PsnWhereGroup andCodeNotLikeTo(String value) {
        addCriterion("code", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andCodeNotLikeTo(boolean prefix, String value) {
        addCriterion("code", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andCodeNotLikeTo(String value, boolean suffix) {
        addCriterion("code", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public PsnWhereGroup andCodeIn(List<String> list) {
        addCriterion("code", EnumOperator.IN, list);
        return this;
    }


    public PsnWhereGroup andCodeNotIn(List<String> list) {
        addCriterion("code", EnumOperator.NOT_IN, list);
        return this;
    }

    public PsnWhereGroup andContactTelIsNull() {
        addCriterion("contact_tel", EnumOperator.IS_NULL, null);
        return this;
    }

    public PsnWhereGroup andContactTelIsNotNull() {
        addCriterion("contact_tel", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public PsnWhereGroup andContactTelEqualTo(String value) {
        addCriterion("contact_tel", EnumOperator.EQUAL, value);
        return this;
    }


    public PsnWhereGroup andContactTelNotEqualTo(String value) {
        addCriterion("contact_tel", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public PsnWhereGroup andContactTelBetween(String value1, String value2) {
        addCriterion("contact_tel", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("contact_tel", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public PsnWhereGroup andContactTelNotBetween(String value1, String value2) {
        addCriterion("contact_tel", EnumOperator.LESS_THAN, value1);
        addCriterion("contact_tel", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public PsnWhereGroup andContactTelLikeTo(String value) {
        addCriterion("contact_tel", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andContactTelLikeTo(boolean prefix, String value) {
        addCriterion("contact_tel", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andContactTelLikeTo(String value, boolean suffix) {
        addCriterion("contact_tel", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public PsnWhereGroup andContactTelNotLikeTo(String value) {
        addCriterion("contact_tel", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andContactTelNotLikeTo(boolean prefix, String value) {
        addCriterion("contact_tel", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andContactTelNotLikeTo(String value, boolean suffix) {
        addCriterion("contact_tel", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public PsnWhereGroup andContactTelIn(List<String> list) {
        addCriterion("contact_tel", EnumOperator.IN, list);
        return this;
    }


    public PsnWhereGroup andContactTelNotIn(List<String> list) {
        addCriterion("contact_tel", EnumOperator.NOT_IN, list);
        return this;
    }

    public PsnWhereGroup andCreateTimeIsNull() {
        addCriterion("create_time", EnumOperator.IS_NULL, null);
        return this;
    }

    public PsnWhereGroup andCreateTimeIsNotNull() {
        addCriterion("create_time", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public PsnWhereGroup andCreateTimeEqualTo(Instant value) {
        addCriterion("create_time", EnumOperator.EQUAL, value);
        return this;
    }


    public PsnWhereGroup andCreateTimeNotEqualTo(Instant value) {
        addCriterion("create_time", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public PsnWhereGroup andCreateTimeBetween(Instant value1, Instant value2) {
        addCriterion("create_time", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("create_time", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public PsnWhereGroup andCreateTimeNotBetween(Instant value1, Instant value2) {
        addCriterion("create_time", EnumOperator.LESS_THAN, value1);
        addCriterion("create_time", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public PsnWhereGroup andCreateTimeLikeTo(Instant value) {
        addCriterion("create_time", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andCreateTimeLikeTo(boolean prefix, Instant value) {
        addCriterion("create_time", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andCreateTimeLikeTo(Instant value, boolean suffix) {
        addCriterion("create_time", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public PsnWhereGroup andCreateTimeNotLikeTo(Instant value) {
        addCriterion("create_time", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andCreateTimeNotLikeTo(boolean prefix, Instant value) {
        addCriterion("create_time", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andCreateTimeNotLikeTo(Instant value, boolean suffix) {
        addCriterion("create_time", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public PsnWhereGroup andCreateTimeIn(List<Instant> list) {
        addCriterion("create_time", EnumOperator.IN, list);
        return this;
    }


    public PsnWhereGroup andCreateTimeNotIn(List<Instant> list) {
        addCriterion("create_time", EnumOperator.NOT_IN, list);
        return this;
    }

    public PsnWhereGroup andCreateUserIsNull() {
        addCriterion("create_user", EnumOperator.IS_NULL, null);
        return this;
    }

    public PsnWhereGroup andCreateUserIsNotNull() {
        addCriterion("create_user", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public PsnWhereGroup andCreateUserEqualTo(Long value) {
        addCriterion("create_user", EnumOperator.EQUAL, value);
        return this;
    }


    public PsnWhereGroup andCreateUserNotEqualTo(Long value) {
        addCriterion("create_user", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public PsnWhereGroup andCreateUserBetween(Long value1, Long value2) {
        addCriterion("create_user", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("create_user", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public PsnWhereGroup andCreateUserNotBetween(Long value1, Long value2) {
        addCriterion("create_user", EnumOperator.LESS_THAN, value1);
        addCriterion("create_user", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public PsnWhereGroup andCreateUserLikeTo(Long value) {
        addCriterion("create_user", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andCreateUserLikeTo(boolean prefix, Long value) {
        addCriterion("create_user", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andCreateUserLikeTo(Long value, boolean suffix) {
        addCriterion("create_user", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public PsnWhereGroup andCreateUserNotLikeTo(Long value) {
        addCriterion("create_user", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andCreateUserNotLikeTo(boolean prefix, Long value) {
        addCriterion("create_user", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andCreateUserNotLikeTo(Long value, boolean suffix) {
        addCriterion("create_user", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public PsnWhereGroup andCreateUserIn(List<Long> list) {
        addCriterion("create_user", EnumOperator.IN, list);
        return this;
    }


    public PsnWhereGroup andCreateUserNotIn(List<Long> list) {
        addCriterion("create_user", EnumOperator.NOT_IN, list);
        return this;
    }

    public PsnWhereGroup andDeletedIsNull() {
        addCriterion("deleted", EnumOperator.IS_NULL, null);
        return this;
    }

    public PsnWhereGroup andDeletedIsNotNull() {
        addCriterion("deleted", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public PsnWhereGroup andDeletedEqualTo(Boolean value) {
        addCriterion("deleted", EnumOperator.EQUAL, value);
        return this;
    }


    public PsnWhereGroup andDeletedNotEqualTo(Boolean value) {
        addCriterion("deleted", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public PsnWhereGroup andDeletedBetween(Boolean value1, Boolean value2) {
        addCriterion("deleted", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("deleted", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public PsnWhereGroup andDeletedNotBetween(Boolean value1, Boolean value2) {
        addCriterion("deleted", EnumOperator.LESS_THAN, value1);
        addCriterion("deleted", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public PsnWhereGroup andDeletedLikeTo(Boolean value) {
        addCriterion("deleted", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andDeletedLikeTo(boolean prefix, Boolean value) {
        addCriterion("deleted", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andDeletedLikeTo(Boolean value, boolean suffix) {
        addCriterion("deleted", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public PsnWhereGroup andDeletedNotLikeTo(Boolean value) {
        addCriterion("deleted", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andDeletedNotLikeTo(boolean prefix, Boolean value) {
        addCriterion("deleted", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andDeletedNotLikeTo(Boolean value, boolean suffix) {
        addCriterion("deleted", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public PsnWhereGroup andDeletedIn(List<Boolean> list) {
        addCriterion("deleted", EnumOperator.IN, list);
        return this;
    }


    public PsnWhereGroup andDeletedNotIn(List<Boolean> list) {
        addCriterion("deleted", EnumOperator.NOT_IN, list);
        return this;
    }

    public PsnWhereGroup andEmailIsNull() {
        addCriterion("email", EnumOperator.IS_NULL, null);
        return this;
    }

    public PsnWhereGroup andEmailIsNotNull() {
        addCriterion("email", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public PsnWhereGroup andEmailEqualTo(String value) {
        addCriterion("email", EnumOperator.EQUAL, value);
        return this;
    }


    public PsnWhereGroup andEmailNotEqualTo(String value) {
        addCriterion("email", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public PsnWhereGroup andEmailBetween(String value1, String value2) {
        addCriterion("email", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("email", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public PsnWhereGroup andEmailNotBetween(String value1, String value2) {
        addCriterion("email", EnumOperator.LESS_THAN, value1);
        addCriterion("email", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public PsnWhereGroup andEmailLikeTo(String value) {
        addCriterion("email", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andEmailLikeTo(boolean prefix, String value) {
        addCriterion("email", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andEmailLikeTo(String value, boolean suffix) {
        addCriterion("email", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public PsnWhereGroup andEmailNotLikeTo(String value) {
        addCriterion("email", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andEmailNotLikeTo(boolean prefix, String value) {
        addCriterion("email", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andEmailNotLikeTo(String value, boolean suffix) {
        addCriterion("email", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public PsnWhereGroup andEmailIn(List<String> list) {
        addCriterion("email", EnumOperator.IN, list);
        return this;
    }


    public PsnWhereGroup andEmailNotIn(List<String> list) {
        addCriterion("email", EnumOperator.NOT_IN, list);
        return this;
    }

    public PsnWhereGroup andEnabledIsNull() {
        addCriterion("enabled", EnumOperator.IS_NULL, null);
        return this;
    }

    public PsnWhereGroup andEnabledIsNotNull() {
        addCriterion("enabled", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public PsnWhereGroup andEnabledEqualTo(Boolean value) {
        addCriterion("enabled", EnumOperator.EQUAL, value);
        return this;
    }


    public PsnWhereGroup andEnabledNotEqualTo(Boolean value) {
        addCriterion("enabled", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public PsnWhereGroup andEnabledBetween(Boolean value1, Boolean value2) {
        addCriterion("enabled", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("enabled", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public PsnWhereGroup andEnabledNotBetween(Boolean value1, Boolean value2) {
        addCriterion("enabled", EnumOperator.LESS_THAN, value1);
        addCriterion("enabled", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public PsnWhereGroup andEnabledLikeTo(Boolean value) {
        addCriterion("enabled", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andEnabledLikeTo(boolean prefix, Boolean value) {
        addCriterion("enabled", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andEnabledLikeTo(Boolean value, boolean suffix) {
        addCriterion("enabled", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public PsnWhereGroup andEnabledNotLikeTo(Boolean value) {
        addCriterion("enabled", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andEnabledNotLikeTo(boolean prefix, Boolean value) {
        addCriterion("enabled", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andEnabledNotLikeTo(Boolean value, boolean suffix) {
        addCriterion("enabled", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public PsnWhereGroup andEnabledIn(List<Boolean> list) {
        addCriterion("enabled", EnumOperator.IN, list);
        return this;
    }


    public PsnWhereGroup andEnabledNotIn(List<Boolean> list) {
        addCriterion("enabled", EnumOperator.NOT_IN, list);
        return this;
    }

    public PsnWhereGroup andGenderIsNull() {
        addCriterion("gender", EnumOperator.IS_NULL, null);
        return this;
    }

    public PsnWhereGroup andGenderIsNotNull() {
        addCriterion("gender", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public PsnWhereGroup andGenderEqualTo(Long value) {
        addCriterion("gender", EnumOperator.EQUAL, value);
        return this;
    }


    public PsnWhereGroup andGenderNotEqualTo(Long value) {
        addCriterion("gender", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public PsnWhereGroup andGenderBetween(Long value1, Long value2) {
        addCriterion("gender", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("gender", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public PsnWhereGroup andGenderNotBetween(Long value1, Long value2) {
        addCriterion("gender", EnumOperator.LESS_THAN, value1);
        addCriterion("gender", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public PsnWhereGroup andGenderLikeTo(Long value) {
        addCriterion("gender", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andGenderLikeTo(boolean prefix, Long value) {
        addCriterion("gender", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andGenderLikeTo(Long value, boolean suffix) {
        addCriterion("gender", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public PsnWhereGroup andGenderNotLikeTo(Long value) {
        addCriterion("gender", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andGenderNotLikeTo(boolean prefix, Long value) {
        addCriterion("gender", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andGenderNotLikeTo(Long value, boolean suffix) {
        addCriterion("gender", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public PsnWhereGroup andGenderIn(List<Long> list) {
        addCriterion("gender", EnumOperator.IN, list);
        return this;
    }


    public PsnWhereGroup andGenderNotIn(List<Long> list) {
        addCriterion("gender", EnumOperator.NOT_IN, list);
        return this;
    }

    public PsnWhereGroup andHireDateIsNull() {
        addCriterion("hire_date", EnumOperator.IS_NULL, null);
        return this;
    }

    public PsnWhereGroup andHireDateIsNotNull() {
        addCriterion("hire_date", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public PsnWhereGroup andHireDateEqualTo(String value) {
        addCriterion("hire_date", EnumOperator.EQUAL, value);
        return this;
    }


    public PsnWhereGroup andHireDateNotEqualTo(String value) {
        addCriterion("hire_date", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public PsnWhereGroup andHireDateBetween(String value1, String value2) {
        addCriterion("hire_date", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("hire_date", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public PsnWhereGroup andHireDateNotBetween(String value1, String value2) {
        addCriterion("hire_date", EnumOperator.LESS_THAN, value1);
        addCriterion("hire_date", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public PsnWhereGroup andHireDateLikeTo(String value) {
        addCriterion("hire_date", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andHireDateLikeTo(boolean prefix, String value) {
        addCriterion("hire_date", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andHireDateLikeTo(String value, boolean suffix) {
        addCriterion("hire_date", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public PsnWhereGroup andHireDateNotLikeTo(String value) {
        addCriterion("hire_date", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andHireDateNotLikeTo(boolean prefix, String value) {
        addCriterion("hire_date", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andHireDateNotLikeTo(String value, boolean suffix) {
        addCriterion("hire_date", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public PsnWhereGroup andHireDateIn(List<String> list) {
        addCriterion("hire_date", EnumOperator.IN, list);
        return this;
    }


    public PsnWhereGroup andHireDateNotIn(List<String> list) {
        addCriterion("hire_date", EnumOperator.NOT_IN, list);
        return this;
    }

    public PsnWhereGroup andHomeAddressIsNull() {
        addCriterion("home_address", EnumOperator.IS_NULL, null);
        return this;
    }

    public PsnWhereGroup andHomeAddressIsNotNull() {
        addCriterion("home_address", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public PsnWhereGroup andHomeAddressEqualTo(String value) {
        addCriterion("home_address", EnumOperator.EQUAL, value);
        return this;
    }


    public PsnWhereGroup andHomeAddressNotEqualTo(String value) {
        addCriterion("home_address", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public PsnWhereGroup andHomeAddressBetween(String value1, String value2) {
        addCriterion("home_address", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("home_address", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public PsnWhereGroup andHomeAddressNotBetween(String value1, String value2) {
        addCriterion("home_address", EnumOperator.LESS_THAN, value1);
        addCriterion("home_address", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public PsnWhereGroup andHomeAddressLikeTo(String value) {
        addCriterion("home_address", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andHomeAddressLikeTo(boolean prefix, String value) {
        addCriterion("home_address", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andHomeAddressLikeTo(String value, boolean suffix) {
        addCriterion("home_address", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public PsnWhereGroup andHomeAddressNotLikeTo(String value) {
        addCriterion("home_address", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andHomeAddressNotLikeTo(boolean prefix, String value) {
        addCriterion("home_address", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andHomeAddressNotLikeTo(String value, boolean suffix) {
        addCriterion("home_address", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public PsnWhereGroup andHomeAddressIn(List<String> list) {
        addCriterion("home_address", EnumOperator.IN, list);
        return this;
    }


    public PsnWhereGroup andHomeAddressNotIn(List<String> list) {
        addCriterion("home_address", EnumOperator.NOT_IN, list);
        return this;
    }

    public PsnWhereGroup andHomeTelIsNull() {
        addCriterion("home_tel", EnumOperator.IS_NULL, null);
        return this;
    }

    public PsnWhereGroup andHomeTelIsNotNull() {
        addCriterion("home_tel", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public PsnWhereGroup andHomeTelEqualTo(String value) {
        addCriterion("home_tel", EnumOperator.EQUAL, value);
        return this;
    }


    public PsnWhereGroup andHomeTelNotEqualTo(String value) {
        addCriterion("home_tel", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public PsnWhereGroup andHomeTelBetween(String value1, String value2) {
        addCriterion("home_tel", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("home_tel", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public PsnWhereGroup andHomeTelNotBetween(String value1, String value2) {
        addCriterion("home_tel", EnumOperator.LESS_THAN, value1);
        addCriterion("home_tel", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public PsnWhereGroup andHomeTelLikeTo(String value) {
        addCriterion("home_tel", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andHomeTelLikeTo(boolean prefix, String value) {
        addCriterion("home_tel", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andHomeTelLikeTo(String value, boolean suffix) {
        addCriterion("home_tel", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public PsnWhereGroup andHomeTelNotLikeTo(String value) {
        addCriterion("home_tel", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andHomeTelNotLikeTo(boolean prefix, String value) {
        addCriterion("home_tel", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andHomeTelNotLikeTo(String value, boolean suffix) {
        addCriterion("home_tel", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public PsnWhereGroup andHomeTelIn(List<String> list) {
        addCriterion("home_tel", EnumOperator.IN, list);
        return this;
    }


    public PsnWhereGroup andHomeTelNotIn(List<String> list) {
        addCriterion("home_tel", EnumOperator.NOT_IN, list);
        return this;
    }

    public PsnWhereGroup andIdIsNull() {
        addCriterion("id", EnumOperator.IS_NULL, null);
        return this;
    }

    public PsnWhereGroup andIdIsNotNull() {
        addCriterion("id", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public PsnWhereGroup andIdEqualTo(Long value) {
        addCriterion("id", EnumOperator.EQUAL, value);
        return this;
    }


    public PsnWhereGroup andIdNotEqualTo(Long value) {
        addCriterion("id", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public PsnWhereGroup andIdBetween(Long value1, Long value2) {
        addCriterion("id", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("id", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public PsnWhereGroup andIdNotBetween(Long value1, Long value2) {
        addCriterion("id", EnumOperator.LESS_THAN, value1);
        addCriterion("id", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public PsnWhereGroup andIdLikeTo(Long value) {
        addCriterion("id", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andIdLikeTo(boolean prefix, Long value) {
        addCriterion("id", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andIdLikeTo(Long value, boolean suffix) {
        addCriterion("id", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public PsnWhereGroup andIdNotLikeTo(Long value) {
        addCriterion("id", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andIdNotLikeTo(boolean prefix, Long value) {
        addCriterion("id", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andIdNotLikeTo(Long value, boolean suffix) {
        addCriterion("id", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public PsnWhereGroup andIdIn(List<Long> list) {
        addCriterion("id", EnumOperator.IN, list);
        return this;
    }


    public PsnWhereGroup andIdNotIn(List<Long> list) {
        addCriterion("id", EnumOperator.NOT_IN, list);
        return this;
    }

    public PsnWhereGroup andIdNoIsNull() {
        addCriterion("id_no", EnumOperator.IS_NULL, null);
        return this;
    }

    public PsnWhereGroup andIdNoIsNotNull() {
        addCriterion("id_no", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public PsnWhereGroup andIdNoEqualTo(String value) {
        addCriterion("id_no", EnumOperator.EQUAL, value);
        return this;
    }


    public PsnWhereGroup andIdNoNotEqualTo(String value) {
        addCriterion("id_no", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public PsnWhereGroup andIdNoBetween(String value1, String value2) {
        addCriterion("id_no", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("id_no", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public PsnWhereGroup andIdNoNotBetween(String value1, String value2) {
        addCriterion("id_no", EnumOperator.LESS_THAN, value1);
        addCriterion("id_no", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public PsnWhereGroup andIdNoLikeTo(String value) {
        addCriterion("id_no", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andIdNoLikeTo(boolean prefix, String value) {
        addCriterion("id_no", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andIdNoLikeTo(String value, boolean suffix) {
        addCriterion("id_no", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public PsnWhereGroup andIdNoNotLikeTo(String value) {
        addCriterion("id_no", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andIdNoNotLikeTo(boolean prefix, String value) {
        addCriterion("id_no", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andIdNoNotLikeTo(String value, boolean suffix) {
        addCriterion("id_no", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public PsnWhereGroup andIdNoIn(List<String> list) {
        addCriterion("id_no", EnumOperator.IN, list);
        return this;
    }


    public PsnWhereGroup andIdNoNotIn(List<String> list) {
        addCriterion("id_no", EnumOperator.NOT_IN, list);
        return this;
    }

    public PsnWhereGroup andIdTypeIsNull() {
        addCriterion("id_type", EnumOperator.IS_NULL, null);
        return this;
    }

    public PsnWhereGroup andIdTypeIsNotNull() {
        addCriterion("id_type", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public PsnWhereGroup andIdTypeEqualTo(Long value) {
        addCriterion("id_type", EnumOperator.EQUAL, value);
        return this;
    }


    public PsnWhereGroup andIdTypeNotEqualTo(Long value) {
        addCriterion("id_type", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public PsnWhereGroup andIdTypeBetween(Long value1, Long value2) {
        addCriterion("id_type", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("id_type", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public PsnWhereGroup andIdTypeNotBetween(Long value1, Long value2) {
        addCriterion("id_type", EnumOperator.LESS_THAN, value1);
        addCriterion("id_type", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public PsnWhereGroup andIdTypeLikeTo(Long value) {
        addCriterion("id_type", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andIdTypeLikeTo(boolean prefix, Long value) {
        addCriterion("id_type", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andIdTypeLikeTo(Long value, boolean suffix) {
        addCriterion("id_type", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public PsnWhereGroup andIdTypeNotLikeTo(Long value) {
        addCriterion("id_type", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andIdTypeNotLikeTo(boolean prefix, Long value) {
        addCriterion("id_type", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andIdTypeNotLikeTo(Long value, boolean suffix) {
        addCriterion("id_type", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public PsnWhereGroup andIdTypeIn(List<Long> list) {
        addCriterion("id_type", EnumOperator.IN, list);
        return this;
    }


    public PsnWhereGroup andIdTypeNotIn(List<Long> list) {
        addCriterion("id_type", EnumOperator.NOT_IN, list);
        return this;
    }

    public PsnWhereGroup andMobilePhoneIsNull() {
        addCriterion("mobile_phone", EnumOperator.IS_NULL, null);
        return this;
    }

    public PsnWhereGroup andMobilePhoneIsNotNull() {
        addCriterion("mobile_phone", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public PsnWhereGroup andMobilePhoneEqualTo(String value) {
        addCriterion("mobile_phone", EnumOperator.EQUAL, value);
        return this;
    }


    public PsnWhereGroup andMobilePhoneNotEqualTo(String value) {
        addCriterion("mobile_phone", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public PsnWhereGroup andMobilePhoneBetween(String value1, String value2) {
        addCriterion("mobile_phone", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("mobile_phone", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public PsnWhereGroup andMobilePhoneNotBetween(String value1, String value2) {
        addCriterion("mobile_phone", EnumOperator.LESS_THAN, value1);
        addCriterion("mobile_phone", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public PsnWhereGroup andMobilePhoneLikeTo(String value) {
        addCriterion("mobile_phone", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andMobilePhoneLikeTo(boolean prefix, String value) {
        addCriterion("mobile_phone", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andMobilePhoneLikeTo(String value, boolean suffix) {
        addCriterion("mobile_phone", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public PsnWhereGroup andMobilePhoneNotLikeTo(String value) {
        addCriterion("mobile_phone", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andMobilePhoneNotLikeTo(boolean prefix, String value) {
        addCriterion("mobile_phone", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andMobilePhoneNotLikeTo(String value, boolean suffix) {
        addCriterion("mobile_phone", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public PsnWhereGroup andMobilePhoneIn(List<String> list) {
        addCriterion("mobile_phone", EnumOperator.IN, list);
        return this;
    }


    public PsnWhereGroup andMobilePhoneNotIn(List<String> list) {
        addCriterion("mobile_phone", EnumOperator.NOT_IN, list);
        return this;
    }

    public PsnWhereGroup andNameIsNull() {
        addCriterion("name", EnumOperator.IS_NULL, null);
        return this;
    }

    public PsnWhereGroup andNameIsNotNull() {
        addCriterion("name", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public PsnWhereGroup andNameEqualTo(String value) {
        addCriterion("name", EnumOperator.EQUAL, value);
        return this;
    }


    public PsnWhereGroup andNameNotEqualTo(String value) {
        addCriterion("name", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public PsnWhereGroup andNameBetween(String value1, String value2) {
        addCriterion("name", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("name", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public PsnWhereGroup andNameNotBetween(String value1, String value2) {
        addCriterion("name", EnumOperator.LESS_THAN, value1);
        addCriterion("name", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public PsnWhereGroup andNameLikeTo(String value) {
        addCriterion("name", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andNameLikeTo(boolean prefix, String value) {
        addCriterion("name", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andNameLikeTo(String value, boolean suffix) {
        addCriterion("name", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public PsnWhereGroup andNameNotLikeTo(String value) {
        addCriterion("name", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andNameNotLikeTo(boolean prefix, String value) {
        addCriterion("name", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andNameNotLikeTo(String value, boolean suffix) {
        addCriterion("name", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public PsnWhereGroup andNameIn(List<String> list) {
        addCriterion("name", EnumOperator.IN, list);
        return this;
    }


    public PsnWhereGroup andNameNotIn(List<String> list) {
        addCriterion("name", EnumOperator.NOT_IN, list);
        return this;
    }

    public PsnWhereGroup andNicknameIsNull() {
        addCriterion("nickname", EnumOperator.IS_NULL, null);
        return this;
    }

    public PsnWhereGroup andNicknameIsNotNull() {
        addCriterion("nickname", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public PsnWhereGroup andNicknameEqualTo(String value) {
        addCriterion("nickname", EnumOperator.EQUAL, value);
        return this;
    }


    public PsnWhereGroup andNicknameNotEqualTo(String value) {
        addCriterion("nickname", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public PsnWhereGroup andNicknameBetween(String value1, String value2) {
        addCriterion("nickname", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("nickname", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public PsnWhereGroup andNicknameNotBetween(String value1, String value2) {
        addCriterion("nickname", EnumOperator.LESS_THAN, value1);
        addCriterion("nickname", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public PsnWhereGroup andNicknameLikeTo(String value) {
        addCriterion("nickname", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andNicknameLikeTo(boolean prefix, String value) {
        addCriterion("nickname", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andNicknameLikeTo(String value, boolean suffix) {
        addCriterion("nickname", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public PsnWhereGroup andNicknameNotLikeTo(String value) {
        addCriterion("nickname", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andNicknameNotLikeTo(boolean prefix, String value) {
        addCriterion("nickname", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andNicknameNotLikeTo(String value, boolean suffix) {
        addCriterion("nickname", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public PsnWhereGroup andNicknameIn(List<String> list) {
        addCriterion("nickname", EnumOperator.IN, list);
        return this;
    }


    public PsnWhereGroup andNicknameNotIn(List<String> list) {
        addCriterion("nickname", EnumOperator.NOT_IN, list);
        return this;
    }

    public PsnWhereGroup andPkBizUnitIsNull() {
        addCriterion("pk_biz_unit", EnumOperator.IS_NULL, null);
        return this;
    }

    public PsnWhereGroup andPkBizUnitIsNotNull() {
        addCriterion("pk_biz_unit", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public PsnWhereGroup andPkBizUnitEqualTo(Long value) {
        addCriterion("pk_biz_unit", EnumOperator.EQUAL, value);
        return this;
    }


    public PsnWhereGroup andPkBizUnitNotEqualTo(Long value) {
        addCriterion("pk_biz_unit", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public PsnWhereGroup andPkBizUnitBetween(Long value1, Long value2) {
        addCriterion("pk_biz_unit", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("pk_biz_unit", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public PsnWhereGroup andPkBizUnitNotBetween(Long value1, Long value2) {
        addCriterion("pk_biz_unit", EnumOperator.LESS_THAN, value1);
        addCriterion("pk_biz_unit", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public PsnWhereGroup andPkBizUnitLikeTo(Long value) {
        addCriterion("pk_biz_unit", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andPkBizUnitLikeTo(boolean prefix, Long value) {
        addCriterion("pk_biz_unit", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andPkBizUnitLikeTo(Long value, boolean suffix) {
        addCriterion("pk_biz_unit", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public PsnWhereGroup andPkBizUnitNotLikeTo(Long value) {
        addCriterion("pk_biz_unit", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andPkBizUnitNotLikeTo(boolean prefix, Long value) {
        addCriterion("pk_biz_unit", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andPkBizUnitNotLikeTo(Long value, boolean suffix) {
        addCriterion("pk_biz_unit", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public PsnWhereGroup andPkBizUnitIn(List<Long> list) {
        addCriterion("pk_biz_unit", EnumOperator.IN, list);
        return this;
    }


    public PsnWhereGroup andPkBizUnitNotIn(List<Long> list) {
        addCriterion("pk_biz_unit", EnumOperator.NOT_IN, list);
        return this;
    }

    public PsnWhereGroup andUpdateTimeIsNull() {
        addCriterion("update_time", EnumOperator.IS_NULL, null);
        return this;
    }

    public PsnWhereGroup andUpdateTimeIsNotNull() {
        addCriterion("update_time", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public PsnWhereGroup andUpdateTimeEqualTo(Instant value) {
        addCriterion("update_time", EnumOperator.EQUAL, value);
        return this;
    }


    public PsnWhereGroup andUpdateTimeNotEqualTo(Instant value) {
        addCriterion("update_time", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public PsnWhereGroup andUpdateTimeBetween(Instant value1, Instant value2) {
        addCriterion("update_time", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("update_time", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public PsnWhereGroup andUpdateTimeNotBetween(Instant value1, Instant value2) {
        addCriterion("update_time", EnumOperator.LESS_THAN, value1);
        addCriterion("update_time", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public PsnWhereGroup andUpdateTimeLikeTo(Instant value) {
        addCriterion("update_time", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andUpdateTimeLikeTo(boolean prefix, Instant value) {
        addCriterion("update_time", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andUpdateTimeLikeTo(Instant value, boolean suffix) {
        addCriterion("update_time", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public PsnWhereGroup andUpdateTimeNotLikeTo(Instant value) {
        addCriterion("update_time", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andUpdateTimeNotLikeTo(boolean prefix, Instant value) {
        addCriterion("update_time", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andUpdateTimeNotLikeTo(Instant value, boolean suffix) {
        addCriterion("update_time", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public PsnWhereGroup andUpdateTimeIn(List<Instant> list) {
        addCriterion("update_time", EnumOperator.IN, list);
        return this;
    }


    public PsnWhereGroup andUpdateTimeNotIn(List<Instant> list) {
        addCriterion("update_time", EnumOperator.NOT_IN, list);
        return this;
    }

    public PsnWhereGroup andUpdateUserIsNull() {
        addCriterion("update_user", EnumOperator.IS_NULL, null);
        return this;
    }

    public PsnWhereGroup andUpdateUserIsNotNull() {
        addCriterion("update_user", EnumOperator.IS_NOT_NULL, null);
        return this;
    }

    public PsnWhereGroup andUpdateUserEqualTo(Long value) {
        addCriterion("update_user", EnumOperator.EQUAL, value);
        return this;
    }


    public PsnWhereGroup andUpdateUserNotEqualTo(Long value) {
        addCriterion("update_user", EnumOperator.NOT_EQUAL, value);
        return this;
    }

    public PsnWhereGroup andUpdateUserBetween(Long value1, Long value2) {
        addCriterion("update_user", EnumOperator.GREATER_EQUAL_THAN, value1);
        addCriterion("update_user", EnumOperator.LESS_EQUAL_THAN, value2);
        return this;
    }


    public PsnWhereGroup andUpdateUserNotBetween(Long value1, Long value2) {
        addCriterion("update_user", EnumOperator.LESS_THAN, value1);
        addCriterion("update_user", EnumOperator.GREATER_THAN, value2);
        return this;
    }



    public PsnWhereGroup andUpdateUserLikeTo(Long value) {
        addCriterion("update_user", EnumOperator.LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andUpdateUserLikeTo(boolean prefix, Long value) {
        addCriterion("update_user", EnumOperator.LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andUpdateUserLikeTo(Long value, boolean suffix) {
        addCriterion("update_user", EnumOperator.LIKE, false, value, suffix);
        return this;
    }




    public PsnWhereGroup andUpdateUserNotLikeTo(Long value) {
        addCriterion("update_user", EnumOperator.NOT_LIKE, true, value, true);
        return this;
    }


    public PsnWhereGroup andUpdateUserNotLikeTo(boolean prefix, Long value) {
        addCriterion("update_user", EnumOperator.NOT_LIKE, prefix, value, false);
        return this;
    }


    public PsnWhereGroup andUpdateUserNotLikeTo(Long value, boolean suffix) {
        addCriterion("update_user", EnumOperator.NOT_LIKE, false, value, suffix);
        return this;
    }



    public PsnWhereGroup andUpdateUserIn(List<Long> list) {
        addCriterion("update_user", EnumOperator.IN, list);
        return this;
    }


    public PsnWhereGroup andUpdateUserNotIn(List<Long> list) {
        addCriterion("update_user", EnumOperator.NOT_IN, list);
        return this;
    }


}
